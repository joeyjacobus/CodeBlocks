                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : FreeWare ANSI-C Compiler
                              3 ; Version 2.6.0 #4309 (Jul 28 2006)
                              4 ; This file generated Wed Oct 12 19:12:34 2016
                              5 ;--------------------------------------------------------
                              6 	.module main
                              7 	.optsdcc -mmcs51 --model-large
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _main
                             13 	.globl _displayWelcome
                             14 	.globl _FreeAll
                             15 	.globl _handleInput
                             16 	.globl _handleMinus
                             17 	.globl _handlePlus
                             18 	.globl _setupBuffers
                             19 	.globl __sdcc_external_startup
                             20 	.globl _P5_7
                             21 	.globl _P5_6
                             22 	.globl _P5_5
                             23 	.globl _P5_4
                             24 	.globl _P5_3
                             25 	.globl _P5_2
                             26 	.globl _P5_1
                             27 	.globl _P5_0
                             28 	.globl _P4_7
                             29 	.globl _P4_6
                             30 	.globl _P4_5
                             31 	.globl _P4_4
                             32 	.globl _P4_3
                             33 	.globl _P4_2
                             34 	.globl _P4_1
                             35 	.globl _P4_0
                             36 	.globl _PX0L
                             37 	.globl _PT0L
                             38 	.globl _PX1L
                             39 	.globl _PT1L
                             40 	.globl _PLS
                             41 	.globl _PT2L
                             42 	.globl _PPCL
                             43 	.globl _EC
                             44 	.globl _CCF0
                             45 	.globl _CCF1
                             46 	.globl _CCF2
                             47 	.globl _CCF3
                             48 	.globl _CCF4
                             49 	.globl _CR
                             50 	.globl _CF
                             51 	.globl _TF2
                             52 	.globl _EXF2
                             53 	.globl _RCLK
                             54 	.globl _TCLK
                             55 	.globl _EXEN2
                             56 	.globl _TR2
                             57 	.globl _C_T2
                             58 	.globl _CP_RL2
                             59 	.globl _T2CON_7
                             60 	.globl _T2CON_6
                             61 	.globl _T2CON_5
                             62 	.globl _T2CON_4
                             63 	.globl _T2CON_3
                             64 	.globl _T2CON_2
                             65 	.globl _T2CON_1
                             66 	.globl _T2CON_0
                             67 	.globl _PT2
                             68 	.globl _ET2
                             69 	.globl _CY
                             70 	.globl _AC
                             71 	.globl _F0
                             72 	.globl _RS1
                             73 	.globl _RS0
                             74 	.globl _OV
                             75 	.globl _F1
                             76 	.globl _P
                             77 	.globl _PS
                             78 	.globl _PT1
                             79 	.globl _PX1
                             80 	.globl _PT0
                             81 	.globl _PX0
                             82 	.globl _RD
                             83 	.globl _WR
                             84 	.globl _T1
                             85 	.globl _T0
                             86 	.globl _INT1
                             87 	.globl _INT0
                             88 	.globl _TXD
                             89 	.globl _RXD
                             90 	.globl _P3_7
                             91 	.globl _P3_6
                             92 	.globl _P3_5
                             93 	.globl _P3_4
                             94 	.globl _P3_3
                             95 	.globl _P3_2
                             96 	.globl _P3_1
                             97 	.globl _P3_0
                             98 	.globl _EA
                             99 	.globl _ES
                            100 	.globl _ET1
                            101 	.globl _EX1
                            102 	.globl _ET0
                            103 	.globl _EX0
                            104 	.globl _P2_7
                            105 	.globl _P2_6
                            106 	.globl _P2_5
                            107 	.globl _P2_4
                            108 	.globl _P2_3
                            109 	.globl _P2_2
                            110 	.globl _P2_1
                            111 	.globl _P2_0
                            112 	.globl _SM0
                            113 	.globl _SM1
                            114 	.globl _SM2
                            115 	.globl _REN
                            116 	.globl _TB8
                            117 	.globl _RB8
                            118 	.globl _TI
                            119 	.globl _RI
                            120 	.globl _P1_7
                            121 	.globl _P1_6
                            122 	.globl _P1_5
                            123 	.globl _P1_4
                            124 	.globl _P1_3
                            125 	.globl _P1_2
                            126 	.globl _P1_1
                            127 	.globl _P1_0
                            128 	.globl _TF1
                            129 	.globl _TR1
                            130 	.globl _TF0
                            131 	.globl _TR0
                            132 	.globl _IE1
                            133 	.globl _IT1
                            134 	.globl _IE0
                            135 	.globl _IT0
                            136 	.globl _P0_7
                            137 	.globl _P0_6
                            138 	.globl _P0_5
                            139 	.globl _P0_4
                            140 	.globl _P0_3
                            141 	.globl _P0_2
                            142 	.globl _P0_1
                            143 	.globl _P0_0
                            144 	.globl _EECON
                            145 	.globl _KBF
                            146 	.globl _KBE
                            147 	.globl _KBLS
                            148 	.globl _BRL
                            149 	.globl _BDRCON
                            150 	.globl _T2MOD
                            151 	.globl _SPDAT
                            152 	.globl _SPSTA
                            153 	.globl _SPCON
                            154 	.globl _SADEN
                            155 	.globl _SADDR
                            156 	.globl _WDTPRG
                            157 	.globl _WDTRST
                            158 	.globl _P5
                            159 	.globl _P4
                            160 	.globl _IPH1
                            161 	.globl _IPL1
                            162 	.globl _IPH0
                            163 	.globl _IPL0
                            164 	.globl _IEN1
                            165 	.globl _IEN0
                            166 	.globl _CMOD
                            167 	.globl _CL
                            168 	.globl _CH
                            169 	.globl _CCON
                            170 	.globl _CCAPM4
                            171 	.globl _CCAPM3
                            172 	.globl _CCAPM2
                            173 	.globl _CCAPM1
                            174 	.globl _CCAPM0
                            175 	.globl _CCAP4L
                            176 	.globl _CCAP3L
                            177 	.globl _CCAP2L
                            178 	.globl _CCAP1L
                            179 	.globl _CCAP0L
                            180 	.globl _CCAP4H
                            181 	.globl _CCAP3H
                            182 	.globl _CCAP2H
                            183 	.globl _CCAP1H
                            184 	.globl _CCAP0H
                            185 	.globl _CKCKON1
                            186 	.globl _CKCKON0
                            187 	.globl _CKRL
                            188 	.globl _AUXR1
                            189 	.globl _AUXR
                            190 	.globl _TH2
                            191 	.globl _TL2
                            192 	.globl _RCAP2H
                            193 	.globl _RCAP2L
                            194 	.globl _T2CON
                            195 	.globl _B
                            196 	.globl _ACC
                            197 	.globl _PSW
                            198 	.globl _IP
                            199 	.globl _P3
                            200 	.globl _IE
                            201 	.globl _P2
                            202 	.globl _SBUF
                            203 	.globl _SCON
                            204 	.globl _P1
                            205 	.globl _TH1
                            206 	.globl _TH0
                            207 	.globl _TL1
                            208 	.globl _TL0
                            209 	.globl _TMOD
                            210 	.globl _TCON
                            211 	.globl _PCON
                            212 	.globl _DPH
                            213 	.globl _DPL
                            214 	.globl _SP
                            215 	.globl _P0
                            216 	.globl _Num_Input_Chars
                            217 	.globl _Num_Buffers
                            218 	.globl _Buffer_Size
                            219 	.globl _Buffers
                            220 	.globl _heap
                            221 	.globl _Restart
                            222 	.globl _displayPrompt
                            223 ;--------------------------------------------------------
                            224 ; special function registers
                            225 ;--------------------------------------------------------
                            226 	.area RSEG    (DATA)
                    0080    227 _P0	=	0x0080
                    0081    228 _SP	=	0x0081
                    0082    229 _DPL	=	0x0082
                    0083    230 _DPH	=	0x0083
                    0087    231 _PCON	=	0x0087
                    0088    232 _TCON	=	0x0088
                    0089    233 _TMOD	=	0x0089
                    008A    234 _TL0	=	0x008a
                    008B    235 _TL1	=	0x008b
                    008C    236 _TH0	=	0x008c
                    008D    237 _TH1	=	0x008d
                    0090    238 _P1	=	0x0090
                    0098    239 _SCON	=	0x0098
                    0099    240 _SBUF	=	0x0099
                    00A0    241 _P2	=	0x00a0
                    00A8    242 _IE	=	0x00a8
                    00B0    243 _P3	=	0x00b0
                    00B8    244 _IP	=	0x00b8
                    00D0    245 _PSW	=	0x00d0
                    00E0    246 _ACC	=	0x00e0
                    00F0    247 _B	=	0x00f0
                    00C8    248 _T2CON	=	0x00c8
                    00CA    249 _RCAP2L	=	0x00ca
                    00CB    250 _RCAP2H	=	0x00cb
                    00CC    251 _TL2	=	0x00cc
                    00CD    252 _TH2	=	0x00cd
                    008E    253 _AUXR	=	0x008e
                    00A2    254 _AUXR1	=	0x00a2
                    0097    255 _CKRL	=	0x0097
                    008F    256 _CKCKON0	=	0x008f
                    008F    257 _CKCKON1	=	0x008f
                    00FA    258 _CCAP0H	=	0x00fa
                    00FB    259 _CCAP1H	=	0x00fb
                    00FC    260 _CCAP2H	=	0x00fc
                    00FD    261 _CCAP3H	=	0x00fd
                    00FE    262 _CCAP4H	=	0x00fe
                    00EA    263 _CCAP0L	=	0x00ea
                    00EB    264 _CCAP1L	=	0x00eb
                    00EC    265 _CCAP2L	=	0x00ec
                    00ED    266 _CCAP3L	=	0x00ed
                    00EE    267 _CCAP4L	=	0x00ee
                    00DA    268 _CCAPM0	=	0x00da
                    00DB    269 _CCAPM1	=	0x00db
                    00DC    270 _CCAPM2	=	0x00dc
                    00DD    271 _CCAPM3	=	0x00dd
                    00DE    272 _CCAPM4	=	0x00de
                    00D8    273 _CCON	=	0x00d8
                    00F9    274 _CH	=	0x00f9
                    00E9    275 _CL	=	0x00e9
                    00D9    276 _CMOD	=	0x00d9
                    00A8    277 _IEN0	=	0x00a8
                    00B1    278 _IEN1	=	0x00b1
                    00B8    279 _IPL0	=	0x00b8
                    00B7    280 _IPH0	=	0x00b7
                    00B2    281 _IPL1	=	0x00b2
                    00B3    282 _IPH1	=	0x00b3
                    00C0    283 _P4	=	0x00c0
                    00D8    284 _P5	=	0x00d8
                    00A6    285 _WDTRST	=	0x00a6
                    00A7    286 _WDTPRG	=	0x00a7
                    00A9    287 _SADDR	=	0x00a9
                    00B9    288 _SADEN	=	0x00b9
                    00C3    289 _SPCON	=	0x00c3
                    00C4    290 _SPSTA	=	0x00c4
                    00C5    291 _SPDAT	=	0x00c5
                    00C9    292 _T2MOD	=	0x00c9
                    009B    293 _BDRCON	=	0x009b
                    009A    294 _BRL	=	0x009a
                    009C    295 _KBLS	=	0x009c
                    009D    296 _KBE	=	0x009d
                    009E    297 _KBF	=	0x009e
                    00D2    298 _EECON	=	0x00d2
                            299 ;--------------------------------------------------------
                            300 ; special function bits
                            301 ;--------------------------------------------------------
                            302 	.area RSEG    (DATA)
                    0080    303 _P0_0	=	0x0080
                    0081    304 _P0_1	=	0x0081
                    0082    305 _P0_2	=	0x0082
                    0083    306 _P0_3	=	0x0083
                    0084    307 _P0_4	=	0x0084
                    0085    308 _P0_5	=	0x0085
                    0086    309 _P0_6	=	0x0086
                    0087    310 _P0_7	=	0x0087
                    0088    311 _IT0	=	0x0088
                    0089    312 _IE0	=	0x0089
                    008A    313 _IT1	=	0x008a
                    008B    314 _IE1	=	0x008b
                    008C    315 _TR0	=	0x008c
                    008D    316 _TF0	=	0x008d
                    008E    317 _TR1	=	0x008e
                    008F    318 _TF1	=	0x008f
                    0090    319 _P1_0	=	0x0090
                    0091    320 _P1_1	=	0x0091
                    0092    321 _P1_2	=	0x0092
                    0093    322 _P1_3	=	0x0093
                    0094    323 _P1_4	=	0x0094
                    0095    324 _P1_5	=	0x0095
                    0096    325 _P1_6	=	0x0096
                    0097    326 _P1_7	=	0x0097
                    0098    327 _RI	=	0x0098
                    0099    328 _TI	=	0x0099
                    009A    329 _RB8	=	0x009a
                    009B    330 _TB8	=	0x009b
                    009C    331 _REN	=	0x009c
                    009D    332 _SM2	=	0x009d
                    009E    333 _SM1	=	0x009e
                    009F    334 _SM0	=	0x009f
                    00A0    335 _P2_0	=	0x00a0
                    00A1    336 _P2_1	=	0x00a1
                    00A2    337 _P2_2	=	0x00a2
                    00A3    338 _P2_3	=	0x00a3
                    00A4    339 _P2_4	=	0x00a4
                    00A5    340 _P2_5	=	0x00a5
                    00A6    341 _P2_6	=	0x00a6
                    00A7    342 _P2_7	=	0x00a7
                    00A8    343 _EX0	=	0x00a8
                    00A9    344 _ET0	=	0x00a9
                    00AA    345 _EX1	=	0x00aa
                    00AB    346 _ET1	=	0x00ab
                    00AC    347 _ES	=	0x00ac
                    00AF    348 _EA	=	0x00af
                    00B0    349 _P3_0	=	0x00b0
                    00B1    350 _P3_1	=	0x00b1
                    00B2    351 _P3_2	=	0x00b2
                    00B3    352 _P3_3	=	0x00b3
                    00B4    353 _P3_4	=	0x00b4
                    00B5    354 _P3_5	=	0x00b5
                    00B6    355 _P3_6	=	0x00b6
                    00B7    356 _P3_7	=	0x00b7
                    00B0    357 _RXD	=	0x00b0
                    00B1    358 _TXD	=	0x00b1
                    00B2    359 _INT0	=	0x00b2
                    00B3    360 _INT1	=	0x00b3
                    00B4    361 _T0	=	0x00b4
                    00B5    362 _T1	=	0x00b5
                    00B6    363 _WR	=	0x00b6
                    00B7    364 _RD	=	0x00b7
                    00B8    365 _PX0	=	0x00b8
                    00B9    366 _PT0	=	0x00b9
                    00BA    367 _PX1	=	0x00ba
                    00BB    368 _PT1	=	0x00bb
                    00BC    369 _PS	=	0x00bc
                    00D0    370 _P	=	0x00d0
                    00D1    371 _F1	=	0x00d1
                    00D2    372 _OV	=	0x00d2
                    00D3    373 _RS0	=	0x00d3
                    00D4    374 _RS1	=	0x00d4
                    00D5    375 _F0	=	0x00d5
                    00D6    376 _AC	=	0x00d6
                    00D7    377 _CY	=	0x00d7
                    00AD    378 _ET2	=	0x00ad
                    00BD    379 _PT2	=	0x00bd
                    00C8    380 _T2CON_0	=	0x00c8
                    00C9    381 _T2CON_1	=	0x00c9
                    00CA    382 _T2CON_2	=	0x00ca
                    00CB    383 _T2CON_3	=	0x00cb
                    00CC    384 _T2CON_4	=	0x00cc
                    00CD    385 _T2CON_5	=	0x00cd
                    00CE    386 _T2CON_6	=	0x00ce
                    00CF    387 _T2CON_7	=	0x00cf
                    00C8    388 _CP_RL2	=	0x00c8
                    00C9    389 _C_T2	=	0x00c9
                    00CA    390 _TR2	=	0x00ca
                    00CB    391 _EXEN2	=	0x00cb
                    00CC    392 _TCLK	=	0x00cc
                    00CD    393 _RCLK	=	0x00cd
                    00CE    394 _EXF2	=	0x00ce
                    00CF    395 _TF2	=	0x00cf
                    00DF    396 _CF	=	0x00df
                    00DE    397 _CR	=	0x00de
                    00DC    398 _CCF4	=	0x00dc
                    00DB    399 _CCF3	=	0x00db
                    00DA    400 _CCF2	=	0x00da
                    00D9    401 _CCF1	=	0x00d9
                    00D8    402 _CCF0	=	0x00d8
                    00AE    403 _EC	=	0x00ae
                    00BE    404 _PPCL	=	0x00be
                    00BD    405 _PT2L	=	0x00bd
                    00BC    406 _PLS	=	0x00bc
                    00BB    407 _PT1L	=	0x00bb
                    00BA    408 _PX1L	=	0x00ba
                    00B9    409 _PT0L	=	0x00b9
                    00B8    410 _PX0L	=	0x00b8
                    00C0    411 _P4_0	=	0x00c0
                    00C1    412 _P4_1	=	0x00c1
                    00C2    413 _P4_2	=	0x00c2
                    00C3    414 _P4_3	=	0x00c3
                    00C4    415 _P4_4	=	0x00c4
                    00C5    416 _P4_5	=	0x00c5
                    00C6    417 _P4_6	=	0x00c6
                    00C7    418 _P4_7	=	0x00c7
                    00D8    419 _P5_0	=	0x00d8
                    00D9    420 _P5_1	=	0x00d9
                    00DA    421 _P5_2	=	0x00da
                    00DB    422 _P5_3	=	0x00db
                    00DC    423 _P5_4	=	0x00dc
                    00DD    424 _P5_5	=	0x00dd
                    00DE    425 _P5_6	=	0x00de
                    00DF    426 _P5_7	=	0x00df
                            427 ;--------------------------------------------------------
                            428 ; overlayable register banks
                            429 ;--------------------------------------------------------
                            430 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     431 	.ds 8
                            432 ;--------------------------------------------------------
                            433 ; internal ram data
                            434 ;--------------------------------------------------------
                            435 	.area DSEG    (DATA)
                            436 ;--------------------------------------------------------
                            437 ; overlayable items in internal ram 
                            438 ;--------------------------------------------------------
                            439 	.area OSEG    (OVR,DATA)
                            440 ;--------------------------------------------------------
                            441 ; Stack segment in internal ram 
                            442 ;--------------------------------------------------------
                            443 	.area	SSEG	(DATA)
   0000                     444 __start__stack:
   0000                     445 	.ds	1
                            446 
                            447 ;--------------------------------------------------------
                            448 ; indirectly addressable internal ram data
                            449 ;--------------------------------------------------------
                            450 	.area ISEG    (DATA)
                            451 ;--------------------------------------------------------
                            452 ; bit data
                            453 ;--------------------------------------------------------
                            454 	.area BSEG    (BIT)
   0000                     455 _Restart::
   0000                     456 	.ds 1
   0001                     457 _setupBuffers_alloc_failed_1_1:
   0001                     458 	.ds 1
   0002                     459 _setupBuffers_sloc0_1_0:
   0002                     460 	.ds 1
   0003                     461 _handlePlus_alloc_success_1_1:
   0003                     462 	.ds 1
                            463 ;--------------------------------------------------------
                            464 ; paged external ram data
                            465 ;--------------------------------------------------------
                            466 	.area PSEG    (PAG,XDATA)
                            467 ;--------------------------------------------------------
                            468 ; external ram data
                            469 ;--------------------------------------------------------
                            470 	.area XSEG    (XDATA)
   0000                     471 _heap::
   0000                     472 	.ds 1600
   0640                     473 _Buffers::
   0640                     474 	.ds 1200
   0AF0                     475 _setupBuffers_i_1_1:
   0AF0                     476 	.ds 2
   0AF2                     477 _handlePlus_buffer_size_1_1:
   0AF2                     478 	.ds 2
   0AF4                     479 _handleMinus_buffer_number_1_1:
   0AF4                     480 	.ds 2
   0AF6                     481 _handleInput_c_1_1:
   0AF6                     482 	.ds 1
                            483 ;--------------------------------------------------------
                            484 ; external initialized ram data
                            485 ;--------------------------------------------------------
                            486 	.area XISEG   (XDATA)
   0000                     487 _Buffer_Size::
   0000                     488 	.ds 2
   0002                     489 _Num_Buffers::
   0002                     490 	.ds 2
   0004                     491 _Num_Input_Chars::
   0004                     492 	.ds 2
                            493 	.area HOME    (CODE)
                            494 	.area GSINIT0 (CODE)
                            495 	.area GSINIT1 (CODE)
                            496 	.area GSINIT2 (CODE)
                            497 	.area GSINIT3 (CODE)
                            498 	.area GSINIT4 (CODE)
                            499 	.area GSINIT5 (CODE)
                            500 	.area GSINIT  (CODE)
                            501 	.area GSFINAL (CODE)
                            502 	.area CSEG    (CODE)
                            503 ;--------------------------------------------------------
                            504 ; interrupt vector 
                            505 ;--------------------------------------------------------
                            506 	.area HOME    (CODE)
   0000                     507 __interrupt_vect:
   0000 02s00r00            508 	ljmp	__sdcc_gsinit_startup
                            509 ;--------------------------------------------------------
                            510 ; global & static initialisations
                            511 ;--------------------------------------------------------
                            512 	.area HOME    (CODE)
                            513 	.area GSINIT  (CODE)
                            514 	.area GSFINAL (CODE)
                            515 	.area GSINIT  (CODE)
                            516 	.globl __sdcc_gsinit_startup
                            517 	.globl __sdcc_program_startup
                            518 	.globl __start__stack
                            519 	.globl __mcs51_genXINIT
                            520 	.globl __mcs51_genXRAMCLEAR
                            521 	.globl __mcs51_genRAMCLEAR
                            522 ;	main.c:41: bool Restart = false;
                            523 ;	genAssign
   0000 C2*00               524 	clr	_Restart
                            525 	.area GSFINAL (CODE)
   0000 02s00r00            526 	ljmp	__sdcc_program_startup
                            527 ;--------------------------------------------------------
                            528 ; Home
                            529 ;--------------------------------------------------------
                            530 	.area HOME    (CODE)
                            531 	.area CSEG    (CODE)
   0000                     532 __sdcc_program_startup:
   0000 12s09r5B            533 	lcall	_main
                            534 ;	return from main will lock up
   0003 80 FE               535 	sjmp .
                            536 ;--------------------------------------------------------
                            537 ; code
                            538 ;--------------------------------------------------------
                            539 	.area CSEG    (CODE)
                            540 ;------------------------------------------------------------
                            541 ;Allocation info for local variables in function '_sdcc_external_startup'
                            542 ;------------------------------------------------------------
                            543 ;------------------------------------------------------------
                            544 ;	main.c:44: _sdcc_external_startup(){
                            545 ;	-----------------------------------------
                            546 ;	 function _sdcc_external_startup
                            547 ;	-----------------------------------------
   0005                     548 __sdcc_external_startup:
                    0002    549 	ar2 = 0x02
                    0003    550 	ar3 = 0x03
                    0004    551 	ar4 = 0x04
                    0005    552 	ar5 = 0x05
                    0006    553 	ar6 = 0x06
                    0007    554 	ar7 = 0x07
                    0000    555 	ar0 = 0x00
                    0001    556 	ar1 = 0x01
                            557 ;	main.c:46: AUXR |= AUXR_ENABLE_XRAM_MASK;   //Enable all XRAM
                            558 ;	genOr
   0005 43 8E 0C            559 	orl	_AUXR,#0x0C
                            560 ;	main.c:47: return 0;
                            561 ;	genRet
                            562 ;	Peephole 182.b	used 16 bit load of dptr
   0008 90 00 00            563 	mov	dptr,#0x0000
                            564 ;	Peephole 300	removed redundant label 00101$
   000B 22                  565 	ret
                            566 ;------------------------------------------------------------
                            567 ;Allocation info for local variables in function 'setupBuffers'
                            568 ;------------------------------------------------------------
                            569 ;i                         Allocated with name '_setupBuffers_i_1_1'
                            570 ;------------------------------------------------------------
                            571 ;	main.c:51: void setupBuffers(void){
                            572 ;	-----------------------------------------
                            573 ;	 function setupBuffers
                            574 ;	-----------------------------------------
   000C                     575 _setupBuffers:
                            576 ;	main.c:53: bool alloc_failed = true;
                            577 ;	genAssign
   000C D2*01               578 	setb	_setupBuffers_alloc_failed_1_1
                            579 ;	main.c:54: Buffer_Size = -1;
                            580 ;	genAssign
   000E 90s00r00            581 	mov	dptr,#_Buffer_Size
   0011 74 FF               582 	mov	a,#0xFF
   0013 F0                  583 	movx	@dptr,a
   0014 A3                  584 	inc	dptr
                            585 ;	Peephole 101	removed redundant mov
   0015 F0                  586 	movx	@dptr,a
                            587 ;	main.c:55: Num_Buffers = 0;    //Reset
                            588 ;	genAssign
   0016 90s00r02            589 	mov	dptr,#_Num_Buffers
   0019 E4                  590 	clr	a
   001A F0                  591 	movx	@dptr,a
   001B A3                  592 	inc	dptr
   001C F0                  593 	movx	@dptr,a
                            594 ;	main.c:58: for (i = 0; i < MAX_NUM_BUFFERS; ++i){
                            595 ;	genAssign
   001D 90s0ArF0            596 	mov	dptr,#_setupBuffers_i_1_1
   0020 74 64               597 	mov	a,#0x64
   0022 F0                  598 	movx	@dptr,a
   0023 E4                  599 	clr	a
   0024 A3                  600 	inc	dptr
   0025 F0                  601 	movx	@dptr,a
   0026                     602 00125$:
                            603 ;	main.c:59: Buffers[i].in_use = false;
                            604 ;	genAssign
   0026 90s0ArF0            605 	mov	dptr,#_setupBuffers_i_1_1
   0029 E0                  606 	movx	a,@dptr
   002A FA                  607 	mov	r2,a
   002B A3                  608 	inc	dptr
   002C E0                  609 	movx	a,@dptr
   002D FB                  610 	mov	r3,a
                            611 ;	genMinus
                            612 ;	genMinusDec
   002E 1A                  613 	dec	r2
   002F BA FF 01            614 	cjne	r2,#0xff,00141$
   0032 1B                  615 	dec	r3
   0033                     616 00141$:
                            617 ;	genAssign
   0033 90s00r00            618 	mov	dptr,#__mulint_PARM_2
   0036 74 0C               619 	mov	a,#0x0C
   0038 F0                  620 	movx	@dptr,a
   0039 E4                  621 	clr	a
   003A A3                  622 	inc	dptr
   003B F0                  623 	movx	@dptr,a
                            624 ;	genCall
   003C 8A 82               625 	mov	dpl,r2
   003E 8B 83               626 	mov	dph,r3
   0040 C0 02               627 	push	ar2
   0042 C0 03               628 	push	ar3
   0044 12s00r00            629 	lcall	__mulint
   0047 AC 82               630 	mov	r4,dpl
   0049 AD 83               631 	mov	r5,dph
   004B D0 03               632 	pop	ar3
   004D D0 02               633 	pop	ar2
                            634 ;	genPlus
                            635 ;	Peephole 236.g	used r4 instead of ar4
   004F EC                  636 	mov	a,r4
   0050 24r40               637 	add	a,#_Buffers
   0052 FC                  638 	mov	r4,a
                            639 ;	Peephole 236.g	used r5 instead of ar5
   0053 ED                  640 	mov	a,r5
   0054 34s06               641 	addc	a,#(_Buffers >> 8)
   0056 FD                  642 	mov	r5,a
                            643 ;	genPlus
                            644 ;     genPlusIncr
   0057 74 0A               645 	mov	a,#0x0A
                            646 ;	Peephole 236.a	used r4 instead of ar4
   0059 2C                  647 	add	a,r4
   005A F5 82               648 	mov	dpl,a
                            649 ;	Peephole 181	changed mov to clr
   005C E4                  650 	clr	a
                            651 ;	Peephole 236.b	used r5 instead of ar5
   005D 3D                  652 	addc	a,r5
   005E F5 83               653 	mov	dph,a
                            654 ;	genPointerSet
                            655 ;     genFarPointerSet
                            656 ;	Peephole 181	changed mov to clr
   0060 E4                  657 	clr	a
   0061 F0                  658 	movx	@dptr,a
   0062 A3                  659 	inc	dptr
                            660 ;	Peephole 101	removed redundant mov
   0063 F0                  661 	movx	@dptr,a
                            662 ;	genAssign
   0064 90s0ArF0            663 	mov	dptr,#_setupBuffers_i_1_1
   0067 EA                  664 	mov	a,r2
   0068 F0                  665 	movx	@dptr,a
   0069 A3                  666 	inc	dptr
   006A EB                  667 	mov	a,r3
   006B F0                  668 	movx	@dptr,a
                            669 ;	main.c:58: for (i = 0; i < MAX_NUM_BUFFERS; ++i){
                            670 ;	genAssign
   006C 90s0ArF0            671 	mov	dptr,#_setupBuffers_i_1_1
   006F E0                  672 	movx	a,@dptr
   0070 FA                  673 	mov	r2,a
   0071 A3                  674 	inc	dptr
   0072 E0                  675 	movx	a,@dptr
                            676 ;	genIfx
   0073 FB                  677 	mov	r3,a
                            678 ;	Peephole 135	removed redundant mov
   0074 4A                  679 	orl	a,r2
                            680 ;	genIfxJump
                            681 ;	Peephole 108.b	removed ljmp by inverse jump logic
   0075 70 AF               682 	jnz	00125$
                            683 ;	Peephole 300	removed redundant label 00142$
                            684 ;	main.c:63: while (alloc_failed){
   0077                     685 00120$:
                            686 ;	genIfx
                            687 ;	genIfxJump
   0077 20*01 01            688 	jb	_setupBuffers_alloc_failed_1_1,00143$
                            689 ;	Peephole 251.a	replaced ljmp to ret with ret
   007A 22                  690 	ret
   007B                     691 00143$:
                            692 ;	main.c:66: while (Buffer_Size == -1 || Buffer_Size > BUF1_MAX_VALUE || Buffer_Size < BUF1_MIN_VALUE || (Buffer_Size & 0xF) ){
   007B                     693 00112$:
                            694 ;	genAssign
   007B 90s00r00            695 	mov	dptr,#_Buffer_Size
   007E E0                  696 	movx	a,@dptr
   007F FA                  697 	mov	r2,a
   0080 A3                  698 	inc	dptr
   0081 E0                  699 	movx	a,@dptr
   0082 FB                  700 	mov	r3,a
                            701 ;	genCmpEq
                            702 ;	gencjneshort
   0083 BA FF 05            703 	cjne	r2,#0xFF,00144$
   0086 BB FF 02            704 	cjne	r3,#0xFF,00144$
                            705 ;	Peephole 112.b	changed ljmp to sjmp
   0089 80 21               706 	sjmp	00113$
   008B                     707 00144$:
                            708 ;	genCmpGt
                            709 ;	genCmp
   008B C3                  710 	clr	c
   008C 74 40               711 	mov	a,#0x40
   008E 9A                  712 	subb	a,r2
                            713 ;	Peephole 159	avoided xrl during execution
   008F 74 86               714 	mov	a,#(0x06 ^ 0x80)
   0091 8B F0               715 	mov	b,r3
   0093 63 F0 80            716 	xrl	b,#0x80
   0096 95 F0               717 	subb	a,b
                            718 ;	genIfxJump
                            719 ;	Peephole 112.b	changed ljmp to sjmp
                            720 ;	Peephole 160.a	removed sjmp by inverse jump logic
                            721 ;	genCmpLt
                            722 ;	genCmp
   0098 40 12               723 	jc	00113$
                            724 ;	Peephole 300	removed redundant label 00145$
                            725 ;	Peephole 256.a	removed redundant clr c
   009A EA                  726 	mov	a,r2
   009B 94 20               727 	subb	a,#0x20
   009D EB                  728 	mov	a,r3
   009E 64 80               729 	xrl	a,#0x80
   00A0 94 80               730 	subb	a,#0x80
                            731 ;	genIfxJump
                            732 ;	Peephole 112.b	changed ljmp to sjmp
                            733 ;	Peephole 160.a	removed sjmp by inverse jump logic
   00A2 40 08               734 	jc	00113$
                            735 ;	Peephole 300	removed redundant label 00146$
                            736 ;	genAnd
   00A4 EA                  737 	mov	a,r2
   00A5 54 0F               738 	anl	a,#0x0F
   00A7 70 03               739 	jnz	00147$
   00A9 02s01r5F            740 	ljmp	00114$
   00AC                     741 00147$:
   00AC                     742 00113$:
                            743 ;	main.c:67: printf ("\r\nEnter a size for the buffers that is a multiple of 16 between %d and %d: ", BUF1_MIN_VALUE, BUF1_MAX_VALUE);
                            744 ;	genIpush
   00AC 74 40               745 	mov	a,#0x40
   00AE C0 E0               746 	push	acc
   00B0 74 06               747 	mov	a,#0x06
   00B2 C0 E0               748 	push	acc
                            749 ;	genIpush
   00B4 74 20               750 	mov	a,#0x20
   00B6 C0 E0               751 	push	acc
                            752 ;	Peephole 181	changed mov to clr
   00B8 E4                  753 	clr	a
   00B9 C0 E0               754 	push	acc
                            755 ;	genIpush
   00BB 74r00               756 	mov	a,#__str_0
   00BD C0 E0               757 	push	acc
   00BF 74s00               758 	mov	a,#(__str_0 >> 8)
   00C1 C0 E0               759 	push	acc
   00C3 74 80               760 	mov	a,#0x80
   00C5 C0 E0               761 	push	acc
                            762 ;	genCall
   00C7 12s00r00            763 	lcall	_printf
   00CA E5 81               764 	mov	a,sp
   00CC 24 F9               765 	add	a,#0xf9
   00CE F5 81               766 	mov	sp,a
                            767 ;	main.c:68: Buffer_Size = Serial_GetInteger(BUF1_MAX_STR_LENGTH);
                            768 ;	genCall
                            769 ;	Peephole 182.b	used 16 bit load of dptr
   00D0 90 00 0A            770 	mov	dptr,#0x000A
   00D3 12s00r00            771 	lcall	_Serial_GetInteger
   00D6 AC 82               772 	mov	r4,dpl
   00D8 AD 83               773 	mov	r5,dph
                            774 ;	genAssign
   00DA 90s00r00            775 	mov	dptr,#_Buffer_Size
   00DD EC                  776 	mov	a,r4
   00DE F0                  777 	movx	@dptr,a
   00DF A3                  778 	inc	dptr
   00E0 ED                  779 	mov	a,r5
   00E1 F0                  780 	movx	@dptr,a
                            781 ;	main.c:69: if (Buffer_Size < BUF1_MIN_VALUE){
                            782 ;	genCmpLt
                            783 ;	genCmp
   00E2 C3                  784 	clr	c
   00E3 EC                  785 	mov	a,r4
   00E4 94 20               786 	subb	a,#0x20
   00E6 ED                  787 	mov	a,r5
   00E7 64 80               788 	xrl	a,#0x80
   00E9 94 80               789 	subb	a,#0x80
                            790 ;	genIfxJump
                            791 ;	Peephole 108.a	removed ljmp by inverse jump logic
   00EB 50 1F               792 	jnc	00107$
                            793 ;	Peephole 300	removed redundant label 00148$
                            794 ;	main.c:70: printf("\r\nError. Value must be greater than %d\r\n", BUF1_MIN_VALUE);
                            795 ;	genIpush
   00ED 74 20               796 	mov	a,#0x20
   00EF C0 E0               797 	push	acc
                            798 ;	Peephole 181	changed mov to clr
   00F1 E4                  799 	clr	a
   00F2 C0 E0               800 	push	acc
                            801 ;	genIpush
   00F4 74r4C               802 	mov	a,#__str_1
   00F6 C0 E0               803 	push	acc
   00F8 74s00               804 	mov	a,#(__str_1 >> 8)
   00FA C0 E0               805 	push	acc
   00FC 74 80               806 	mov	a,#0x80
   00FE C0 E0               807 	push	acc
                            808 ;	genCall
   0100 12s00r00            809 	lcall	_printf
   0103 E5 81               810 	mov	a,sp
   0105 24 FB               811 	add	a,#0xfb
   0107 F5 81               812 	mov	sp,a
   0109 02s00r7B            813 	ljmp	00112$
   010C                     814 00107$:
                            815 ;	main.c:72: else if(Buffer_Size > BUF1_MAX_VALUE){
                            816 ;	genCmpGt
                            817 ;	genCmp
   010C C3                  818 	clr	c
   010D 74 40               819 	mov	a,#0x40
   010F 9C                  820 	subb	a,r4
                            821 ;	Peephole 159	avoided xrl during execution
   0110 74 86               822 	mov	a,#(0x06 ^ 0x80)
   0112 8D F0               823 	mov	b,r5
   0114 63 F0 80            824 	xrl	b,#0x80
   0117 95 F0               825 	subb	a,b
                            826 ;	genIfxJump
                            827 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0119 50 20               828 	jnc	00104$
                            829 ;	Peephole 300	removed redundant label 00149$
                            830 ;	main.c:73: printf("\r\nError. Value must be less than %d\r\n", BUF1_MAX_VALUE);
                            831 ;	genIpush
   011B 74 40               832 	mov	a,#0x40
   011D C0 E0               833 	push	acc
   011F 74 06               834 	mov	a,#0x06
   0121 C0 E0               835 	push	acc
                            836 ;	genIpush
   0123 74r75               837 	mov	a,#__str_2
   0125 C0 E0               838 	push	acc
   0127 74s00               839 	mov	a,#(__str_2 >> 8)
   0129 C0 E0               840 	push	acc
   012B 74 80               841 	mov	a,#0x80
   012D C0 E0               842 	push	acc
                            843 ;	genCall
   012F 12s00r00            844 	lcall	_printf
   0132 E5 81               845 	mov	a,sp
   0134 24 FB               846 	add	a,#0xfb
   0136 F5 81               847 	mov	sp,a
   0138 02s00r7B            848 	ljmp	00112$
   013B                     849 00104$:
                            850 ;	main.c:76: else if (Buffer_Size & 0xF){
                            851 ;	genAnd
   013B EC                  852 	mov	a,r4
   013C 54 0F               853 	anl	a,#0x0F
   013E 70 03               854 	jnz	00150$
   0140 02s00r7B            855 	ljmp	00112$
   0143                     856 00150$:
                            857 ;	main.c:77: printf ("\r\nError. Buffer Size must be a multiple of 16\r\n", Buffer_Size);
                            858 ;	genIpush
   0143 C0 04               859 	push	ar4
   0145 C0 05               860 	push	ar5
                            861 ;	genIpush
   0147 74r9B               862 	mov	a,#__str_3
   0149 C0 E0               863 	push	acc
   014B 74s00               864 	mov	a,#(__str_3 >> 8)
   014D C0 E0               865 	push	acc
   014F 74 80               866 	mov	a,#0x80
   0151 C0 E0               867 	push	acc
                            868 ;	genCall
   0153 12s00r00            869 	lcall	_printf
   0156 E5 81               870 	mov	a,sp
   0158 24 FB               871 	add	a,#0xfb
   015A F5 81               872 	mov	sp,a
   015C 02s00r7B            873 	ljmp	00112$
   015F                     874 00114$:
                            875 ;	main.c:81: alloc_failed = !Buffer_Init(&Buffers[Num_Buffers], Buffer_Size, 0);
                            876 ;	genAssign
   015F 90s00r02            877 	mov	dptr,#_Num_Buffers
   0162 E0                  878 	movx	a,@dptr
   0163 FC                  879 	mov	r4,a
   0164 A3                  880 	inc	dptr
   0165 E0                  881 	movx	a,@dptr
   0166 FD                  882 	mov	r5,a
                            883 ;	genAssign
   0167 90s00r00            884 	mov	dptr,#__mulint_PARM_2
   016A 74 0C               885 	mov	a,#0x0C
   016C F0                  886 	movx	@dptr,a
   016D E4                  887 	clr	a
   016E A3                  888 	inc	dptr
   016F F0                  889 	movx	@dptr,a
                            890 ;	genCall
   0170 8C 82               891 	mov	dpl,r4
   0172 8D 83               892 	mov	dph,r5
   0174 C0 02               893 	push	ar2
   0176 C0 03               894 	push	ar3
   0178 12s00r00            895 	lcall	__mulint
   017B AC 82               896 	mov	r4,dpl
   017D AD 83               897 	mov	r5,dph
   017F D0 03               898 	pop	ar3
   0181 D0 02               899 	pop	ar2
                            900 ;	genPlus
                            901 ;	Peephole 236.g	used r4 instead of ar4
   0183 EC                  902 	mov	a,r4
   0184 24r40               903 	add	a,#_Buffers
   0186 FC                  904 	mov	r4,a
                            905 ;	Peephole 236.g	used r5 instead of ar5
   0187 ED                  906 	mov	a,r5
   0188 34s06               907 	addc	a,#(_Buffers >> 8)
   018A FD                  908 	mov	r5,a
                            909 ;	genCast
   018B 7E 00               910 	mov	r6,#0x0
                            911 ;	genAssign
   018D 90s00r00            912 	mov	dptr,#_Buffer_Init_PARM_2
   0190 EA                  913 	mov	a,r2
   0191 F0                  914 	movx	@dptr,a
   0192 A3                  915 	inc	dptr
   0193 EB                  916 	mov	a,r3
   0194 F0                  917 	movx	@dptr,a
                            918 ;	genAssign
   0195 90s00r00            919 	mov	dptr,#_Buffer_Init_PARM_3
   0198 E4                  920 	clr	a
   0199 F0                  921 	movx	@dptr,a
   019A A3                  922 	inc	dptr
   019B F0                  923 	movx	@dptr,a
                            924 ;	genCall
   019C 8C 82               925 	mov	dpl,r4
   019E 8D 83               926 	mov	dph,r5
   01A0 8E F0               927 	mov	b,r6
   01A2 12s00r00            928 	lcall	_Buffer_Init
   01A5 92*02               929 	mov	_setupBuffers_sloc0_1_0,c
                            930 ;	genNot
   01A7 A2*02               931 	mov	c,_setupBuffers_sloc0_1_0
   01A9 B3                  932 	cpl	c
   01AA 92*01               933 	mov	_setupBuffers_alloc_failed_1_1,c
                            934 ;	main.c:82: Num_Buffers++;
                            935 ;	genAssign
   01AC 90s00r02            936 	mov	dptr,#_Num_Buffers
   01AF E0                  937 	movx	a,@dptr
   01B0 FA                  938 	mov	r2,a
   01B1 A3                  939 	inc	dptr
   01B2 E0                  940 	movx	a,@dptr
   01B3 FB                  941 	mov	r3,a
                            942 ;	genPlus
   01B4 90s00r02            943 	mov	dptr,#_Num_Buffers
                            944 ;     genPlusIncr
   01B7 74 01               945 	mov	a,#0x01
                            946 ;	Peephole 236.a	used r2 instead of ar2
   01B9 2A                  947 	add	a,r2
   01BA F0                  948 	movx	@dptr,a
                            949 ;	Peephole 181	changed mov to clr
   01BB E4                  950 	clr	a
                            951 ;	Peephole 236.b	used r3 instead of ar3
   01BC 3B                  952 	addc	a,r3
   01BD A3                  953 	inc	dptr
   01BE F0                  954 	movx	@dptr,a
                            955 ;	main.c:83: if (!alloc_failed){
                            956 ;	genIfx
                            957 ;	genIfxJump
                            958 ;	Peephole 108.e	removed ljmp by inverse jump logic
   01BF 20*01 62            959 	jb	_setupBuffers_alloc_failed_1_1,00116$
                            960 ;	Peephole 300	removed redundant label 00151$
                            961 ;	main.c:84: alloc_failed = !Buffer_Init(&Buffers[Num_Buffers], Buffer_Size, 1);
                            962 ;	genAssign
   01C2 90s00r02            963 	mov	dptr,#_Num_Buffers
   01C5 E0                  964 	movx	a,@dptr
   01C6 FA                  965 	mov	r2,a
   01C7 A3                  966 	inc	dptr
   01C8 E0                  967 	movx	a,@dptr
   01C9 FB                  968 	mov	r3,a
                            969 ;	genAssign
   01CA 90s00r00            970 	mov	dptr,#__mulint_PARM_2
   01CD 74 0C               971 	mov	a,#0x0C
   01CF F0                  972 	movx	@dptr,a
   01D0 E4                  973 	clr	a
   01D1 A3                  974 	inc	dptr
   01D2 F0                  975 	movx	@dptr,a
                            976 ;	genCall
   01D3 8A 82               977 	mov	dpl,r2
   01D5 8B 83               978 	mov	dph,r3
   01D7 12s00r00            979 	lcall	__mulint
   01DA AA 82               980 	mov	r2,dpl
   01DC AB 83               981 	mov	r3,dph
                            982 ;	genPlus
                            983 ;	Peephole 236.g	used r2 instead of ar2
   01DE EA                  984 	mov	a,r2
   01DF 24r40               985 	add	a,#_Buffers
   01E1 FA                  986 	mov	r2,a
                            987 ;	Peephole 236.g	used r3 instead of ar3
   01E2 EB                  988 	mov	a,r3
   01E3 34s06               989 	addc	a,#(_Buffers >> 8)
   01E5 FB                  990 	mov	r3,a
                            991 ;	genCast
   01E6 7C 00               992 	mov	r4,#0x0
                            993 ;	genAssign
   01E8 90s00r00            994 	mov	dptr,#_Buffer_Size
   01EB E0                  995 	movx	a,@dptr
   01EC FD                  996 	mov	r5,a
   01ED A3                  997 	inc	dptr
   01EE E0                  998 	movx	a,@dptr
   01EF FE                  999 	mov	r6,a
                           1000 ;	genAssign
   01F0 90s00r00           1001 	mov	dptr,#_Buffer_Init_PARM_2
   01F3 ED                 1002 	mov	a,r5
   01F4 F0                 1003 	movx	@dptr,a
   01F5 A3                 1004 	inc	dptr
   01F6 EE                 1005 	mov	a,r6
   01F7 F0                 1006 	movx	@dptr,a
                           1007 ;	genAssign
   01F8 90s00r00           1008 	mov	dptr,#_Buffer_Init_PARM_3
   01FB 74 01              1009 	mov	a,#0x01
   01FD F0                 1010 	movx	@dptr,a
   01FE E4                 1011 	clr	a
   01FF A3                 1012 	inc	dptr
   0200 F0                 1013 	movx	@dptr,a
                           1014 ;	genCall
   0201 8A 82              1015 	mov	dpl,r2
   0203 8B 83              1016 	mov	dph,r3
   0205 8C F0              1017 	mov	b,r4
   0207 12s00r00           1018 	lcall	_Buffer_Init
   020A 92*02              1019 	mov	_setupBuffers_sloc0_1_0,c
                           1020 ;	genNot
   020C A2*02              1021 	mov	c,_setupBuffers_sloc0_1_0
   020E B3                 1022 	cpl	c
   020F 92*01              1023 	mov	_setupBuffers_alloc_failed_1_1,c
                           1024 ;	main.c:85: Num_Buffers++;
                           1025 ;	genAssign
   0211 90s00r02           1026 	mov	dptr,#_Num_Buffers
   0214 E0                 1027 	movx	a,@dptr
   0215 FA                 1028 	mov	r2,a
   0216 A3                 1029 	inc	dptr
   0217 E0                 1030 	movx	a,@dptr
   0218 FB                 1031 	mov	r3,a
                           1032 ;	genPlus
   0219 90s00r02           1033 	mov	dptr,#_Num_Buffers
                           1034 ;     genPlusIncr
   021C 74 01              1035 	mov	a,#0x01
                           1036 ;	Peephole 236.a	used r2 instead of ar2
   021E 2A                 1037 	add	a,r2
   021F F0                 1038 	movx	@dptr,a
                           1039 ;	Peephole 181	changed mov to clr
   0220 E4                 1040 	clr	a
                           1041 ;	Peephole 236.b	used r3 instead of ar3
   0221 3B                 1042 	addc	a,r3
   0222 A3                 1043 	inc	dptr
   0223 F0                 1044 	movx	@dptr,a
   0224                    1045 00116$:
                           1046 ;	main.c:88: if (!alloc_failed)
                           1047 ;	genIfx
                           1048 ;	genIfxJump
                           1049 ;	Peephole 108.e	removed ljmp by inverse jump logic
   0224 20*01 42           1050 	jb	_setupBuffers_alloc_failed_1_1,00118$
                           1051 ;	Peephole 300	removed redundant label 00152$
                           1052 ;	main.c:89: printf ("\r\nBuffers of size: %d allocated at addresses: %p and %p\r\n", Buffer_Size, Buffers[0].buf_start, Buffers[1].buf_start);
                           1053 ;	genPointerGet
                           1054 ;	genFarPointerGet
   0227 90s06r4C           1055 	mov	dptr,#(_Buffers + 0x000c)
   022A E0                 1056 	movx	a,@dptr
   022B FA                 1057 	mov	r2,a
   022C A3                 1058 	inc	dptr
   022D E0                 1059 	movx	a,@dptr
   022E FB                 1060 	mov	r3,a
                           1061 ;	genCast
   022F 7C 00              1062 	mov	r4,#0x0
                           1063 ;	genPointerGet
                           1064 ;	genFarPointerGet
   0231 90s06r40           1065 	mov	dptr,#_Buffers
   0234 E0                 1066 	movx	a,@dptr
   0235 FD                 1067 	mov	r5,a
   0236 A3                 1068 	inc	dptr
   0237 E0                 1069 	movx	a,@dptr
   0238 FE                 1070 	mov	r6,a
                           1071 ;	genCast
   0239 7F 00              1072 	mov	r7,#0x0
                           1073 ;	genIpush
   023B C0 02              1074 	push	ar2
   023D C0 03              1075 	push	ar3
   023F C0 04              1076 	push	ar4
                           1077 ;	genIpush
   0241 C0 05              1078 	push	ar5
   0243 C0 06              1079 	push	ar6
   0245 C0 07              1080 	push	ar7
                           1081 ;	genIpush
   0247 90s00r00           1082 	mov	dptr,#_Buffer_Size
   024A E0                 1083 	movx	a,@dptr
   024B C0 E0              1084 	push	acc
   024D A3                 1085 	inc	dptr
   024E E0                 1086 	movx	a,@dptr
   024F C0 E0              1087 	push	acc
                           1088 ;	genIpush
   0251 74rCB              1089 	mov	a,#__str_4
   0253 C0 E0              1090 	push	acc
   0255 74s00              1091 	mov	a,#(__str_4 >> 8)
   0257 C0 E0              1092 	push	acc
   0259 74 80              1093 	mov	a,#0x80
   025B C0 E0              1094 	push	acc
                           1095 ;	genCall
   025D 12s00r00           1096 	lcall	_printf
   0260 E5 81              1097 	mov	a,sp
   0262 24 F5              1098 	add	a,#0xf5
   0264 F5 81              1099 	mov	sp,a
   0266 02s00r77           1100 	ljmp	00120$
   0269                    1101 00118$:
                           1102 ;	main.c:91: printf("\r\nMalloc failed for buffer size %d, choose something smaller\r\n", Buffer_Size);
                           1103 ;	genIpush
   0269 90s00r00           1104 	mov	dptr,#_Buffer_Size
   026C E0                 1105 	movx	a,@dptr
   026D C0 E0              1106 	push	acc
   026F A3                 1107 	inc	dptr
   0270 E0                 1108 	movx	a,@dptr
   0271 C0 E0              1109 	push	acc
                           1110 ;	genIpush
   0273 74r05              1111 	mov	a,#__str_5
   0275 C0 E0              1112 	push	acc
   0277 74s01              1113 	mov	a,#(__str_5 >> 8)
   0279 C0 E0              1114 	push	acc
   027B 74 80              1115 	mov	a,#0x80
   027D C0 E0              1116 	push	acc
                           1117 ;	genCall
   027F 12s00r00           1118 	lcall	_printf
   0282 E5 81              1119 	mov	a,sp
   0284 24 FB              1120 	add	a,#0xfb
   0286 F5 81              1121 	mov	sp,a
                           1122 ;	main.c:93: Buffer_Free(&Buffers[0]);
                           1123 ;	genCall
                           1124 ;	Peephole 182.a	used 16 bit load of DPTR
   0288 90s06r40           1125 	mov	dptr,#_Buffers
   028B 75 F0 00           1126 	mov	b,#0x00
   028E 12s00r00           1127 	lcall	_Buffer_Free
                           1128 ;	main.c:94: Buffer_Free(&Buffers[1]);
                           1129 ;	genCall
                           1130 ;	Peephole 182.a	used 16 bit load of DPTR
   0291 90s06r4C           1131 	mov	dptr,#(_Buffers + 0x000c)
   0294 75 F0 00           1132 	mov	b,#0x00
   0297 12s00r00           1133 	lcall	_Buffer_Free
                           1134 ;	main.c:95: Num_Buffers = 0;
                           1135 ;	genAssign
   029A 90s00r02           1136 	mov	dptr,#_Num_Buffers
   029D E4                 1137 	clr	a
   029E F0                 1138 	movx	@dptr,a
   029F A3                 1139 	inc	dptr
   02A0 F0                 1140 	movx	@dptr,a
                           1141 ;	main.c:96: Buffer_Size = 0;    //Reset so it will ask again
                           1142 ;	genAssign
   02A1 90s00r00           1143 	mov	dptr,#_Buffer_Size
   02A4 E4                 1144 	clr	a
   02A5 F0                 1145 	movx	@dptr,a
   02A6 A3                 1146 	inc	dptr
   02A7 F0                 1147 	movx	@dptr,a
   02A8 02s00r77           1148 	ljmp	00120$
                           1149 ;	Peephole 259.b	removed redundant label 00126$ and ret
                           1150 ;
                           1151 ;------------------------------------------------------------
                           1152 ;Allocation info for local variables in function 'handlePlus'
                           1153 ;------------------------------------------------------------
                           1154 ;buffer_size               Allocated with name '_handlePlus_buffer_size_1_1'
                           1155 ;first_free_buffer_index   Allocated with name '_handlePlus_first_free_buffer_index_1_1'
                           1156 ;------------------------------------------------------------
                           1157 ;	main.c:102: void handlePlus(void){
                           1158 ;	-----------------------------------------
                           1159 ;	 function handlePlus
                           1160 ;	-----------------------------------------
   02AB                    1161 _handlePlus:
                           1162 ;	main.c:104: int buffer_size = -1;
                           1163 ;	genAssign
   02AB 90s0ArF2           1164 	mov	dptr,#_handlePlus_buffer_size_1_1
   02AE 74 FF              1165 	mov	a,#0xFF
   02B0 F0                 1166 	movx	@dptr,a
   02B1 A3                 1167 	inc	dptr
                           1168 ;	Peephole 101	removed redundant mov
   02B2 F0                 1169 	movx	@dptr,a
                           1170 ;	main.c:107: while (buffer_size == -1 || buffer_size > NEW_BUF_MAX_VALUE || buffer_size < NEW_BUF_MIN_VALUE ){
   02B3                    1171 00108$:
                           1172 ;	genAssign
   02B3 90s0ArF2           1173 	mov	dptr,#_handlePlus_buffer_size_1_1
   02B6 E0                 1174 	movx	a,@dptr
   02B7 FA                 1175 	mov	r2,a
   02B8 A3                 1176 	inc	dptr
   02B9 E0                 1177 	movx	a,@dptr
   02BA FB                 1178 	mov	r3,a
                           1179 ;	genCmpEq
                           1180 ;	gencjneshort
   02BB BA FF 05           1181 	cjne	r2,#0xFF,00130$
   02BE BB FF 02           1182 	cjne	r3,#0xFF,00130$
                           1183 ;	Peephole 112.b	changed ljmp to sjmp
   02C1 80 1C              1184 	sjmp	00109$
   02C3                    1185 00130$:
                           1186 ;	genCmpGt
                           1187 ;	genCmp
   02C3 C3                 1188 	clr	c
   02C4 74 90              1189 	mov	a,#0x90
   02C6 9A                 1190 	subb	a,r2
                           1191 ;	Peephole 159	avoided xrl during execution
   02C7 74 81              1192 	mov	a,#(0x01 ^ 0x80)
   02C9 8B F0              1193 	mov	b,r3
   02CB 63 F0 80           1194 	xrl	b,#0x80
   02CE 95 F0              1195 	subb	a,b
                           1196 ;	genIfxJump
                           1197 ;	Peephole 112.b	changed ljmp to sjmp
                           1198 ;	Peephole 160.a	removed sjmp by inverse jump logic
                           1199 ;	genCmpLt
                           1200 ;	genCmp
   02D0 40 0D              1201 	jc	00109$
                           1202 ;	Peephole 300	removed redundant label 00131$
                           1203 ;	Peephole 256.a	removed redundant clr c
   02D2 EA                 1204 	mov	a,r2
   02D3 94 14              1205 	subb	a,#0x14
   02D5 EB                 1206 	mov	a,r3
   02D6 64 80              1207 	xrl	a,#0x80
   02D8 94 80              1208 	subb	a,#0x80
                           1209 ;	genIfxJump
   02DA 40 03              1210 	jc	00132$
   02DC 02s03r71           1211 	ljmp	00127$
   02DF                    1212 00132$:
   02DF                    1213 00109$:
                           1214 ;	main.c:108: printf ("\r\nEnter a size for the new buffer between %d and %d: ", NEW_BUF_MIN_VALUE, NEW_BUF_MAX_VALUE);
                           1215 ;	genIpush
   02DF 74 90              1216 	mov	a,#0x90
   02E1 C0 E0              1217 	push	acc
   02E3 74 01              1218 	mov	a,#0x01
   02E5 C0 E0              1219 	push	acc
                           1220 ;	genIpush
   02E7 74 14              1221 	mov	a,#0x14
   02E9 C0 E0              1222 	push	acc
                           1223 ;	Peephole 181	changed mov to clr
   02EB E4                 1224 	clr	a
   02EC C0 E0              1225 	push	acc
                           1226 ;	genIpush
   02EE 74r44              1227 	mov	a,#__str_6
   02F0 C0 E0              1228 	push	acc
   02F2 74s01              1229 	mov	a,#(__str_6 >> 8)
   02F4 C0 E0              1230 	push	acc
   02F6 74 80              1231 	mov	a,#0x80
   02F8 C0 E0              1232 	push	acc
                           1233 ;	genCall
   02FA 12s00r00           1234 	lcall	_printf
   02FD E5 81              1235 	mov	a,sp
   02FF 24 F9              1236 	add	a,#0xf9
   0301 F5 81              1237 	mov	sp,a
                           1238 ;	main.c:109: buffer_size = Serial_GetInteger(BUF1_MAX_STR_LENGTH);
                           1239 ;	genCall
                           1240 ;	Peephole 182.b	used 16 bit load of dptr
   0303 90 00 0A           1241 	mov	dptr,#0x000A
   0306 12s00r00           1242 	lcall	_Serial_GetInteger
   0309 AA 82              1243 	mov	r2,dpl
   030B AB 83              1244 	mov	r3,dph
                           1245 ;	genAssign
   030D 90s0ArF2           1246 	mov	dptr,#_handlePlus_buffer_size_1_1
   0310 EA                 1247 	mov	a,r2
   0311 F0                 1248 	movx	@dptr,a
   0312 A3                 1249 	inc	dptr
   0313 EB                 1250 	mov	a,r3
   0314 F0                 1251 	movx	@dptr,a
                           1252 ;	main.c:110: if (buffer_size < NEW_BUF_MIN_VALUE){
                           1253 ;	genCmpLt
                           1254 ;	genCmp
   0315 C3                 1255 	clr	c
   0316 EA                 1256 	mov	a,r2
   0317 94 14              1257 	subb	a,#0x14
   0319 EB                 1258 	mov	a,r3
   031A 64 80              1259 	xrl	a,#0x80
   031C 94 80              1260 	subb	a,#0x80
                           1261 ;	genIfxJump
                           1262 ;	Peephole 108.a	removed ljmp by inverse jump logic
   031E 50 1F              1263 	jnc	00104$
                           1264 ;	Peephole 300	removed redundant label 00133$
                           1265 ;	main.c:111: printf("\r\nError. Value must be greater than %d\r\n", NEW_BUF_MIN_VALUE);
                           1266 ;	genIpush
   0320 74 14              1267 	mov	a,#0x14
   0322 C0 E0              1268 	push	acc
                           1269 ;	Peephole 181	changed mov to clr
   0324 E4                 1270 	clr	a
   0325 C0 E0              1271 	push	acc
                           1272 ;	genIpush
   0327 74r4C              1273 	mov	a,#__str_1
   0329 C0 E0              1274 	push	acc
   032B 74s00              1275 	mov	a,#(__str_1 >> 8)
   032D C0 E0              1276 	push	acc
   032F 74 80              1277 	mov	a,#0x80
   0331 C0 E0              1278 	push	acc
                           1279 ;	genCall
   0333 12s00r00           1280 	lcall	_printf
   0336 E5 81              1281 	mov	a,sp
   0338 24 FB              1282 	add	a,#0xfb
   033A F5 81              1283 	mov	sp,a
   033C 02s02rB3           1284 	ljmp	00108$
   033F                    1285 00104$:
                           1286 ;	main.c:113: else if(buffer_size > NEW_BUF_MAX_VALUE){
                           1287 ;	genCmpGt
                           1288 ;	genCmp
   033F C3                 1289 	clr	c
   0340 74 90              1290 	mov	a,#0x90
   0342 9A                 1291 	subb	a,r2
                           1292 ;	Peephole 159	avoided xrl during execution
   0343 74 81              1293 	mov	a,#(0x01 ^ 0x80)
   0345 8B F0              1294 	mov	b,r3
   0347 63 F0 80           1295 	xrl	b,#0x80
   034A 95 F0              1296 	subb	a,b
                           1297 ;	genIfxJump
   034C 40 03              1298 	jc	00134$
   034E 02s02rB3           1299 	ljmp	00108$
   0351                    1300 00134$:
                           1301 ;	main.c:114: printf("\r\nError. Value must be less than %d\r\n", NEW_BUF_MAX_VALUE);
                           1302 ;	genIpush
   0351 74 90              1303 	mov	a,#0x90
   0353 C0 E0              1304 	push	acc
   0355 74 01              1305 	mov	a,#0x01
   0357 C0 E0              1306 	push	acc
                           1307 ;	genIpush
   0359 74r75              1308 	mov	a,#__str_2
   035B C0 E0              1309 	push	acc
   035D 74s00              1310 	mov	a,#(__str_2 >> 8)
   035F C0 E0              1311 	push	acc
   0361 74 80              1312 	mov	a,#0x80
   0363 C0 E0              1313 	push	acc
                           1314 ;	genCall
   0365 12s00r00           1315 	lcall	_printf
   0368 E5 81              1316 	mov	a,sp
   036A 24 FB              1317 	add	a,#0xfb
   036C F5 81              1318 	mov	sp,a
   036E 02s02rB3           1319 	ljmp	00108$
                           1320 ;	main.c:119: while(Buffers[first_free_buffer_index].in_use){
   0371                    1321 00127$:
                           1322 ;	genAssign
   0371 7A 01              1323 	mov	r2,#0x01
   0373 7B 00              1324 	mov	r3,#0x00
   0375                    1325 00113$:
                           1326 ;	genAssign
   0375 90s00r00           1327 	mov	dptr,#__mulint_PARM_2
   0378 74 0C              1328 	mov	a,#0x0C
   037A F0                 1329 	movx	@dptr,a
   037B E4                 1330 	clr	a
   037C A3                 1331 	inc	dptr
   037D F0                 1332 	movx	@dptr,a
                           1333 ;	genCall
   037E 8A 82              1334 	mov	dpl,r2
   0380 8B 83              1335 	mov	dph,r3
   0382 C0 02              1336 	push	ar2
   0384 C0 03              1337 	push	ar3
   0386 12s00r00           1338 	lcall	__mulint
   0389 AC 82              1339 	mov	r4,dpl
   038B AD 83              1340 	mov	r5,dph
   038D D0 03              1341 	pop	ar3
   038F D0 02              1342 	pop	ar2
                           1343 ;	genPlus
                           1344 ;	Peephole 236.g	used r4 instead of ar4
   0391 EC                 1345 	mov	a,r4
   0392 24r40              1346 	add	a,#_Buffers
   0394 FC                 1347 	mov	r4,a
                           1348 ;	Peephole 236.g	used r5 instead of ar5
   0395 ED                 1349 	mov	a,r5
   0396 34s06              1350 	addc	a,#(_Buffers >> 8)
   0398 FD                 1351 	mov	r5,a
                           1352 ;	genPlus
                           1353 ;     genPlusIncr
   0399 74 0A              1354 	mov	a,#0x0A
                           1355 ;	Peephole 236.a	used r4 instead of ar4
   039B 2C                 1356 	add	a,r4
   039C F5 82              1357 	mov	dpl,a
                           1358 ;	Peephole 181	changed mov to clr
   039E E4                 1359 	clr	a
                           1360 ;	Peephole 236.b	used r5 instead of ar5
   039F 3D                 1361 	addc	a,r5
   03A0 F5 83              1362 	mov	dph,a
                           1363 ;	genPointerGet
                           1364 ;	genFarPointerGet
   03A2 E0                 1365 	movx	a,@dptr
   03A3 FE                 1366 	mov	r6,a
   03A4 A3                 1367 	inc	dptr
   03A5 E0                 1368 	movx	a,@dptr
                           1369 ;	genIfx
   03A6 FF                 1370 	mov	r7,a
                           1371 ;	Peephole 135	removed redundant mov
   03A7 4E                 1372 	orl	a,r6
                           1373 ;	genIfxJump
                           1374 ;	Peephole 108.c	removed ljmp by inverse jump logic
   03A8 60 2A              1375 	jz	00115$
                           1376 ;	Peephole 300	removed redundant label 00135$
                           1377 ;	main.c:120: first_free_buffer_index++;
                           1378 ;	genPlus
                           1379 ;     genPlusIncr
   03AA 0A                 1380 	inc	r2
   03AB BA 00 01           1381 	cjne	r2,#0x00,00136$
   03AE 0B                 1382 	inc	r3
   03AF                    1383 00136$:
                           1384 ;	main.c:121: if (first_free_buffer_index > MAX_NUM_BUFFERS) {
                           1385 ;	genCmpGt
                           1386 ;	genCmp
   03AF C3                 1387 	clr	c
   03B0 74 64              1388 	mov	a,#0x64
   03B2 9A                 1389 	subb	a,r2
                           1390 ;	Peephole 159	avoided xrl during execution
   03B3 74 80              1391 	mov	a,#(0x00 ^ 0x80)
   03B5 8B F0              1392 	mov	b,r3
   03B7 63 F0 80           1393 	xrl	b,#0x80
   03BA 95 F0              1394 	subb	a,b
                           1395 ;	genIfxJump
                           1396 ;	Peephole 108.a	removed ljmp by inverse jump logic
   03BC 50 B7              1397 	jnc	00113$
                           1398 ;	Peephole 300	removed redundant label 00137$
                           1399 ;	main.c:122: printf ("\r\nOut of possible buffers. Allocation failed");
                           1400 ;	genIpush
   03BE 74r7A              1401 	mov	a,#__str_7
   03C0 C0 E0              1402 	push	acc
   03C2 74s01              1403 	mov	a,#(__str_7 >> 8)
   03C4 C0 E0              1404 	push	acc
   03C6 74 80              1405 	mov	a,#0x80
   03C8 C0 E0              1406 	push	acc
                           1407 ;	genCall
   03CA 12s00r00           1408 	lcall	_printf
   03CD 15 81              1409 	dec	sp
   03CF 15 81              1410 	dec	sp
   03D1 15 81              1411 	dec	sp
                           1412 ;	main.c:123: return;
                           1413 ;	genRet
                           1414 ;	Peephole 251.a	replaced ljmp to ret with ret
   03D3 22                 1415 	ret
   03D4                    1416 00115$:
                           1417 ;	main.c:126: alloc_success = Buffer_Init(&Buffers[first_free_buffer_index], buffer_size, first_free_buffer_index);
                           1418 ;	genAssign
                           1419 ;	genCast
   03D4 7E 00              1420 	mov	r6,#0x0
                           1421 ;	genAssign
   03D6 90s0ArF2           1422 	mov	dptr,#_handlePlus_buffer_size_1_1
   03D9 E0                 1423 	movx	a,@dptr
   03DA FF                 1424 	mov	r7,a
   03DB A3                 1425 	inc	dptr
   03DC E0                 1426 	movx	a,@dptr
   03DD F8                 1427 	mov	r0,a
                           1428 ;	genAssign
   03DE 90s00r00           1429 	mov	dptr,#_Buffer_Init_PARM_2
   03E1 EF                 1430 	mov	a,r7
   03E2 F0                 1431 	movx	@dptr,a
   03E3 A3                 1432 	inc	dptr
   03E4 E8                 1433 	mov	a,r0
   03E5 F0                 1434 	movx	@dptr,a
                           1435 ;	genAssign
   03E6 90s00r00           1436 	mov	dptr,#_Buffer_Init_PARM_3
   03E9 EA                 1437 	mov	a,r2
   03EA F0                 1438 	movx	@dptr,a
   03EB A3                 1439 	inc	dptr
   03EC EB                 1440 	mov	a,r3
   03ED F0                 1441 	movx	@dptr,a
                           1442 ;	genCall
   03EE 8C 82              1443 	mov	dpl,r4
   03F0 8D 83              1444 	mov	dph,r5
   03F2 8E F0              1445 	mov	b,r6
   03F4 C0 07              1446 	push	ar7
   03F6 C0 00              1447 	push	ar0
   03F8 12s00r00           1448 	lcall	_Buffer_Init
   03FB D0 00              1449 	pop	ar0
   03FD D0 07              1450 	pop	ar7
   03FF 92*03              1451 	mov	_handlePlus_alloc_success_1_1,c
                           1452 ;	main.c:127: Num_Buffers++;
                           1453 ;	genAssign
   0401 90s00r02           1454 	mov	dptr,#_Num_Buffers
   0404 E0                 1455 	movx	a,@dptr
   0405 FA                 1456 	mov	r2,a
   0406 A3                 1457 	inc	dptr
   0407 E0                 1458 	movx	a,@dptr
   0408 FB                 1459 	mov	r3,a
                           1460 ;	genPlus
   0409 90s00r02           1461 	mov	dptr,#_Num_Buffers
                           1462 ;     genPlusIncr
   040C 74 01              1463 	mov	a,#0x01
                           1464 ;	Peephole 236.a	used r2 instead of ar2
   040E 2A                 1465 	add	a,r2
   040F F0                 1466 	movx	@dptr,a
                           1467 ;	Peephole 181	changed mov to clr
   0410 E4                 1468 	clr	a
                           1469 ;	Peephole 236.b	used r3 instead of ar3
   0411 3B                 1470 	addc	a,r3
   0412 A3                 1471 	inc	dptr
   0413 F0                 1472 	movx	@dptr,a
                           1473 ;	main.c:129: if (alloc_success)
                           1474 ;	genIfx
                           1475 ;	genIfxJump
                           1476 ;	Peephole 108.d	removed ljmp by inverse jump logic
   0414 30*03 3F           1477 	jnb	_handlePlus_alloc_success_1_1,00117$
                           1478 ;	Peephole 300	removed redundant label 00138$
                           1479 ;	main.c:130: printf ("\r\nBuffer of size: %d allocated at address: %p \r\n", buffer_size, Buffers[Num_Buffers-1].buf_start);
                           1480 ;	genAssign
   0417 90s00r02           1481 	mov	dptr,#_Num_Buffers
   041A E0                 1482 	movx	a,@dptr
   041B FA                 1483 	mov	r2,a
   041C A3                 1484 	inc	dptr
   041D E0                 1485 	movx	a,@dptr
   041E FB                 1486 	mov	r3,a
                           1487 ;	genCast
                           1488 ;	genMinus
                           1489 ;	genMinusDec
   041F EA                 1490 	mov	a,r2
   0420 14                 1491 	dec	a
                           1492 ;	genMult
                           1493 ;	genMultOneByte
   0421 75 F0 0C           1494 	mov	b,#0x0C
   0424 A4                 1495 	mul	ab
                           1496 ;	genPlus
   0425 24r40              1497 	add	a,#_Buffers
   0427 F5 82              1498 	mov	dpl,a
   0429 74s06              1499 	mov	a,#(_Buffers >> 8)
   042B 35 F0              1500 	addc	a,b
   042D F5 83              1501 	mov	dph,a
                           1502 ;	genPointerGet
                           1503 ;	genFarPointerGet
   042F E0                 1504 	movx	a,@dptr
   0430 FA                 1505 	mov	r2,a
   0431 A3                 1506 	inc	dptr
   0432 E0                 1507 	movx	a,@dptr
   0433 FB                 1508 	mov	r3,a
                           1509 ;	genCast
   0434 7C 00              1510 	mov	r4,#0x0
                           1511 ;	genIpush
   0436 C0 02              1512 	push	ar2
   0438 C0 03              1513 	push	ar3
   043A C0 04              1514 	push	ar4
                           1515 ;	genIpush
   043C C0 07              1516 	push	ar7
   043E C0 00              1517 	push	ar0
                           1518 ;	genIpush
   0440 74rA7              1519 	mov	a,#__str_8
   0442 C0 E0              1520 	push	acc
   0444 74s01              1521 	mov	a,#(__str_8 >> 8)
   0446 C0 E0              1522 	push	acc
   0448 74 80              1523 	mov	a,#0x80
   044A C0 E0              1524 	push	acc
                           1525 ;	genCall
   044C 12s00r00           1526 	lcall	_printf
   044F E5 81              1527 	mov	a,sp
   0451 24 F8              1528 	add	a,#0xf8
   0453 F5 81              1529 	mov	sp,a
                           1530 ;	Peephole 112.b	changed ljmp to sjmp
                           1531 ;	Peephole 251.b	replaced sjmp to ret with ret
   0455 22                 1532 	ret
   0456                    1533 00117$:
                           1534 ;	main.c:132: printf("\r\nMalloc failed for buffer size %d\r\n", buffer_size);
                           1535 ;	genIpush
   0456 C0 07              1536 	push	ar7
   0458 C0 00              1537 	push	ar0
                           1538 ;	genIpush
   045A 74rD8              1539 	mov	a,#__str_9
   045C C0 E0              1540 	push	acc
   045E 74s01              1541 	mov	a,#(__str_9 >> 8)
   0460 C0 E0              1542 	push	acc
   0462 74 80              1543 	mov	a,#0x80
   0464 C0 E0              1544 	push	acc
                           1545 ;	genCall
   0466 12s00r00           1546 	lcall	_printf
   0469 E5 81              1547 	mov	a,sp
   046B 24 FB              1548 	add	a,#0xfb
   046D F5 81              1549 	mov	sp,a
                           1550 ;	main.c:134: Num_Buffers--;
                           1551 ;	genAssign
   046F 90s00r02           1552 	mov	dptr,#_Num_Buffers
   0472 E0                 1553 	movx	a,@dptr
   0473 FA                 1554 	mov	r2,a
   0474 A3                 1555 	inc	dptr
   0475 E0                 1556 	movx	a,@dptr
   0476 FB                 1557 	mov	r3,a
                           1558 ;	genMinus
                           1559 ;	genMinusDec
   0477 1A                 1560 	dec	r2
   0478 BA FF 01           1561 	cjne	r2,#0xff,00139$
   047B 1B                 1562 	dec	r3
   047C                    1563 00139$:
                           1564 ;	genAssign
   047C 90s00r02           1565 	mov	dptr,#_Num_Buffers
   047F EA                 1566 	mov	a,r2
   0480 F0                 1567 	movx	@dptr,a
   0481 A3                 1568 	inc	dptr
   0482 EB                 1569 	mov	a,r3
   0483 F0                 1570 	movx	@dptr,a
                           1571 ;	main.c:135: Buffer_Free(&Buffers[Num_Buffers]);
                           1572 ;	genAssign
   0484 90s00r02           1573 	mov	dptr,#_Num_Buffers
   0487 E0                 1574 	movx	a,@dptr
   0488 FA                 1575 	mov	r2,a
   0489 A3                 1576 	inc	dptr
   048A E0                 1577 	movx	a,@dptr
   048B FB                 1578 	mov	r3,a
                           1579 ;	genAssign
   048C 90s00r00           1580 	mov	dptr,#__mulint_PARM_2
   048F 74 0C              1581 	mov	a,#0x0C
   0491 F0                 1582 	movx	@dptr,a
   0492 E4                 1583 	clr	a
   0493 A3                 1584 	inc	dptr
   0494 F0                 1585 	movx	@dptr,a
                           1586 ;	genCall
   0495 8A 82              1587 	mov	dpl,r2
   0497 8B 83              1588 	mov	dph,r3
   0499 12s00r00           1589 	lcall	__mulint
   049C AA 82              1590 	mov	r2,dpl
   049E AB 83              1591 	mov	r3,dph
                           1592 ;	genPlus
                           1593 ;	Peephole 236.g	used r2 instead of ar2
   04A0 EA                 1594 	mov	a,r2
   04A1 24r40              1595 	add	a,#_Buffers
   04A3 FA                 1596 	mov	r2,a
                           1597 ;	Peephole 236.g	used r3 instead of ar3
   04A4 EB                 1598 	mov	a,r3
   04A5 34s06              1599 	addc	a,#(_Buffers >> 8)
   04A7 FB                 1600 	mov	r3,a
                           1601 ;	genCast
   04A8 7C 00              1602 	mov	r4,#0x0
                           1603 ;	genCall
   04AA 8A 82              1604 	mov	dpl,r2
   04AC 8B 83              1605 	mov	dph,r3
   04AE 8C F0              1606 	mov	b,r4
                           1607 ;	main.c:136: buffer_size = -1;    //Reset so it will ask again
                           1608 ;	Peephole 253.b	replaced lcall/ret with ljmp
   04B0 02s00r00           1609 	ljmp	_Buffer_Free
                           1610 ;
                           1611 ;------------------------------------------------------------
                           1612 ;Allocation info for local variables in function 'handleMinus'
                           1613 ;------------------------------------------------------------
                           1614 ;buffer_number             Allocated with name '_handleMinus_buffer_number_1_1'
                           1615 ;------------------------------------------------------------
                           1616 ;	main.c:143: void handleMinus(void){
                           1617 ;	-----------------------------------------
                           1618 ;	 function handleMinus
                           1619 ;	-----------------------------------------
   04B3                    1620 _handleMinus:
                           1621 ;	main.c:145: printf("\r\nEnter id of buffer you want to free: ");
                           1622 ;	genIpush
   04B3 74rFD              1623 	mov	a,#__str_10
   04B5 C0 E0              1624 	push	acc
   04B7 74s01              1625 	mov	a,#(__str_10 >> 8)
   04B9 C0 E0              1626 	push	acc
   04BB 74 80              1627 	mov	a,#0x80
   04BD C0 E0              1628 	push	acc
                           1629 ;	genCall
   04BF 12s00r00           1630 	lcall	_printf
   04C2 15 81              1631 	dec	sp
   04C4 15 81              1632 	dec	sp
   04C6 15 81              1633 	dec	sp
                           1634 ;	main.c:146: buffer_number = Serial_GetInteger(BUF1_MAX_STR_LENGTH);    //Get a three digit integer
                           1635 ;	genCall
                           1636 ;	Peephole 182.b	used 16 bit load of dptr
   04C8 90 00 0A           1637 	mov	dptr,#0x000A
   04CB 12s00r00           1638 	lcall	_Serial_GetInteger
   04CE E5 82              1639 	mov	a,dpl
   04D0 85 83 F0           1640 	mov	b,dph
                           1641 ;	genAssign
   04D3 90s0ArF4           1642 	mov	dptr,#_handleMinus_buffer_number_1_1
   04D6 F0                 1643 	movx	@dptr,a
   04D7 A3                 1644 	inc	dptr
   04D8 E5 F0              1645 	mov	a,b
   04DA F0                 1646 	movx	@dptr,a
                           1647 ;	main.c:147: while (buffer_number <= 1 ){
   04DB                    1648 00103$:
                           1649 ;	genAssign
   04DB 90s0ArF4           1650 	mov	dptr,#_handleMinus_buffer_number_1_1
   04DE E0                 1651 	movx	a,@dptr
   04DF FA                 1652 	mov	r2,a
   04E0 A3                 1653 	inc	dptr
   04E1 E0                 1654 	movx	a,@dptr
   04E2 FB                 1655 	mov	r3,a
                           1656 ;	genCmpGt
                           1657 ;	genCmp
   04E3 C3                 1658 	clr	c
   04E4 74 01              1659 	mov	a,#0x01
   04E6 9A                 1660 	subb	a,r2
                           1661 ;	Peephole 159	avoided xrl during execution
   04E7 74 80              1662 	mov	a,#(0x00 ^ 0x80)
   04E9 8B F0              1663 	mov	b,r3
   04EB 63 F0 80           1664 	xrl	b,#0x80
   04EE 95 F0              1665 	subb	a,b
                           1666 ;	genIfxJump
                           1667 ;	Peephole 112.b	changed ljmp to sjmp
                           1668 ;	Peephole 160.a	removed sjmp by inverse jump logic
   04F0 40 46              1669 	jc	00105$
                           1670 ;	Peephole 300	removed redundant label 00115$
                           1671 ;	main.c:148: if (buffer_number == -2){
                           1672 ;	genCmpEq
                           1673 ;	gencjneshort
                           1674 ;	Peephole 112.b	changed ljmp to sjmp
                           1675 ;	Peephole 198.a	optimized misc jump sequence
   04F2 BA FE 19           1676 	cjne	r2,#0xFE,00102$
   04F5 BB FF 16           1677 	cjne	r3,#0xFF,00102$
                           1678 ;	Peephole 200.b	removed redundant sjmp
                           1679 ;	Peephole 300	removed redundant label 00116$
                           1680 ;	Peephole 300	removed redundant label 00117$
                           1681 ;	main.c:149: printf("\r\nCancelling");
                           1682 ;	genIpush
   04F8 74r25              1683 	mov	a,#__str_11
   04FA C0 E0              1684 	push	acc
   04FC 74s02              1685 	mov	a,#(__str_11 >> 8)
   04FE C0 E0              1686 	push	acc
   0500 74 80              1687 	mov	a,#0x80
   0502 C0 E0              1688 	push	acc
                           1689 ;	genCall
   0504 12s00r00           1690 	lcall	_printf
   0507 15 81              1691 	dec	sp
   0509 15 81              1692 	dec	sp
   050B 15 81              1693 	dec	sp
                           1694 ;	main.c:150: return;
                           1695 ;	genRet
                           1696 ;	Peephole 251.a	replaced ljmp to ret with ret
   050D 22                 1697 	ret
   050E                    1698 00102$:
                           1699 ;	main.c:152: printf("\r\nCan't free buffers 0 or 1. Enter another buffer id: ");
                           1700 ;	genIpush
   050E 74r32              1701 	mov	a,#__str_12
   0510 C0 E0              1702 	push	acc
   0512 74s02              1703 	mov	a,#(__str_12 >> 8)
   0514 C0 E0              1704 	push	acc
   0516 74 80              1705 	mov	a,#0x80
   0518 C0 E0              1706 	push	acc
                           1707 ;	genCall
   051A 12s00r00           1708 	lcall	_printf
   051D 15 81              1709 	dec	sp
   051F 15 81              1710 	dec	sp
   0521 15 81              1711 	dec	sp
                           1712 ;	main.c:153: buffer_number = Serial_GetInteger(BUF1_MAX_STR_LENGTH);
                           1713 ;	genCall
                           1714 ;	Peephole 182.b	used 16 bit load of dptr
   0523 90 00 0A           1715 	mov	dptr,#0x000A
   0526 12s00r00           1716 	lcall	_Serial_GetInteger
   0529 E5 82              1717 	mov	a,dpl
   052B 85 83 F0           1718 	mov	b,dph
                           1719 ;	genAssign
   052E 90s0ArF4           1720 	mov	dptr,#_handleMinus_buffer_number_1_1
   0531 F0                 1721 	movx	@dptr,a
   0532 A3                 1722 	inc	dptr
   0533 E5 F0              1723 	mov	a,b
   0535 F0                 1724 	movx	@dptr,a
                           1725 ;	Peephole 112.b	changed ljmp to sjmp
   0536 80 A3              1726 	sjmp	00103$
   0538                    1727 00105$:
                           1728 ;	main.c:155: if( Buffers[buffer_number].in_use){
                           1729 ;	genAssign
   0538 90s00r00           1730 	mov	dptr,#__mulint_PARM_2
   053B 74 0C              1731 	mov	a,#0x0C
   053D F0                 1732 	movx	@dptr,a
   053E E4                 1733 	clr	a
   053F A3                 1734 	inc	dptr
   0540 F0                 1735 	movx	@dptr,a
                           1736 ;	genCall
   0541 8A 82              1737 	mov	dpl,r2
   0543 8B 83              1738 	mov	dph,r3
   0545 C0 02              1739 	push	ar2
   0547 C0 03              1740 	push	ar3
   0549 12s00r00           1741 	lcall	__mulint
   054C AC 82              1742 	mov	r4,dpl
   054E AD 83              1743 	mov	r5,dph
   0550 D0 03              1744 	pop	ar3
   0552 D0 02              1745 	pop	ar2
                           1746 ;	genPlus
                           1747 ;	Peephole 236.g	used r4 instead of ar4
   0554 EC                 1748 	mov	a,r4
   0555 24r40              1749 	add	a,#_Buffers
   0557 FE                 1750 	mov	r6,a
                           1751 ;	Peephole 236.g	used r5 instead of ar5
   0558 ED                 1752 	mov	a,r5
   0559 34s06              1753 	addc	a,#(_Buffers >> 8)
   055B FF                 1754 	mov	r7,a
                           1755 ;	genPlus
                           1756 ;     genPlusIncr
   055C 74 0A              1757 	mov	a,#0x0A
                           1758 ;	Peephole 236.a	used r6 instead of ar6
   055E 2E                 1759 	add	a,r6
   055F F5 82              1760 	mov	dpl,a
                           1761 ;	Peephole 181	changed mov to clr
   0561 E4                 1762 	clr	a
                           1763 ;	Peephole 236.b	used r7 instead of ar7
   0562 3F                 1764 	addc	a,r7
   0563 F5 83              1765 	mov	dph,a
                           1766 ;	genPointerGet
                           1767 ;	genFarPointerGet
   0565 E0                 1768 	movx	a,@dptr
   0566 FE                 1769 	mov	r6,a
   0567 A3                 1770 	inc	dptr
   0568 E0                 1771 	movx	a,@dptr
                           1772 ;	genIfx
   0569 FF                 1773 	mov	r7,a
                           1774 ;	Peephole 135	removed redundant mov
   056A 4E                 1775 	orl	a,r6
                           1776 ;	genIfxJump
                           1777 ;	Peephole 108.c	removed ljmp by inverse jump logic
   056B 60 4A              1778 	jz	00107$
                           1779 ;	Peephole 300	removed redundant label 00118$
                           1780 ;	main.c:156: printf ("\r\nFreeing Buffer %d", buffer_number);
                           1781 ;	genIpush
   056D C0 04              1782 	push	ar4
   056F C0 05              1783 	push	ar5
   0571 C0 02              1784 	push	ar2
   0573 C0 03              1785 	push	ar3
                           1786 ;	genIpush
   0575 74r69              1787 	mov	a,#__str_13
   0577 C0 E0              1788 	push	acc
   0579 74s02              1789 	mov	a,#(__str_13 >> 8)
   057B C0 E0              1790 	push	acc
   057D 74 80              1791 	mov	a,#0x80
   057F C0 E0              1792 	push	acc
                           1793 ;	genCall
   0581 12s00r00           1794 	lcall	_printf
   0584 E5 81              1795 	mov	a,sp
   0586 24 FB              1796 	add	a,#0xfb
   0588 F5 81              1797 	mov	sp,a
   058A D0 05              1798 	pop	ar5
   058C D0 04              1799 	pop	ar4
                           1800 ;	main.c:157: Buffer_Free(&Buffers[buffer_number]);
                           1801 ;	genPlus
                           1802 ;	Peephole 236.g	used r4 instead of ar4
   058E EC                 1803 	mov	a,r4
   058F 24r40              1804 	add	a,#_Buffers
   0591 FC                 1805 	mov	r4,a
                           1806 ;	Peephole 236.g	used r5 instead of ar5
   0592 ED                 1807 	mov	a,r5
   0593 34s06              1808 	addc	a,#(_Buffers >> 8)
   0595 FD                 1809 	mov	r5,a
                           1810 ;	genCast
   0596 7E 00              1811 	mov	r6,#0x0
                           1812 ;	genCall
   0598 8C 82              1813 	mov	dpl,r4
   059A 8D 83              1814 	mov	dph,r5
   059C 8E F0              1815 	mov	b,r6
   059E 12s00r00           1816 	lcall	_Buffer_Free
                           1817 ;	main.c:158: Num_Buffers--;
                           1818 ;	genAssign
   05A1 90s00r02           1819 	mov	dptr,#_Num_Buffers
   05A4 E0                 1820 	movx	a,@dptr
   05A5 FC                 1821 	mov	r4,a
   05A6 A3                 1822 	inc	dptr
   05A7 E0                 1823 	movx	a,@dptr
   05A8 FD                 1824 	mov	r5,a
                           1825 ;	genMinus
                           1826 ;	genMinusDec
   05A9 1C                 1827 	dec	r4
   05AA BC FF 01           1828 	cjne	r4,#0xff,00119$
   05AD 1D                 1829 	dec	r5
   05AE                    1830 00119$:
                           1831 ;	genAssign
   05AE 90s00r02           1832 	mov	dptr,#_Num_Buffers
   05B1 EC                 1833 	mov	a,r4
   05B2 F0                 1834 	movx	@dptr,a
   05B3 A3                 1835 	inc	dptr
   05B4 ED                 1836 	mov	a,r5
   05B5 F0                 1837 	movx	@dptr,a
                           1838 ;	Peephole 112.b	changed ljmp to sjmp
                           1839 ;	Peephole 251.b	replaced sjmp to ret with ret
   05B6 22                 1840 	ret
   05B7                    1841 00107$:
                           1842 ;	main.c:161: printf ("\r\nInvalid buffer id %d.", buffer_number);
                           1843 ;	genIpush
   05B7 C0 02              1844 	push	ar2
   05B9 C0 03              1845 	push	ar3
                           1846 ;	genIpush
   05BB 74r7D              1847 	mov	a,#__str_14
   05BD C0 E0              1848 	push	acc
   05BF 74s02              1849 	mov	a,#(__str_14 >> 8)
   05C1 C0 E0              1850 	push	acc
   05C3 74 80              1851 	mov	a,#0x80
   05C5 C0 E0              1852 	push	acc
                           1853 ;	genCall
   05C7 12s00r00           1854 	lcall	_printf
   05CA E5 81              1855 	mov	a,sp
   05CC 24 FB              1856 	add	a,#0xfb
   05CE F5 81              1857 	mov	sp,a
                           1858 ;	Peephole 300	removed redundant label 00109$
   05D0 22                 1859 	ret
                           1860 ;------------------------------------------------------------
                           1861 ;Allocation info for local variables in function 'handleInput'
                           1862 ;------------------------------------------------------------
                           1863 ;c                         Allocated with name '_handleInput_c_1_1'
                           1864 ;i                         Allocated with name '_handleInput_i_1_1'
                           1865 ;------------------------------------------------------------
                           1866 ;	main.c:165: void handleInput(char c){
                           1867 ;	-----------------------------------------
                           1868 ;	 function handleInput
                           1869 ;	-----------------------------------------
   05D1                    1870 _handleInput:
                           1871 ;	genReceive
   05D1 E5 82              1872 	mov	a,dpl
   05D3 90s0ArF6           1873 	mov	dptr,#_handleInput_c_1_1
   05D6 F0                 1874 	movx	@dptr,a
                           1875 ;	main.c:167: if (isdigit(c) || isalpha(c)){
                           1876 ;	genAssign
   05D7 90s0ArF6           1877 	mov	dptr,#_handleInput_c_1_1
   05DA E0                 1878 	movx	a,@dptr
                           1879 ;	genCall
   05DB FA                 1880 	mov	r2,a
                           1881 ;	Peephole 244.c	loading dpl from a instead of r2
   05DC F5 82              1882 	mov	dpl,a
   05DE C0 02              1883 	push	ar2
   05E0 12s00r00           1884 	lcall	_isdigit
   05E3 E5 82              1885 	mov	a,dpl
   05E5 D0 02              1886 	pop	ar2
                           1887 ;	genIfx
                           1888 ;	genIfxJump
                           1889 ;	Peephole 108.b	removed ljmp by inverse jump logic
   05E7 70 1A              1890 	jnz	00125$
                           1891 ;	Peephole 300	removed redundant label 00150$
                           1892 ;	genCall
   05E9 8A 82              1893 	mov	dpl,r2
   05EB C0 02              1894 	push	ar2
   05ED 12s00r00           1895 	lcall	_isupper
   05F0 E5 82              1896 	mov	a,dpl
   05F2 D0 02              1897 	pop	ar2
                           1898 ;	genIfx
                           1899 ;	genIfxJump
                           1900 ;	Peephole 108.b	removed ljmp by inverse jump logic
   05F4 70 0D              1901 	jnz	00125$
                           1902 ;	Peephole 300	removed redundant label 00151$
                           1903 ;	genCall
   05F6 8A 82              1904 	mov	dpl,r2
   05F8 C0 02              1905 	push	ar2
   05FA 12s00r00           1906 	lcall	_islower
   05FD E5 82              1907 	mov	a,dpl
   05FF D0 02              1908 	pop	ar2
                           1909 ;	genIfx
                           1910 ;	genIfxJump
                           1911 ;	Peephole 108.c	removed ljmp by inverse jump logic
   0601 60 60              1912 	jz	00126$
                           1913 ;	Peephole 300	removed redundant label 00152$
   0603                    1914 00125$:
                           1915 ;	main.c:169: if (Buffers[0].buf_start + Buffers[0].buf_insert < Buffers[0].buf_end ){
                           1916 ;	genPointerGet
                           1917 ;	genFarPointerGet
   0603 90s06r40           1918 	mov	dptr,#_Buffers
   0606 E0                 1919 	movx	a,@dptr
   0607 FB                 1920 	mov	r3,a
   0608 A3                 1921 	inc	dptr
   0609 E0                 1922 	movx	a,@dptr
   060A FC                 1923 	mov	r4,a
                           1924 ;	genPointerGet
                           1925 ;	genFarPointerGet
   060B 90s06r44           1926 	mov	dptr,#(_Buffers + 0x0004)
   060E E0                 1927 	movx	a,@dptr
   060F FD                 1928 	mov	r5,a
   0610 A3                 1929 	inc	dptr
   0611 E0                 1930 	movx	a,@dptr
   0612 FE                 1931 	mov	r6,a
                           1932 ;	genPlus
                           1933 ;	Peephole 236.g	used r5 instead of ar5
   0613 ED                 1934 	mov	a,r5
                           1935 ;	Peephole 236.a	used r3 instead of ar3
   0614 2B                 1936 	add	a,r3
   0615 FB                 1937 	mov	r3,a
                           1938 ;	Peephole 236.g	used r6 instead of ar6
   0616 EE                 1939 	mov	a,r6
                           1940 ;	Peephole 236.b	used r4 instead of ar4
   0617 3C                 1941 	addc	a,r4
   0618 FC                 1942 	mov	r4,a
                           1943 ;	genPointerGet
                           1944 ;	genFarPointerGet
   0619 90s06r42           1945 	mov	dptr,#(_Buffers + 0x0002)
   061C E0                 1946 	movx	a,@dptr
   061D FD                 1947 	mov	r5,a
   061E A3                 1948 	inc	dptr
   061F E0                 1949 	movx	a,@dptr
   0620 FE                 1950 	mov	r6,a
                           1951 ;	genCmpLt
                           1952 ;	genCmp
   0621 C3                 1953 	clr	c
   0622 EB                 1954 	mov	a,r3
   0623 9D                 1955 	subb	a,r5
   0624 EC                 1956 	mov	a,r4
   0625 9E                 1957 	subb	a,r6
                           1958 ;	genIfxJump
   0626 40 01              1959 	jc	00153$
                           1960 ;	Peephole 251.a	replaced ljmp to ret with ret
   0628 22                 1961 	ret
   0629                    1962 00153$:
                           1963 ;	main.c:170: Buffers[0].buf_start[Buffers[0].buf_insert]  = c;
                           1964 ;	genPointerGet
                           1965 ;	genFarPointerGet
   0629 90s06r40           1966 	mov	dptr,#_Buffers
   062C E0                 1967 	movx	a,@dptr
   062D FB                 1968 	mov	r3,a
   062E A3                 1969 	inc	dptr
   062F E0                 1970 	movx	a,@dptr
   0630 FC                 1971 	mov	r4,a
                           1972 ;	genPointerGet
                           1973 ;	genFarPointerGet
   0631 90s06r44           1974 	mov	dptr,#(_Buffers + 0x0004)
   0634 E0                 1975 	movx	a,@dptr
   0635 FD                 1976 	mov	r5,a
   0636 A3                 1977 	inc	dptr
   0637 E0                 1978 	movx	a,@dptr
   0638 FE                 1979 	mov	r6,a
                           1980 ;	genPlus
                           1981 ;	Peephole 236.g	used r5 instead of ar5
   0639 ED                 1982 	mov	a,r5
                           1983 ;	Peephole 236.a	used r3 instead of ar3
   063A 2B                 1984 	add	a,r3
   063B FB                 1985 	mov	r3,a
                           1986 ;	Peephole 236.g	used r6 instead of ar6
   063C EE                 1987 	mov	a,r6
                           1988 ;	Peephole 236.b	used r4 instead of ar4
   063D 3C                 1989 	addc	a,r4
   063E FC                 1990 	mov	r4,a
                           1991 ;	genAssign
   063F 90s0ArF6           1992 	mov	dptr,#_handleInput_c_1_1
   0642 E0                 1993 	movx	a,@dptr
                           1994 ;	genPointerSet
                           1995 ;     genFarPointerSet
   0643 FF                 1996 	mov	r7,a
   0644 8B 82              1997 	mov	dpl,r3
   0646 8C 83              1998 	mov	dph,r4
                           1999 ;	Peephole 136	removed redundant move
   0648 F0                 2000 	movx	@dptr,a
                           2001 ;	main.c:171: ++Buffers[0].buf_insert;
                           2002 ;	genPlus
                           2003 ;     genPlusIncr
   0649 0D                 2004 	inc	r5
   064A BD 00 01           2005 	cjne	r5,#0x00,00154$
   064D 0E                 2006 	inc	r6
   064E                    2007 00154$:
                           2008 ;	genPointerSet
                           2009 ;     genFarPointerSet
   064E 90s06r44           2010 	mov	dptr,#(_Buffers + 0x0004)
   0651 ED                 2011 	mov	a,r5
   0652 F0                 2012 	movx	@dptr,a
   0653 A3                 2013 	inc	dptr
   0654 EE                 2014 	mov	a,r6
   0655 F0                 2015 	movx	@dptr,a
                           2016 ;	main.c:172: ++Num_Input_Chars;
                           2017 ;	genPlus
   0656 90s00r04           2018 	mov	dptr,#_Num_Input_Chars
   0659 E0                 2019 	movx	a,@dptr
   065A 24 01              2020 	add	a,#0x01
   065C F0                 2021 	movx	@dptr,a
   065D A3                 2022 	inc	dptr
   065E E0                 2023 	movx	a,@dptr
   065F 34 00              2024 	addc	a,#0x00
   0661 F0                 2025 	movx	@dptr,a
                           2026 ;	Peephole 251.a	replaced ljmp to ret with ret
   0662 22                 2027 	ret
   0663                    2028 00126$:
                           2029 ;	main.c:175: else if(c == '?'){
                           2030 ;	genCmpEq
                           2031 ;	gencjneshort
   0663 BA 3F 02           2032 	cjne	r2,#0x3F,00155$
   0666 80 03              2033 	sjmp	00156$
   0668                    2034 00155$:
   0668 02s06rFD           2035 	ljmp	00123$
   066B                    2036 00156$:
                           2037 ;	main.c:177: for (i = 0; i < MAX_NUM_BUFFERS; ++i){
                           2038 ;	genAssign
   066B 7B 00              2039 	mov	r3,#0x00
   066D 7C 00              2040 	mov	r4,#0x00
   066F                    2041 00130$:
                           2042 ;	genCmpLt
                           2043 ;	genCmp
   066F C3                 2044 	clr	c
   0670 EB                 2045 	mov	a,r3
   0671 94 64              2046 	subb	a,#0x64
   0673 EC                 2047 	mov	a,r4
   0674 64 80              2048 	xrl	a,#0x80
   0676 94 80              2049 	subb	a,#0x80
                           2050 ;	genIfxJump
                           2051 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0678 50 51              2052 	jnc	00133$
                           2053 ;	Peephole 300	removed redundant label 00157$
                           2054 ;	main.c:178: if (Buffers[i].in_use){
                           2055 ;	genAssign
   067A 90s00r00           2056 	mov	dptr,#__mulint_PARM_2
   067D 74 0C              2057 	mov	a,#0x0C
   067F F0                 2058 	movx	@dptr,a
   0680 E4                 2059 	clr	a
   0681 A3                 2060 	inc	dptr
   0682 F0                 2061 	movx	@dptr,a
                           2062 ;	genCall
   0683 8B 82              2063 	mov	dpl,r3
   0685 8C 83              2064 	mov	dph,r4
   0687 C0 03              2065 	push	ar3
   0689 C0 04              2066 	push	ar4
   068B 12s00r00           2067 	lcall	__mulint
   068E AD 82              2068 	mov	r5,dpl
   0690 AE 83              2069 	mov	r6,dph
   0692 D0 04              2070 	pop	ar4
   0694 D0 03              2071 	pop	ar3
                           2072 ;	genPlus
                           2073 ;	Peephole 236.g	used r5 instead of ar5
   0696 ED                 2074 	mov	a,r5
   0697 24r40              2075 	add	a,#_Buffers
   0699 FD                 2076 	mov	r5,a
                           2077 ;	Peephole 236.g	used r6 instead of ar6
   069A EE                 2078 	mov	a,r6
   069B 34s06              2079 	addc	a,#(_Buffers >> 8)
   069D FE                 2080 	mov	r6,a
                           2081 ;	genPlus
                           2082 ;     genPlusIncr
   069E 74 0A              2083 	mov	a,#0x0A
                           2084 ;	Peephole 236.a	used r5 instead of ar5
   06A0 2D                 2085 	add	a,r5
   06A1 F5 82              2086 	mov	dpl,a
                           2087 ;	Peephole 181	changed mov to clr
   06A3 E4                 2088 	clr	a
                           2089 ;	Peephole 236.b	used r6 instead of ar6
   06A4 3E                 2090 	addc	a,r6
   06A5 F5 83              2091 	mov	dph,a
                           2092 ;	genPointerGet
                           2093 ;	genFarPointerGet
   06A7 E0                 2094 	movx	a,@dptr
   06A8 FF                 2095 	mov	r7,a
   06A9 A3                 2096 	inc	dptr
   06AA E0                 2097 	movx	a,@dptr
                           2098 ;	genIfx
   06AB F8                 2099 	mov	r0,a
                           2100 ;	Peephole 135	removed redundant mov
   06AC 4F                 2101 	orl	a,r7
                           2102 ;	genIfxJump
                           2103 ;	Peephole 108.c	removed ljmp by inverse jump logic
   06AD 60 15              2104 	jz	00132$
                           2105 ;	Peephole 300	removed redundant label 00158$
                           2106 ;	main.c:179: Buffer_Print(&Buffers[i], false);
                           2107 ;	genAssign
                           2108 ;	genCast
   06AF 7F 00              2109 	mov	r7,#0x0
                           2110 ;	genAssign
   06B1 C2*00              2111 	clr	_Buffer_Print_PARM_2
                           2112 ;	genCall
   06B3 8D 82              2113 	mov	dpl,r5
   06B5 8E 83              2114 	mov	dph,r6
   06B7 8F F0              2115 	mov	b,r7
   06B9 C0 03              2116 	push	ar3
   06BB C0 04              2117 	push	ar4
   06BD 12s00r00           2118 	lcall	_Buffer_Print
   06C0 D0 04              2119 	pop	ar4
   06C2 D0 03              2120 	pop	ar3
   06C4                    2121 00132$:
                           2122 ;	main.c:177: for (i = 0; i < MAX_NUM_BUFFERS; ++i){
                           2123 ;	genPlus
                           2124 ;     genPlusIncr
   06C4 0B                 2125 	inc	r3
                           2126 ;	Peephole 112.b	changed ljmp to sjmp
                           2127 ;	Peephole 243	avoided branch to sjmp
   06C5 BB 00 A7           2128 	cjne	r3,#0x00,00130$
   06C8 0C                 2129 	inc	r4
                           2130 ;	Peephole 300	removed redundant label 00159$
   06C9 80 A4              2131 	sjmp	00130$
   06CB                    2132 00133$:
                           2133 ;	main.c:182: Buffer_Clear(&Buffers[0]);
                           2134 ;	genCall
                           2135 ;	Peephole 182.a	used 16 bit load of DPTR
   06CB 90s06r40           2136 	mov	dptr,#_Buffers
   06CE 75 F0 00           2137 	mov	b,#0x00
   06D1 12s00r00           2138 	lcall	_Buffer_Clear
                           2139 ;	main.c:183: printf("Number of characters input since last '?': %d\r\n", Num_Input_Chars);
                           2140 ;	genIpush
   06D4 90s00r04           2141 	mov	dptr,#_Num_Input_Chars
   06D7 E0                 2142 	movx	a,@dptr
   06D8 C0 E0              2143 	push	acc
   06DA A3                 2144 	inc	dptr
   06DB E0                 2145 	movx	a,@dptr
   06DC C0 E0              2146 	push	acc
                           2147 ;	genIpush
   06DE 74r95              2148 	mov	a,#__str_15
   06E0 C0 E0              2149 	push	acc
   06E2 74s02              2150 	mov	a,#(__str_15 >> 8)
   06E4 C0 E0              2151 	push	acc
   06E6 74 80              2152 	mov	a,#0x80
   06E8 C0 E0              2153 	push	acc
                           2154 ;	genCall
   06EA 12s00r00           2155 	lcall	_printf
   06ED E5 81              2156 	mov	a,sp
   06EF 24 FB              2157 	add	a,#0xfb
   06F1 F5 81              2158 	mov	sp,a
                           2159 ;	main.c:184: Num_Input_Chars = 0;    //Reset the count
                           2160 ;	genAssign
   06F3 90s00r04           2161 	mov	dptr,#_Num_Input_Chars
   06F6 E4                 2162 	clr	a
   06F7 F0                 2163 	movx	@dptr,a
   06F8 A3                 2164 	inc	dptr
   06F9 F0                 2165 	movx	@dptr,a
                           2166 ;	main.c:185: displayPrompt();
                           2167 ;	genCall
                           2168 ;	Peephole 251.a	replaced ljmp to ret with ret
                           2169 ;	Peephole 253.a	replaced lcall/ret with ljmp
   06FA 02s09r45           2170 	ljmp	_displayPrompt
   06FD                    2171 00123$:
                           2172 ;	main.c:188: else if(c == '+'){
                           2173 ;	genCmpEq
                           2174 ;	gencjneshort
                           2175 ;	Peephole 112.b	changed ljmp to sjmp
                           2176 ;	Peephole 198.b	optimized misc jump sequence
   06FD BA 2B 06           2177 	cjne	r2,#0x2B,00120$
                           2178 ;	Peephole 200.b	removed redundant sjmp
                           2179 ;	Peephole 300	removed redundant label 00160$
                           2180 ;	Peephole 300	removed redundant label 00161$
                           2181 ;	main.c:193: handlePlus();
                           2182 ;	genCall
   0700 12s02rAB           2183 	lcall	_handlePlus
                           2184 ;	main.c:194: displayPrompt();
                           2185 ;	genCall
                           2186 ;	Peephole 251.a	replaced ljmp to ret with ret
                           2187 ;	Peephole 253.a	replaced lcall/ret with ljmp
   0703 02s09r45           2188 	ljmp	_displayPrompt
   0706                    2189 00120$:
                           2190 ;	main.c:196: else if(c == '-'){
                           2191 ;	genCmpEq
                           2192 ;	gencjneshort
                           2193 ;	Peephole 112.b	changed ljmp to sjmp
                           2194 ;	Peephole 198.b	optimized misc jump sequence
   0706 BA 2D 06           2195 	cjne	r2,#0x2D,00117$
                           2196 ;	Peephole 200.b	removed redundant sjmp
                           2197 ;	Peephole 300	removed redundant label 00162$
                           2198 ;	Peephole 300	removed redundant label 00163$
                           2199 ;	main.c:201: handleMinus();
                           2200 ;	genCall
   0709 12s04rB3           2201 	lcall	_handleMinus
                           2202 ;	main.c:202: displayPrompt();
                           2203 ;	genCall
                           2204 ;	Peephole 251.a	replaced ljmp to ret with ret
                           2205 ;	Peephole 253.a	replaced lcall/ret with ljmp
   070C 02s09r45           2206 	ljmp	_displayPrompt
   070F                    2207 00117$:
                           2208 ;	main.c:204: else if(c == '='){
                           2209 ;	genCmpEq
                           2210 ;	gencjneshort
                           2211 ;	Peephole 112.b	changed ljmp to sjmp
                           2212 ;	Peephole 198.b	optimized misc jump sequence
   070F BA 3D 2D           2213 	cjne	r2,#0x3D,00114$
                           2214 ;	Peephole 200.b	removed redundant sjmp
                           2215 ;	Peephole 300	removed redundant label 00164$
                           2216 ;	Peephole 300	removed redundant label 00165$
                           2217 ;	main.c:206: Buffer_Print(&Buffers[0], true);
                           2218 ;	genAssign
   0712 D2*00              2219 	setb	_Buffer_Print_PARM_2
                           2220 ;	genCall
                           2221 ;	Peephole 182.a	used 16 bit load of DPTR
   0714 90s06r40           2222 	mov	dptr,#_Buffers
   0717 75 F0 00           2223 	mov	b,#0x00
   071A 12s00r00           2224 	lcall	_Buffer_Print
                           2225 ;	main.c:207: printf("Number of characters input since last '?': %d\r\n", Num_Input_Chars);
                           2226 ;	genIpush
   071D 90s00r04           2227 	mov	dptr,#_Num_Input_Chars
   0720 E0                 2228 	movx	a,@dptr
   0721 C0 E0              2229 	push	acc
   0723 A3                 2230 	inc	dptr
   0724 E0                 2231 	movx	a,@dptr
   0725 C0 E0              2232 	push	acc
                           2233 ;	genIpush
   0727 74r95              2234 	mov	a,#__str_15
   0729 C0 E0              2235 	push	acc
   072B 74s02              2236 	mov	a,#(__str_15 >> 8)
   072D C0 E0              2237 	push	acc
   072F 74 80              2238 	mov	a,#0x80
   0731 C0 E0              2239 	push	acc
                           2240 ;	genCall
   0733 12s00r00           2241 	lcall	_printf
   0736 E5 81              2242 	mov	a,sp
   0738 24 FB              2243 	add	a,#0xfb
   073A F5 81              2244 	mov	sp,a
                           2245 ;	main.c:209: displayPrompt();
                           2246 ;	genCall
                           2247 ;	Peephole 112.b	changed ljmp to sjmp
                           2248 ;	Peephole 251.b	replaced sjmp to ret with ret
                           2249 ;	Peephole 253.a	replaced lcall/ret with ljmp
   073C 02s09r45           2250 	ljmp	_displayPrompt
   073F                    2251 00114$:
                           2252 ;	main.c:211: else if(c == '%'){
                           2253 ;	genCmpEq
                           2254 ;	gencjneshort
                           2255 ;	Peephole 112.b	changed ljmp to sjmp
                           2256 ;	Peephole 198.b	optimized misc jump sequence
   073F BA 25 50           2257 	cjne	r2,#0x25,00111$
                           2258 ;	Peephole 200.b	removed redundant sjmp
                           2259 ;	Peephole 300	removed redundant label 00166$
                           2260 ;	Peephole 300	removed redundant label 00167$
                           2261 ;	main.c:213: if(Buffers[1].in_use){
                           2262 ;	genPointerGet
                           2263 ;	genFarPointerGet
   0742 90s06r56           2264 	mov	dptr,#(_Buffers + 0x0016)
   0745 E0                 2265 	movx	a,@dptr
   0746 FB                 2266 	mov	r3,a
   0747 A3                 2267 	inc	dptr
   0748 E0                 2268 	movx	a,@dptr
                           2269 ;	genIfx
   0749 FC                 2270 	mov	r4,a
                           2271 ;	Peephole 135	removed redundant mov
   074A 4B                 2272 	orl	a,r3
                           2273 ;	genIfxJump
                           2274 ;	Peephole 108.c	removed ljmp by inverse jump logic
   074B 60 2F              2275 	jz	00106$
                           2276 ;	Peephole 300	removed redundant label 00168$
                           2277 ;	main.c:214: Buffer_ContentSwap(&Buffers[0], &Buffers[1]);
                           2278 ;	genCast
   074D 90s00r00           2279 	mov	dptr,#_Buffer_ContentSwap_PARM_2
   0750 74r4C              2280 	mov	a,#(_Buffers + 0x000c)
   0752 F0                 2281 	movx	@dptr,a
   0753 A3                 2282 	inc	dptr
   0754 74s06              2283 	mov	a,#((_Buffers + 0x000c) >> 8)
   0756 F0                 2284 	movx	@dptr,a
   0757 A3                 2285 	inc	dptr
   0758 74 00              2286 	mov	a,#0x0
   075A F0                 2287 	movx	@dptr,a
                           2288 ;	genCall
                           2289 ;	Peephole 182.a	used 16 bit load of DPTR
   075B 90s06r40           2290 	mov	dptr,#_Buffers
   075E 75 F0 00           2291 	mov	b,#0x00
   0761 12s00r00           2292 	lcall	_Buffer_ContentSwap
                           2293 ;	main.c:215: printf("\r\n\r\nSwapped contents of Buffer0 and Buffer 1.\r\n");
                           2294 ;	genIpush
   0764 74rC5              2295 	mov	a,#__str_16
   0766 C0 E0              2296 	push	acc
   0768 74s02              2297 	mov	a,#(__str_16 >> 8)
   076A C0 E0              2298 	push	acc
   076C 74 80              2299 	mov	a,#0x80
   076E C0 E0              2300 	push	acc
                           2301 ;	genCall
   0770 12s00r00           2302 	lcall	_printf
   0773 15 81              2303 	dec	sp
   0775 15 81              2304 	dec	sp
   0777 15 81              2305 	dec	sp
                           2306 ;	main.c:216: displayPrompt();
                           2307 ;	genCall
                           2308 ;	Peephole 112.b	changed ljmp to sjmp
                           2309 ;	Peephole 251.b	replaced sjmp to ret with ret
                           2310 ;	Peephole 253.a	replaced lcall/ret with ljmp
   0779 02s09r45           2311 	ljmp	_displayPrompt
   077C                    2312 00106$:
                           2313 ;	main.c:219: printf("\r\nCan't swap. Need to allocate buffer 1. Press '+'");
                           2314 ;	genIpush
   077C 74rF5              2315 	mov	a,#__str_17
   077E C0 E0              2316 	push	acc
   0780 74s02              2317 	mov	a,#(__str_17 >> 8)
   0782 C0 E0              2318 	push	acc
   0784 74 80              2319 	mov	a,#0x80
   0786 C0 E0              2320 	push	acc
                           2321 ;	genCall
   0788 12s00r00           2322 	lcall	_printf
   078B 15 81              2323 	dec	sp
   078D 15 81              2324 	dec	sp
   078F 15 81              2325 	dec	sp
                           2326 ;	Peephole 112.b	changed ljmp to sjmp
                           2327 ;	Peephole 251.b	replaced sjmp to ret with ret
   0791 22                 2328 	ret
   0792                    2329 00111$:
                           2330 ;	main.c:222: else if(c == '@'){
                           2331 ;	genCmpEq
                           2332 ;	gencjneshort
                           2333 ;	Peephole 112.b	changed ljmp to sjmp
                           2334 ;	Peephole 198.b	optimized misc jump sequence
   0792 BA 40 02           2335 	cjne	r2,#0x40,00134$
                           2336 ;	Peephole 200.b	removed redundant sjmp
                           2337 ;	Peephole 300	removed redundant label 00169$
                           2338 ;	Peephole 300	removed redundant label 00170$
                           2339 ;	main.c:224: Restart = true;
                           2340 ;	genAssign
   0795 D2*00              2341 	setb	_Restart
   0797                    2342 00134$:
   0797 22                 2343 	ret
                           2344 ;------------------------------------------------------------
                           2345 ;Allocation info for local variables in function 'FreeAll'
                           2346 ;------------------------------------------------------------
                           2347 ;i                         Allocated with name '_FreeAll_i_1_1'
                           2348 ;------------------------------------------------------------
                           2349 ;	main.c:228: void FreeAll(void){
                           2350 ;	-----------------------------------------
                           2351 ;	 function FreeAll
                           2352 ;	-----------------------------------------
   0798                    2353 _FreeAll:
                           2354 ;	main.c:231: for (i = 0; i < MAX_NUM_BUFFERS; ++i){
                           2355 ;	genAssign
   0798 7A 00              2356 	mov	r2,#0x00
   079A 7B 00              2357 	mov	r3,#0x00
   079C                    2358 00101$:
                           2359 ;	genCmpLt
                           2360 ;	genCmp
   079C C3                 2361 	clr	c
   079D EA                 2362 	mov	a,r2
   079E 94 64              2363 	subb	a,#0x64
   07A0 EB                 2364 	mov	a,r3
   07A1 64 80              2365 	xrl	a,#0x80
   07A3 94 80              2366 	subb	a,#0x80
                           2367 ;	genIfxJump
                           2368 ;	Peephole 108.a	removed ljmp by inverse jump logic
   07A5 50 45              2369 	jnc	00105$
                           2370 ;	Peephole 300	removed redundant label 00110$
                           2371 ;	main.c:232: Buffer_Free(&Buffers[i]);
                           2372 ;	genAssign
   07A7 90s00r00           2373 	mov	dptr,#__mulint_PARM_2
   07AA 74 0C              2374 	mov	a,#0x0C
   07AC F0                 2375 	movx	@dptr,a
   07AD E4                 2376 	clr	a
   07AE A3                 2377 	inc	dptr
   07AF F0                 2378 	movx	@dptr,a
                           2379 ;	genCall
   07B0 8A 82              2380 	mov	dpl,r2
   07B2 8B 83              2381 	mov	dph,r3
   07B4 C0 02              2382 	push	ar2
   07B6 C0 03              2383 	push	ar3
   07B8 12s00r00           2384 	lcall	__mulint
   07BB AC 82              2385 	mov	r4,dpl
   07BD AD 83              2386 	mov	r5,dph
   07BF D0 03              2387 	pop	ar3
   07C1 D0 02              2388 	pop	ar2
                           2389 ;	genPlus
                           2390 ;	Peephole 236.g	used r4 instead of ar4
   07C3 EC                 2391 	mov	a,r4
   07C4 24r40              2392 	add	a,#_Buffers
   07C6 FC                 2393 	mov	r4,a
                           2394 ;	Peephole 236.g	used r5 instead of ar5
   07C7 ED                 2395 	mov	a,r5
   07C8 34s06              2396 	addc	a,#(_Buffers >> 8)
   07CA FD                 2397 	mov	r5,a
                           2398 ;	genCast
   07CB 7E 00              2399 	mov	r6,#0x0
                           2400 ;	genCall
   07CD 8C 82              2401 	mov	dpl,r4
   07CF 8D 83              2402 	mov	dph,r5
   07D1 8E F0              2403 	mov	b,r6
   07D3 C0 02              2404 	push	ar2
   07D5 C0 03              2405 	push	ar3
   07D7 12s00r00           2406 	lcall	_Buffer_Free
   07DA D0 03              2407 	pop	ar3
   07DC D0 02              2408 	pop	ar2
                           2409 ;	main.c:233: Num_Buffers = 0;
                           2410 ;	genAssign
   07DE 90s00r02           2411 	mov	dptr,#_Num_Buffers
   07E1 E4                 2412 	clr	a
   07E2 F0                 2413 	movx	@dptr,a
   07E3 A3                 2414 	inc	dptr
   07E4 F0                 2415 	movx	@dptr,a
                           2416 ;	main.c:231: for (i = 0; i < MAX_NUM_BUFFERS; ++i){
                           2417 ;	genPlus
                           2418 ;     genPlusIncr
   07E5 0A                 2419 	inc	r2
                           2420 ;	Peephole 112.b	changed ljmp to sjmp
                           2421 ;	Peephole 243	avoided branch to sjmp
   07E6 BA 00 B3           2422 	cjne	r2,#0x00,00101$
   07E9 0B                 2423 	inc	r3
                           2424 ;	Peephole 300	removed redundant label 00111$
   07EA 80 B0              2425 	sjmp	00101$
   07EC                    2426 00105$:
   07EC 22                 2427 	ret
                           2428 ;------------------------------------------------------------
                           2429 ;Allocation info for local variables in function 'displayWelcome'
                           2430 ;------------------------------------------------------------
                           2431 ;------------------------------------------------------------
                           2432 ;	main.c:237: void displayWelcome(void){
                           2433 ;	-----------------------------------------
                           2434 ;	 function displayWelcome
                           2435 ;	-----------------------------------------
   07ED                    2436 _displayWelcome:
                           2437 ;	main.c:238: printf("\r\n********************");
                           2438 ;	genIpush
   07ED 74r28              2439 	mov	a,#__str_18
   07EF C0 E0              2440 	push	acc
   07F1 74s03              2441 	mov	a,#(__str_18 >> 8)
   07F3 C0 E0              2442 	push	acc
   07F5 74 80              2443 	mov	a,#0x80
   07F7 C0 E0              2444 	push	acc
                           2445 ;	genCall
   07F9 12s00r00           2446 	lcall	_printf
   07FC 15 81              2447 	dec	sp
   07FE 15 81              2448 	dec	sp
   0800 15 81              2449 	dec	sp
                           2450 ;	main.c:239: printf("\r\n* Welcome to Lab 3 *");
                           2451 ;	genIpush
   0802 74r3F              2452 	mov	a,#__str_19
   0804 C0 E0              2453 	push	acc
   0806 74s03              2454 	mov	a,#(__str_19 >> 8)
   0808 C0 E0              2455 	push	acc
   080A 74 80              2456 	mov	a,#0x80
   080C C0 E0              2457 	push	acc
                           2458 ;	genCall
   080E 12s00r00           2459 	lcall	_printf
   0811 15 81              2460 	dec	sp
   0813 15 81              2461 	dec	sp
   0815 15 81              2462 	dec	sp
                           2463 ;	main.c:240: printf("\r\n********************");
                           2464 ;	genIpush
   0817 74r28              2465 	mov	a,#__str_18
   0819 C0 E0              2466 	push	acc
   081B 74s03              2467 	mov	a,#(__str_18 >> 8)
   081D C0 E0              2468 	push	acc
   081F 74 80              2469 	mov	a,#0x80
   0821 C0 E0              2470 	push	acc
                           2471 ;	genCall
   0823 12s00r00           2472 	lcall	_printf
   0826 15 81              2473 	dec	sp
   0828 15 81              2474 	dec	sp
   082A 15 81              2475 	dec	sp
                           2476 ;	main.c:241: printf("\r\nAuthor: Joey Jacobus");
                           2477 ;	genIpush
   082C 74r56              2478 	mov	a,#__str_20
   082E C0 E0              2479 	push	acc
   0830 74s03              2480 	mov	a,#(__str_20 >> 8)
   0832 C0 E0              2481 	push	acc
   0834 74 80              2482 	mov	a,#0x80
   0836 C0 E0              2483 	push	acc
                           2484 ;	genCall
   0838 12s00r00           2485 	lcall	_printf
   083B 15 81              2486 	dec	sp
   083D 15 81              2487 	dec	sp
   083F 15 81              2488 	dec	sp
                           2489 ;	main.c:242: printf("\r\nOctober 2016");
                           2490 ;	genIpush
   0841 74r6D              2491 	mov	a,#__str_21
   0843 C0 E0              2492 	push	acc
   0845 74s03              2493 	mov	a,#(__str_21 >> 8)
   0847 C0 E0              2494 	push	acc
   0849 74 80              2495 	mov	a,#0x80
   084B C0 E0              2496 	push	acc
                           2497 ;	genCall
   084D 12s00r00           2498 	lcall	_printf
   0850 15 81              2499 	dec	sp
   0852 15 81              2500 	dec	sp
   0854 15 81              2501 	dec	sp
                           2502 ;	main.c:243: printf("\r\nEmbedded Systems Design: The University of Colorado at Boulder");
                           2503 ;	genIpush
   0856 74r7C              2504 	mov	a,#__str_22
   0858 C0 E0              2505 	push	acc
   085A 74s03              2506 	mov	a,#(__str_22 >> 8)
   085C C0 E0              2507 	push	acc
   085E 74 80              2508 	mov	a,#0x80
   0860 C0 E0              2509 	push	acc
                           2510 ;	genCall
   0862 12s00r00           2511 	lcall	_printf
   0865 15 81              2512 	dec	sp
   0867 15 81              2513 	dec	sp
   0869 15 81              2514 	dec	sp
                           2515 ;	main.c:244: printf("\r\n\r\n");
                           2516 ;	genIpush
   086B 74rBD              2517 	mov	a,#__str_23
   086D C0 E0              2518 	push	acc
   086F 74s03              2519 	mov	a,#(__str_23 >> 8)
   0871 C0 E0              2520 	push	acc
   0873 74 80              2521 	mov	a,#0x80
   0875 C0 E0              2522 	push	acc
                           2523 ;	genCall
   0877 12s00r00           2524 	lcall	_printf
   087A 15 81              2525 	dec	sp
   087C 15 81              2526 	dec	sp
   087E 15 81              2527 	dec	sp
                           2528 ;	main.c:245: printf("Enter alpha numeric characters to store them in buffer 0\r\n");
                           2529 ;	genIpush
   0880 74rC2              2530 	mov	a,#__str_24
   0882 C0 E0              2531 	push	acc
   0884 74s03              2532 	mov	a,#(__str_24 >> 8)
   0886 C0 E0              2533 	push	acc
   0888 74 80              2534 	mov	a,#0x80
   088A C0 E0              2535 	push	acc
                           2536 ;	genCall
   088C 12s00r00           2537 	lcall	_printf
   088F 15 81              2538 	dec	sp
   0891 15 81              2539 	dec	sp
   0893 15 81              2540 	dec	sp
                           2541 ;	main.c:246: printf("Enter a special character at any time to perform the following ops:\r\n");
                           2542 ;	genIpush
   0895 74rFD              2543 	mov	a,#__str_25
   0897 C0 E0              2544 	push	acc
   0899 74s03              2545 	mov	a,#(__str_25 >> 8)
   089B C0 E0              2546 	push	acc
   089D 74 80              2547 	mov	a,#0x80
   089F C0 E0              2548 	push	acc
                           2549 ;	genCall
   08A1 12s00r00           2550 	lcall	_printf
   08A4 15 81              2551 	dec	sp
   08A6 15 81              2552 	dec	sp
   08A8 15 81              2553 	dec	sp
                           2554 ;	main.c:248: printf("\r\n'+': Create a new buffer");
                           2555 ;	genIpush
   08AA 74r43              2556 	mov	a,#__str_26
   08AC C0 E0              2557 	push	acc
   08AE 74s04              2558 	mov	a,#(__str_26 >> 8)
   08B0 C0 E0              2559 	push	acc
   08B2 74 80              2560 	mov	a,#0x80
   08B4 C0 E0              2561 	push	acc
                           2562 ;	genCall
   08B6 12s00r00           2563 	lcall	_printf
   08B9 15 81              2564 	dec	sp
   08BB 15 81              2565 	dec	sp
   08BD 15 81              2566 	dec	sp
                           2567 ;	main.c:249: printf("\r\n'-': Delete an existing buffer");
                           2568 ;	genIpush
   08BF 74r5E              2569 	mov	a,#__str_27
   08C1 C0 E0              2570 	push	acc
   08C3 74s04              2571 	mov	a,#(__str_27 >> 8)
   08C5 C0 E0              2572 	push	acc
   08C7 74 80              2573 	mov	a,#0x80
   08C9 C0 E0              2574 	push	acc
                           2575 ;	genCall
   08CB 12s00r00           2576 	lcall	_printf
   08CE 15 81              2577 	dec	sp
   08D0 15 81              2578 	dec	sp
   08D2 15 81              2579 	dec	sp
                           2580 ;	main.c:250: printf("\r\n'?': Clear contents of Buffer 0 and display in ASCII format");
                           2581 ;	genIpush
   08D4 74r7F              2582 	mov	a,#__str_28
   08D6 C0 E0              2583 	push	acc
   08D8 74s04              2584 	mov	a,#(__str_28 >> 8)
   08DA C0 E0              2585 	push	acc
   08DC 74 80              2586 	mov	a,#0x80
   08DE C0 E0              2587 	push	acc
                           2588 ;	genCall
   08E0 12s00r00           2589 	lcall	_printf
   08E3 15 81              2590 	dec	sp
   08E5 15 81              2591 	dec	sp
   08E7 15 81              2592 	dec	sp
                           2593 ;	main.c:251: printf("\r\n'=': Show contents of Buffer 0 in hexadecimal format");
                           2594 ;	genIpush
   08E9 74rBD              2595 	mov	a,#__str_29
   08EB C0 E0              2596 	push	acc
   08ED 74s04              2597 	mov	a,#(__str_29 >> 8)
   08EF C0 E0              2598 	push	acc
   08F1 74 80              2599 	mov	a,#0x80
   08F3 C0 E0              2600 	push	acc
                           2601 ;	genCall
   08F5 12s00r00           2602 	lcall	_printf
   08F8 15 81              2603 	dec	sp
   08FA 15 81              2604 	dec	sp
   08FC 15 81              2605 	dec	sp
                           2606 ;	main.c:252: printf("\r\n'%c': Swap the contents of Buffer 0 and Buffer 1", '%');
                           2607 ;	genIpush
   08FE 74 25              2608 	mov	a,#0x25
   0900 C0 E0              2609 	push	acc
                           2610 ;	Peephole 181	changed mov to clr
   0902 E4                 2611 	clr	a
   0903 C0 E0              2612 	push	acc
                           2613 ;	genIpush
   0905 74rF4              2614 	mov	a,#__str_30
   0907 C0 E0              2615 	push	acc
   0909 74s04              2616 	mov	a,#(__str_30 >> 8)
   090B C0 E0              2617 	push	acc
   090D 74 80              2618 	mov	a,#0x80
   090F C0 E0              2619 	push	acc
                           2620 ;	genCall
   0911 12s00r00           2621 	lcall	_printf
   0914 E5 81              2622 	mov	a,sp
   0916 24 FB              2623 	add	a,#0xfb
   0918 F5 81              2624 	mov	sp,a
                           2625 ;	main.c:253: printf("\r\n'@': Clear buffers and restart the program");
                           2626 ;	genIpush
   091A 74r27              2627 	mov	a,#__str_31
   091C C0 E0              2628 	push	acc
   091E 74s05              2629 	mov	a,#(__str_31 >> 8)
   0920 C0 E0              2630 	push	acc
   0922 74 80              2631 	mov	a,#0x80
   0924 C0 E0              2632 	push	acc
                           2633 ;	genCall
   0926 12s00r00           2634 	lcall	_printf
   0929 15 81              2635 	dec	sp
   092B 15 81              2636 	dec	sp
   092D 15 81              2637 	dec	sp
                           2638 ;	main.c:254: printf("\r\n\r\n");
                           2639 ;	genIpush
   092F 74rBD              2640 	mov	a,#__str_23
   0931 C0 E0              2641 	push	acc
   0933 74s03              2642 	mov	a,#(__str_23 >> 8)
   0935 C0 E0              2643 	push	acc
   0937 74 80              2644 	mov	a,#0x80
   0939 C0 E0              2645 	push	acc
                           2646 ;	genCall
   093B 12s00r00           2647 	lcall	_printf
   093E 15 81              2648 	dec	sp
   0940 15 81              2649 	dec	sp
   0942 15 81              2650 	dec	sp
                           2651 ;	Peephole 300	removed redundant label 00101$
   0944 22                 2652 	ret
                           2653 ;------------------------------------------------------------
                           2654 ;Allocation info for local variables in function 'displayPrompt'
                           2655 ;------------------------------------------------------------
                           2656 ;------------------------------------------------------------
                           2657 ;	main.c:257: void displayPrompt(void){
                           2658 ;	-----------------------------------------
                           2659 ;	 function displayPrompt
                           2660 ;	-----------------------------------------
   0945                    2661 _displayPrompt:
                           2662 ;	main.c:258: printf ("\r\nEnter characters to add to Buffer0: ");
                           2663 ;	genIpush
   0945 74r54              2664 	mov	a,#__str_32
   0947 C0 E0              2665 	push	acc
   0949 74s05              2666 	mov	a,#(__str_32 >> 8)
   094B C0 E0              2667 	push	acc
   094D 74 80              2668 	mov	a,#0x80
   094F C0 E0              2669 	push	acc
                           2670 ;	genCall
   0951 12s00r00           2671 	lcall	_printf
   0954 15 81              2672 	dec	sp
   0956 15 81              2673 	dec	sp
   0958 15 81              2674 	dec	sp
                           2675 ;	Peephole 300	removed redundant label 00101$
   095A 22                 2676 	ret
                           2677 ;------------------------------------------------------------
                           2678 ;Allocation info for local variables in function 'main'
                           2679 ;------------------------------------------------------------
                           2680 ;c                         Allocated with name '_main_c_1_1'
                           2681 ;------------------------------------------------------------
                           2682 ;	main.c:261: void main(void){
                           2683 ;	-----------------------------------------
                           2684 ;	 function main
                           2685 ;	-----------------------------------------
   095B                    2686 _main:
                           2687 ;	main.c:264: Restart = false;
                           2688 ;	genAssign
   095B C2*00              2689 	clr	_Restart
                           2690 ;	main.c:266: init_dynamic_memory((MEMHEADER xdata *)heap, HEAP_SIZE); // Initialize the heap
                           2691 ;	genAssign
   095D 90s00r00           2692 	mov	dptr,#_init_dynamic_memory_PARM_2
   0960 74 40              2693 	mov	a,#0x40
   0962 F0                 2694 	movx	@dptr,a
   0963 A3                 2695 	inc	dptr
   0964 74 06              2696 	mov	a,#0x06
   0966 F0                 2697 	movx	@dptr,a
                           2698 ;	genCall
                           2699 ;	Peephole 182.a	used 16 bit load of DPTR
   0967 90s00r00           2700 	mov	dptr,#_heap
   096A 12s00r00           2701 	lcall	_init_dynamic_memory
                           2702 ;	main.c:267: Serial_Init();
                           2703 ;	genCall
   096D 12s00r00           2704 	lcall	_Serial_Init
                           2705 ;	main.c:273: while(1){
   0970                    2706 00109$:
                           2707 ;	main.c:274: displayWelcome();
                           2708 ;	genCall
   0970 12s07rED           2709 	lcall	_displayWelcome
                           2710 ;	main.c:275: setupBuffers();
                           2711 ;	genCall
   0973 12s00r0C           2712 	lcall	_setupBuffers
                           2713 ;	main.c:276: printf ("\r\nBuffers set up!");
                           2714 ;	genIpush
   0976 74r7B              2715 	mov	a,#__str_33
   0978 C0 E0              2716 	push	acc
   097A 74s05              2717 	mov	a,#(__str_33 >> 8)
   097C C0 E0              2718 	push	acc
   097E 74 80              2719 	mov	a,#0x80
   0980 C0 E0              2720 	push	acc
                           2721 ;	genCall
   0982 12s00r00           2722 	lcall	_printf
   0985 15 81              2723 	dec	sp
   0987 15 81              2724 	dec	sp
   0989 15 81              2725 	dec	sp
                           2726 ;	main.c:277: displayPrompt();
                           2727 ;	genCall
   098B 12s09r45           2728 	lcall	_displayPrompt
                           2729 ;	main.c:278: P1_5 = 0;
                           2730 ;	genAssign
   098E C2 95              2731 	clr	_P1_5
                           2732 ;	main.c:279: while(1){
   0990                    2733 00106$:
                           2734 ;	main.c:280: P1_5 = !P1_5;   //Debug
                           2735 ;	genNot
   0990 B2 95              2736 	cpl	_P1_5
                           2737 ;	main.c:281: c = getchar();
                           2738 ;	genCall
   0992 12s00r00           2739 	lcall	_getchar
   0995 AA 82              2740 	mov	r2,dpl
                           2741 ;	main.c:282: if (c == ENTER_KEY){
                           2742 ;	genCmpEq
                           2743 ;	gencjneshort
                           2744 ;	Peephole 112.b	changed ljmp to sjmp
                           2745 ;	Peephole 198.b	optimized misc jump sequence
   0997 BA 0D 0A           2746 	cjne	r2,#0x0D,00102$
                           2747 ;	Peephole 200.b	removed redundant sjmp
                           2748 ;	Peephole 300	removed redundant label 00117$
                           2749 ;	Peephole 300	removed redundant label 00118$
                           2750 ;	main.c:283: putchar('\n');
                           2751 ;	genCall
   099A 75 82 0A           2752 	mov	dpl,#0x0A
   099D C0 02              2753 	push	ar2
   099F 12s00r00           2754 	lcall	_putchar
   09A2 D0 02              2755 	pop	ar2
   09A4                    2756 00102$:
                           2757 ;	main.c:285: putchar(c);
                           2758 ;	genCall
   09A4 8A 82              2759 	mov	dpl,r2
   09A6 C0 02              2760 	push	ar2
   09A8 12s00r00           2761 	lcall	_putchar
   09AB D0 02              2762 	pop	ar2
                           2763 ;	main.c:287: handleInput(c);
                           2764 ;	genCall
   09AD 8A 82              2765 	mov	dpl,r2
   09AF 12s05rD1           2766 	lcall	_handleInput
                           2767 ;	main.c:288: if (Restart){
                           2768 ;	genIfx
                           2769 ;	genIfxJump
                           2770 ;	Peephole 108.d	removed ljmp by inverse jump logic
                           2771 ;	main.c:289: Restart = false;
                           2772 ;	genAssign
                           2773 ;	Peephole 250.a	using atomic test and clear
   09B2 10*00 02           2774 	jbc	_Restart,00119$
   09B5 80 D9              2775 	sjmp	00106$
   09B7                    2776 00119$:
                           2777 ;	main.c:290: FreeAll();
                           2778 ;	genCall
   09B7 12s07r98           2779 	lcall	_FreeAll
                           2780 ;	main.c:291: break;
                           2781 ;	Peephole 112.b	changed ljmp to sjmp
   09BA 80 B4              2782 	sjmp	00109$
                           2783 ;	Peephole 259.a	removed redundant label 00111$ and ret
                           2784 ;
                           2785 	.area CSEG    (CODE)
                           2786 	.area CONST   (CODE)
   0000                    2787 __str_0:
   0000 0D                 2788 	.db 0x0D
   0001 0A                 2789 	.db 0x0A
   0002 45 6E 74 65 72 20  2790 	.ascii "Enter a size for the buffers that is a multiple of 16 betw"
        61 20 73 69 7A 65
        20 66 6F 72 20 74
        68 65 20 62 75 66
        66 65 72 73 20 74
        68 61 74 20 69 73
        20 61 20 6D 75 6C
        74 69 70 6C 65 20
        6F 66 20 31 36 20
        62 65 74 77
   003C 65 65 6E 20 25 64  2791 	.ascii "een %d and %d: "
        20 61 6E 64 20 25
        64 3A 20
   004B 00                 2792 	.db 0x00
   004C                    2793 __str_1:
   004C 0D                 2794 	.db 0x0D
   004D 0A                 2795 	.db 0x0A
   004E 45 72 72 6F 72 2E  2796 	.ascii "Error. Value must be greater than %d"
        20 56 61 6C 75 65
        20 6D 75 73 74 20
        62 65 20 67 72 65
        61 74 65 72 20 74
        68 61 6E 20 25 64
   0072 0D                 2797 	.db 0x0D
   0073 0A                 2798 	.db 0x0A
   0074 00                 2799 	.db 0x00
   0075                    2800 __str_2:
   0075 0D                 2801 	.db 0x0D
   0076 0A                 2802 	.db 0x0A
   0077 45 72 72 6F 72 2E  2803 	.ascii "Error. Value must be less than %d"
        20 56 61 6C 75 65
        20 6D 75 73 74 20
        62 65 20 6C 65 73
        73 20 74 68 61 6E
        20 25 64
   0098 0D                 2804 	.db 0x0D
   0099 0A                 2805 	.db 0x0A
   009A 00                 2806 	.db 0x00
   009B                    2807 __str_3:
   009B 0D                 2808 	.db 0x0D
   009C 0A                 2809 	.db 0x0A
   009D 45 72 72 6F 72 2E  2810 	.ascii "Error. Buffer Size must be a multiple of 16"
        20 42 75 66 66 65
        72 20 53 69 7A 65
        20 6D 75 73 74 20
        62 65 20 61 20 6D
        75 6C 74 69 70 6C
        65 20 6F 66 20 31
        36
   00C8 0D                 2811 	.db 0x0D
   00C9 0A                 2812 	.db 0x0A
   00CA 00                 2813 	.db 0x00
   00CB                    2814 __str_4:
   00CB 0D                 2815 	.db 0x0D
   00CC 0A                 2816 	.db 0x0A
   00CD 42 75 66 66 65 72  2817 	.ascii "Buffers of size: %d allocated at addresses: %p and %p"
        73 20 6F 66 20 73
        69 7A 65 3A 20 25
        64 20 61 6C 6C 6F
        63 61 74 65 64 20
        61 74 20 61 64 64
        72 65 73 73 65 73
        3A 20 25 70 20 61
        6E 64 20 25 70
   0102 0D                 2818 	.db 0x0D
   0103 0A                 2819 	.db 0x0A
   0104 00                 2820 	.db 0x00
   0105                    2821 __str_5:
   0105 0D                 2822 	.db 0x0D
   0106 0A                 2823 	.db 0x0A
   0107 4D 61 6C 6C 6F 63  2824 	.ascii "Malloc failed for buffer size %d, choose something smaller"
        20 66 61 69 6C 65
        64 20 66 6F 72 20
        62 75 66 66 65 72
        20 73 69 7A 65 20
        25 64 2C 20 63 68
        6F 6F 73 65 20 73
        6F 6D 65 74 68 69
        6E 67 20 73 6D 61
        6C 6C 65 72
   0141 0D                 2825 	.db 0x0D
   0142 0A                 2826 	.db 0x0A
   0143 00                 2827 	.db 0x00
   0144                    2828 __str_6:
   0144 0D                 2829 	.db 0x0D
   0145 0A                 2830 	.db 0x0A
   0146 45 6E 74 65 72 20  2831 	.ascii "Enter a size for the new buffer between %d and %d: "
        61 20 73 69 7A 65
        20 66 6F 72 20 74
        68 65 20 6E 65 77
        20 62 75 66 66 65
        72 20 62 65 74 77
        65 65 6E 20 25 64
        20 61 6E 64 20 25
        64 3A 20
   0179 00                 2832 	.db 0x00
   017A                    2833 __str_7:
   017A 0D                 2834 	.db 0x0D
   017B 0A                 2835 	.db 0x0A
   017C 4F 75 74 20 6F 66  2836 	.ascii "Out of possible buffers. Allocation failed"
        20 70 6F 73 73 69
        62 6C 65 20 62 75
        66 66 65 72 73 2E
        20 41 6C 6C 6F 63
        61 74 69 6F 6E 20
        66 61 69 6C 65 64
   01A6 00                 2837 	.db 0x00
   01A7                    2838 __str_8:
   01A7 0D                 2839 	.db 0x0D
   01A8 0A                 2840 	.db 0x0A
   01A9 42 75 66 66 65 72  2841 	.ascii "Buffer of size: %d allocated at address: %p "
        20 6F 66 20 73 69
        7A 65 3A 20 25 64
        20 61 6C 6C 6F 63
        61 74 65 64 20 61
        74 20 61 64 64 72
        65 73 73 3A 20 25
        70 20
   01D5 0D                 2842 	.db 0x0D
   01D6 0A                 2843 	.db 0x0A
   01D7 00                 2844 	.db 0x00
   01D8                    2845 __str_9:
   01D8 0D                 2846 	.db 0x0D
   01D9 0A                 2847 	.db 0x0A
   01DA 4D 61 6C 6C 6F 63  2848 	.ascii "Malloc failed for buffer size %d"
        20 66 61 69 6C 65
        64 20 66 6F 72 20
        62 75 66 66 65 72
        20 73 69 7A 65 20
        25 64
   01FA 0D                 2849 	.db 0x0D
   01FB 0A                 2850 	.db 0x0A
   01FC 00                 2851 	.db 0x00
   01FD                    2852 __str_10:
   01FD 0D                 2853 	.db 0x0D
   01FE 0A                 2854 	.db 0x0A
   01FF 45 6E 74 65 72 20  2855 	.ascii "Enter id of buffer you want to free: "
        69 64 20 6F 66 20
        62 75 66 66 65 72
        20 79 6F 75 20 77
        61 6E 74 20 74 6F
        20 66 72 65 65 3A
        20
   0224 00                 2856 	.db 0x00
   0225                    2857 __str_11:
   0225 0D                 2858 	.db 0x0D
   0226 0A                 2859 	.db 0x0A
   0227 43 61 6E 63 65 6C  2860 	.ascii "Cancelling"
        6C 69 6E 67
   0231 00                 2861 	.db 0x00
   0232                    2862 __str_12:
   0232 0D                 2863 	.db 0x0D
   0233 0A                 2864 	.db 0x0A
   0234 43 61 6E 27 74 20  2865 	.ascii "Can't free buffers 0 or 1. Enter another buffer id: "
        66 72 65 65 20 62
        75 66 66 65 72 73
        20 30 20 6F 72 20
        31 2E 20 45 6E 74
        65 72 20 61 6E 6F
        74 68 65 72 20 62
        75 66 66 65 72 20
        69 64 3A 20
   0268 00                 2866 	.db 0x00
   0269                    2867 __str_13:
   0269 0D                 2868 	.db 0x0D
   026A 0A                 2869 	.db 0x0A
   026B 46 72 65 65 69 6E  2870 	.ascii "Freeing Buffer %d"
        67 20 42 75 66 66
        65 72 20 25 64
   027C 00                 2871 	.db 0x00
   027D                    2872 __str_14:
   027D 0D                 2873 	.db 0x0D
   027E 0A                 2874 	.db 0x0A
   027F 49 6E 76 61 6C 69  2875 	.ascii "Invalid buffer id %d."
        64 20 62 75 66 66
        65 72 20 69 64 20
        25 64 2E
   0294 00                 2876 	.db 0x00
   0295                    2877 __str_15:
   0295 4E 75 6D 62 65 72  2878 	.ascii "Number of characters input since last '?': %d"
        20 6F 66 20 63 68
        61 72 61 63 74 65
        72 73 20 69 6E 70
        75 74 20 73 69 6E
        63 65 20 6C 61 73
        74 20 27 3F 27 3A
        20 25 64
   02C2 0D                 2879 	.db 0x0D
   02C3 0A                 2880 	.db 0x0A
   02C4 00                 2881 	.db 0x00
   02C5                    2882 __str_16:
   02C5 0D                 2883 	.db 0x0D
   02C6 0A                 2884 	.db 0x0A
   02C7 0D                 2885 	.db 0x0D
   02C8 0A                 2886 	.db 0x0A
   02C9 53 77 61 70 70 65  2887 	.ascii "Swapped contents of Buffer0 and Buffer 1."
        64 20 63 6F 6E 74
        65 6E 74 73 20 6F
        66 20 42 75 66 66
        65 72 30 20 61 6E
        64 20 42 75 66 66
        65 72 20 31 2E
   02F2 0D                 2888 	.db 0x0D
   02F3 0A                 2889 	.db 0x0A
   02F4 00                 2890 	.db 0x00
   02F5                    2891 __str_17:
   02F5 0D                 2892 	.db 0x0D
   02F6 0A                 2893 	.db 0x0A
   02F7 43 61 6E 27 74 20  2894 	.ascii "Can't swap. Need to allocate buffer 1. Press '+'"
        73 77 61 70 2E 20
        4E 65 65 64 20 74
        6F 20 61 6C 6C 6F
        63 61 74 65 20 62
        75 66 66 65 72 20
        31 2E 20 50 72 65
        73 73 20 27 2B 27
   0327 00                 2895 	.db 0x00
   0328                    2896 __str_18:
   0328 0D                 2897 	.db 0x0D
   0329 0A                 2898 	.db 0x0A
   032A 2A 2A 2A 2A 2A 2A  2899 	.ascii "********************"
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A
   033E 00                 2900 	.db 0x00
   033F                    2901 __str_19:
   033F 0D                 2902 	.db 0x0D
   0340 0A                 2903 	.db 0x0A
   0341 2A 20 57 65 6C 63  2904 	.ascii "* Welcome to Lab 3 *"
        6F 6D 65 20 74 6F
        20 4C 61 62 20 33
        20 2A
   0355 00                 2905 	.db 0x00
   0356                    2906 __str_20:
   0356 0D                 2907 	.db 0x0D
   0357 0A                 2908 	.db 0x0A
   0358 41 75 74 68 6F 72  2909 	.ascii "Author: Joey Jacobus"
        3A 20 4A 6F 65 79
        20 4A 61 63 6F 62
        75 73
   036C 00                 2910 	.db 0x00
   036D                    2911 __str_21:
   036D 0D                 2912 	.db 0x0D
   036E 0A                 2913 	.db 0x0A
   036F 4F 63 74 6F 62 65  2914 	.ascii "October 2016"
        72 20 32 30 31 36
   037B 00                 2915 	.db 0x00
   037C                    2916 __str_22:
   037C 0D                 2917 	.db 0x0D
   037D 0A                 2918 	.db 0x0A
   037E 45 6D 62 65 64 64  2919 	.ascii "Embedded Systems Design: The University of Colorado at Bou"
        65 64 20 53 79 73
        74 65 6D 73 20 44
        65 73 69 67 6E 3A
        20 54 68 65 20 55
        6E 69 76 65 72 73
        69 74 79 20 6F 66
        20 43 6F 6C 6F 72
        61 64 6F 20 61 74
        20 42 6F 75
   03B8 6C 64 65 72        2920 	.ascii "lder"
   03BC 00                 2921 	.db 0x00
   03BD                    2922 __str_23:
   03BD 0D                 2923 	.db 0x0D
   03BE 0A                 2924 	.db 0x0A
   03BF 0D                 2925 	.db 0x0D
   03C0 0A                 2926 	.db 0x0A
   03C1 00                 2927 	.db 0x00
   03C2                    2928 __str_24:
   03C2 45 6E 74 65 72 20  2929 	.ascii "Enter alpha numeric characters to store them in buffer 0"
        61 6C 70 68 61 20
        6E 75 6D 65 72 69
        63 20 63 68 61 72
        61 63 74 65 72 73
        20 74 6F 20 73 74
        6F 72 65 20 74 68
        65 6D 20 69 6E 20
        62 75 66 66 65 72
        20 30
   03FA 0D                 2930 	.db 0x0D
   03FB 0A                 2931 	.db 0x0A
   03FC 00                 2932 	.db 0x00
   03FD                    2933 __str_25:
   03FD 45 6E 74 65 72 20  2934 	.ascii "Enter a special character at any time to perform the followi"
        61 20 73 70 65 63
        69 61 6C 20 63 68
        61 72 61 63 74 65
        72 20 61 74 20 61
        6E 79 20 74 69 6D
        65 20 74 6F 20 70
        65 72 66 6F 72 6D
        20 74 68 65 20 66
        6F 6C 6C 6F 77 69
   0439 6E 67 20 6F 70 73  2935 	.ascii "ng ops:"
        3A
   0440 0D                 2936 	.db 0x0D
   0441 0A                 2937 	.db 0x0A
   0442 00                 2938 	.db 0x00
   0443                    2939 __str_26:
   0443 0D                 2940 	.db 0x0D
   0444 0A                 2941 	.db 0x0A
   0445 27 2B 27 3A 20 43  2942 	.ascii "'+': Create a new buffer"
        72 65 61 74 65 20
        61 20 6E 65 77 20
        62 75 66 66 65 72
   045D 00                 2943 	.db 0x00
   045E                    2944 __str_27:
   045E 0D                 2945 	.db 0x0D
   045F 0A                 2946 	.db 0x0A
   0460 27 2D 27 3A 20 44  2947 	.ascii "'-': Delete an existing buffer"
        65 6C 65 74 65 20
        61 6E 20 65 78 69
        73 74 69 6E 67 20
        62 75 66 66 65 72
   047E 00                 2948 	.db 0x00
   047F                    2949 __str_28:
   047F 0D                 2950 	.db 0x0D
   0480 0A                 2951 	.db 0x0A
   0481 27 3F 27 3A 20 43  2952 	.ascii "'?': Clear contents of Buffer 0 and display in ASCII forma"
        6C 65 61 72 20 63
        6F 6E 74 65 6E 74
        73 20 6F 66 20 42
        75 66 66 65 72 20
        30 20 61 6E 64 20
        64 69 73 70 6C 61
        79 20 69 6E 20 41
        53 43 49 49 20 66
        6F 72 6D 61
   04BB 74                 2953 	.ascii "t"
   04BC 00                 2954 	.db 0x00
   04BD                    2955 __str_29:
   04BD 0D                 2956 	.db 0x0D
   04BE 0A                 2957 	.db 0x0A
   04BF 27 3D 27 3A 20 53  2958 	.ascii "'=': Show contents of Buffer 0 in hexadecimal format"
        68 6F 77 20 63 6F
        6E 74 65 6E 74 73
        20 6F 66 20 42 75
        66 66 65 72 20 30
        20 69 6E 20 68 65
        78 61 64 65 63 69
        6D 61 6C 20 66 6F
        72 6D 61 74
   04F3 00                 2959 	.db 0x00
   04F4                    2960 __str_30:
   04F4 0D                 2961 	.db 0x0D
   04F5 0A                 2962 	.db 0x0A
   04F6 27 25 63 27 3A 20  2963 	.ascii "'%c': Swap the contents of Buffer 0 and Buffer 1"
        53 77 61 70 20 74
        68 65 20 63 6F 6E
        74 65 6E 74 73 20
        6F 66 20 42 75 66
        66 65 72 20 30 20
        61 6E 64 20 42 75
        66 66 65 72 20 31
   0526 00                 2964 	.db 0x00
   0527                    2965 __str_31:
   0527 0D                 2966 	.db 0x0D
   0528 0A                 2967 	.db 0x0A
   0529 27 40 27 3A 20 43  2968 	.ascii "'@': Clear buffers and restart the program"
        6C 65 61 72 20 62
        75 66 66 65 72 73
        20 61 6E 64 20 72
        65 73 74 61 72 74
        20 74 68 65 20 70
        72 6F 67 72 61 6D
   0553 00                 2969 	.db 0x00
   0554                    2970 __str_32:
   0554 0D                 2971 	.db 0x0D
   0555 0A                 2972 	.db 0x0A
   0556 45 6E 74 65 72 20  2973 	.ascii "Enter characters to add to Buffer0: "
        63 68 61 72 61 63
        74 65 72 73 20 74
        6F 20 61 64 64 20
        74 6F 20 42 75 66
        66 65 72 30 3A 20
   057A 00                 2974 	.db 0x00
   057B                    2975 __str_33:
   057B 0D                 2976 	.db 0x0D
   057C 0A                 2977 	.db 0x0A
   057D 42 75 66 66 65 72  2978 	.ascii "Buffers set up!"
        73 20 73 65 74 20
        75 70 21
   058C 00                 2979 	.db 0x00
                           2980 	.area XINIT   (CODE)
   0000                    2981 __xinit__Buffer_Size:
   0000 FF FF              2982 	.byte #0xFF,#0xFF
   0002                    2983 __xinit__Num_Buffers:
   0002 00 00              2984 	.byte #0x00,#0x00
   0004                    2985 __xinit__Num_Input_Chars:
   0004 00 00              2986 	.byte #0x00,#0x00
