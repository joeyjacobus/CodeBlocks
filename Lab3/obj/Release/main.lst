                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : FreeWare ANSI-C Compiler
                              3 ; Version 2.6.0 #4309 (Jul 28 2006)
                              4 ; This file generated Wed Oct 12 21:53:22 2016
                              5 ;--------------------------------------------------------
                              6 	.module main
                              7 	.optsdcc -mmcs51 --model-large
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _main
                             13 	.globl _displayWelcome
                             14 	.globl _FreeAll
                             15 	.globl _handleInput
                             16 	.globl _handleMinus
                             17 	.globl _handlePlus
                             18 	.globl _setupBuffers
                             19 	.globl __sdcc_external_startup
                             20 	.globl _dataout
                             21 	.globl _P5_7
                             22 	.globl _P5_6
                             23 	.globl _P5_5
                             24 	.globl _P5_4
                             25 	.globl _P5_3
                             26 	.globl _P5_2
                             27 	.globl _P5_1
                             28 	.globl _P5_0
                             29 	.globl _P4_7
                             30 	.globl _P4_6
                             31 	.globl _P4_5
                             32 	.globl _P4_4
                             33 	.globl _P4_3
                             34 	.globl _P4_2
                             35 	.globl _P4_1
                             36 	.globl _P4_0
                             37 	.globl _PX0L
                             38 	.globl _PT0L
                             39 	.globl _PX1L
                             40 	.globl _PT1L
                             41 	.globl _PLS
                             42 	.globl _PT2L
                             43 	.globl _PPCL
                             44 	.globl _EC
                             45 	.globl _CCF0
                             46 	.globl _CCF1
                             47 	.globl _CCF2
                             48 	.globl _CCF3
                             49 	.globl _CCF4
                             50 	.globl _CR
                             51 	.globl _CF
                             52 	.globl _TF2
                             53 	.globl _EXF2
                             54 	.globl _RCLK
                             55 	.globl _TCLK
                             56 	.globl _EXEN2
                             57 	.globl _TR2
                             58 	.globl _C_T2
                             59 	.globl _CP_RL2
                             60 	.globl _T2CON_7
                             61 	.globl _T2CON_6
                             62 	.globl _T2CON_5
                             63 	.globl _T2CON_4
                             64 	.globl _T2CON_3
                             65 	.globl _T2CON_2
                             66 	.globl _T2CON_1
                             67 	.globl _T2CON_0
                             68 	.globl _PT2
                             69 	.globl _ET2
                             70 	.globl _CY
                             71 	.globl _AC
                             72 	.globl _F0
                             73 	.globl _RS1
                             74 	.globl _RS0
                             75 	.globl _OV
                             76 	.globl _F1
                             77 	.globl _P
                             78 	.globl _PS
                             79 	.globl _PT1
                             80 	.globl _PX1
                             81 	.globl _PT0
                             82 	.globl _PX0
                             83 	.globl _RD
                             84 	.globl _WR
                             85 	.globl _T1
                             86 	.globl _T0
                             87 	.globl _INT1
                             88 	.globl _INT0
                             89 	.globl _TXD
                             90 	.globl _RXD
                             91 	.globl _P3_7
                             92 	.globl _P3_6
                             93 	.globl _P3_5
                             94 	.globl _P3_4
                             95 	.globl _P3_3
                             96 	.globl _P3_2
                             97 	.globl _P3_1
                             98 	.globl _P3_0
                             99 	.globl _EA
                            100 	.globl _ES
                            101 	.globl _ET1
                            102 	.globl _EX1
                            103 	.globl _ET0
                            104 	.globl _EX0
                            105 	.globl _P2_7
                            106 	.globl _P2_6
                            107 	.globl _P2_5
                            108 	.globl _P2_4
                            109 	.globl _P2_3
                            110 	.globl _P2_2
                            111 	.globl _P2_1
                            112 	.globl _P2_0
                            113 	.globl _SM0
                            114 	.globl _SM1
                            115 	.globl _SM2
                            116 	.globl _REN
                            117 	.globl _TB8
                            118 	.globl _RB8
                            119 	.globl _TI
                            120 	.globl _RI
                            121 	.globl _P1_7
                            122 	.globl _P1_6
                            123 	.globl _P1_5
                            124 	.globl _P1_4
                            125 	.globl _P1_3
                            126 	.globl _P1_2
                            127 	.globl _P1_1
                            128 	.globl _P1_0
                            129 	.globl _TF1
                            130 	.globl _TR1
                            131 	.globl _TF0
                            132 	.globl _TR0
                            133 	.globl _IE1
                            134 	.globl _IT1
                            135 	.globl _IE0
                            136 	.globl _IT0
                            137 	.globl _P0_7
                            138 	.globl _P0_6
                            139 	.globl _P0_5
                            140 	.globl _P0_4
                            141 	.globl _P0_3
                            142 	.globl _P0_2
                            143 	.globl _P0_1
                            144 	.globl _P0_0
                            145 	.globl _EECON
                            146 	.globl _KBF
                            147 	.globl _KBE
                            148 	.globl _KBLS
                            149 	.globl _BRL
                            150 	.globl _BDRCON
                            151 	.globl _T2MOD
                            152 	.globl _SPDAT
                            153 	.globl _SPSTA
                            154 	.globl _SPCON
                            155 	.globl _SADEN
                            156 	.globl _SADDR
                            157 	.globl _WDTPRG
                            158 	.globl _WDTRST
                            159 	.globl _P5
                            160 	.globl _P4
                            161 	.globl _IPH1
                            162 	.globl _IPL1
                            163 	.globl _IPH0
                            164 	.globl _IPL0
                            165 	.globl _IEN1
                            166 	.globl _IEN0
                            167 	.globl _CMOD
                            168 	.globl _CL
                            169 	.globl _CH
                            170 	.globl _CCON
                            171 	.globl _CCAPM4
                            172 	.globl _CCAPM3
                            173 	.globl _CCAPM2
                            174 	.globl _CCAPM1
                            175 	.globl _CCAPM0
                            176 	.globl _CCAP4L
                            177 	.globl _CCAP3L
                            178 	.globl _CCAP2L
                            179 	.globl _CCAP1L
                            180 	.globl _CCAP0L
                            181 	.globl _CCAP4H
                            182 	.globl _CCAP3H
                            183 	.globl _CCAP2H
                            184 	.globl _CCAP1H
                            185 	.globl _CCAP0H
                            186 	.globl _CKCKON1
                            187 	.globl _CKCKON0
                            188 	.globl _CKRL
                            189 	.globl _AUXR1
                            190 	.globl _AUXR
                            191 	.globl _TH2
                            192 	.globl _TL2
                            193 	.globl _RCAP2H
                            194 	.globl _RCAP2L
                            195 	.globl _T2CON
                            196 	.globl _B
                            197 	.globl _ACC
                            198 	.globl _PSW
                            199 	.globl _IP
                            200 	.globl _P3
                            201 	.globl _IE
                            202 	.globl _P2
                            203 	.globl _SBUF
                            204 	.globl _SCON
                            205 	.globl _P1
                            206 	.globl _TH1
                            207 	.globl _TH0
                            208 	.globl _TL1
                            209 	.globl _TL0
                            210 	.globl _TMOD
                            211 	.globl _TCON
                            212 	.globl _PCON
                            213 	.globl _DPH
                            214 	.globl _DPL
                            215 	.globl _SP
                            216 	.globl _P0
                            217 	.globl _Num_Input_Chars
                            218 	.globl _Num_Buffers
                            219 	.globl _Buffer_Size
                            220 	.globl _Buffers
                            221 	.globl _heap
                            222 	.globl _dataout_PARM_2
                            223 	.globl _Restart
                            224 	.globl _displayPrompt
                            225 ;--------------------------------------------------------
                            226 ; special function registers
                            227 ;--------------------------------------------------------
                            228 	.area RSEG    (DATA)
                    0080    229 _P0	=	0x0080
                    0081    230 _SP	=	0x0081
                    0082    231 _DPL	=	0x0082
                    0083    232 _DPH	=	0x0083
                    0087    233 _PCON	=	0x0087
                    0088    234 _TCON	=	0x0088
                    0089    235 _TMOD	=	0x0089
                    008A    236 _TL0	=	0x008a
                    008B    237 _TL1	=	0x008b
                    008C    238 _TH0	=	0x008c
                    008D    239 _TH1	=	0x008d
                    0090    240 _P1	=	0x0090
                    0098    241 _SCON	=	0x0098
                    0099    242 _SBUF	=	0x0099
                    00A0    243 _P2	=	0x00a0
                    00A8    244 _IE	=	0x00a8
                    00B0    245 _P3	=	0x00b0
                    00B8    246 _IP	=	0x00b8
                    00D0    247 _PSW	=	0x00d0
                    00E0    248 _ACC	=	0x00e0
                    00F0    249 _B	=	0x00f0
                    00C8    250 _T2CON	=	0x00c8
                    00CA    251 _RCAP2L	=	0x00ca
                    00CB    252 _RCAP2H	=	0x00cb
                    00CC    253 _TL2	=	0x00cc
                    00CD    254 _TH2	=	0x00cd
                    008E    255 _AUXR	=	0x008e
                    00A2    256 _AUXR1	=	0x00a2
                    0097    257 _CKRL	=	0x0097
                    008F    258 _CKCKON0	=	0x008f
                    008F    259 _CKCKON1	=	0x008f
                    00FA    260 _CCAP0H	=	0x00fa
                    00FB    261 _CCAP1H	=	0x00fb
                    00FC    262 _CCAP2H	=	0x00fc
                    00FD    263 _CCAP3H	=	0x00fd
                    00FE    264 _CCAP4H	=	0x00fe
                    00EA    265 _CCAP0L	=	0x00ea
                    00EB    266 _CCAP1L	=	0x00eb
                    00EC    267 _CCAP2L	=	0x00ec
                    00ED    268 _CCAP3L	=	0x00ed
                    00EE    269 _CCAP4L	=	0x00ee
                    00DA    270 _CCAPM0	=	0x00da
                    00DB    271 _CCAPM1	=	0x00db
                    00DC    272 _CCAPM2	=	0x00dc
                    00DD    273 _CCAPM3	=	0x00dd
                    00DE    274 _CCAPM4	=	0x00de
                    00D8    275 _CCON	=	0x00d8
                    00F9    276 _CH	=	0x00f9
                    00E9    277 _CL	=	0x00e9
                    00D9    278 _CMOD	=	0x00d9
                    00A8    279 _IEN0	=	0x00a8
                    00B1    280 _IEN1	=	0x00b1
                    00B8    281 _IPL0	=	0x00b8
                    00B7    282 _IPH0	=	0x00b7
                    00B2    283 _IPL1	=	0x00b2
                    00B3    284 _IPH1	=	0x00b3
                    00C0    285 _P4	=	0x00c0
                    00D8    286 _P5	=	0x00d8
                    00A6    287 _WDTRST	=	0x00a6
                    00A7    288 _WDTPRG	=	0x00a7
                    00A9    289 _SADDR	=	0x00a9
                    00B9    290 _SADEN	=	0x00b9
                    00C3    291 _SPCON	=	0x00c3
                    00C4    292 _SPSTA	=	0x00c4
                    00C5    293 _SPDAT	=	0x00c5
                    00C9    294 _T2MOD	=	0x00c9
                    009B    295 _BDRCON	=	0x009b
                    009A    296 _BRL	=	0x009a
                    009C    297 _KBLS	=	0x009c
                    009D    298 _KBE	=	0x009d
                    009E    299 _KBF	=	0x009e
                    00D2    300 _EECON	=	0x00d2
                            301 ;--------------------------------------------------------
                            302 ; special function bits
                            303 ;--------------------------------------------------------
                            304 	.area RSEG    (DATA)
                    0080    305 _P0_0	=	0x0080
                    0081    306 _P0_1	=	0x0081
                    0082    307 _P0_2	=	0x0082
                    0083    308 _P0_3	=	0x0083
                    0084    309 _P0_4	=	0x0084
                    0085    310 _P0_5	=	0x0085
                    0086    311 _P0_6	=	0x0086
                    0087    312 _P0_7	=	0x0087
                    0088    313 _IT0	=	0x0088
                    0089    314 _IE0	=	0x0089
                    008A    315 _IT1	=	0x008a
                    008B    316 _IE1	=	0x008b
                    008C    317 _TR0	=	0x008c
                    008D    318 _TF0	=	0x008d
                    008E    319 _TR1	=	0x008e
                    008F    320 _TF1	=	0x008f
                    0090    321 _P1_0	=	0x0090
                    0091    322 _P1_1	=	0x0091
                    0092    323 _P1_2	=	0x0092
                    0093    324 _P1_3	=	0x0093
                    0094    325 _P1_4	=	0x0094
                    0095    326 _P1_5	=	0x0095
                    0096    327 _P1_6	=	0x0096
                    0097    328 _P1_7	=	0x0097
                    0098    329 _RI	=	0x0098
                    0099    330 _TI	=	0x0099
                    009A    331 _RB8	=	0x009a
                    009B    332 _TB8	=	0x009b
                    009C    333 _REN	=	0x009c
                    009D    334 _SM2	=	0x009d
                    009E    335 _SM1	=	0x009e
                    009F    336 _SM0	=	0x009f
                    00A0    337 _P2_0	=	0x00a0
                    00A1    338 _P2_1	=	0x00a1
                    00A2    339 _P2_2	=	0x00a2
                    00A3    340 _P2_3	=	0x00a3
                    00A4    341 _P2_4	=	0x00a4
                    00A5    342 _P2_5	=	0x00a5
                    00A6    343 _P2_6	=	0x00a6
                    00A7    344 _P2_7	=	0x00a7
                    00A8    345 _EX0	=	0x00a8
                    00A9    346 _ET0	=	0x00a9
                    00AA    347 _EX1	=	0x00aa
                    00AB    348 _ET1	=	0x00ab
                    00AC    349 _ES	=	0x00ac
                    00AF    350 _EA	=	0x00af
                    00B0    351 _P3_0	=	0x00b0
                    00B1    352 _P3_1	=	0x00b1
                    00B2    353 _P3_2	=	0x00b2
                    00B3    354 _P3_3	=	0x00b3
                    00B4    355 _P3_4	=	0x00b4
                    00B5    356 _P3_5	=	0x00b5
                    00B6    357 _P3_6	=	0x00b6
                    00B7    358 _P3_7	=	0x00b7
                    00B0    359 _RXD	=	0x00b0
                    00B1    360 _TXD	=	0x00b1
                    00B2    361 _INT0	=	0x00b2
                    00B3    362 _INT1	=	0x00b3
                    00B4    363 _T0	=	0x00b4
                    00B5    364 _T1	=	0x00b5
                    00B6    365 _WR	=	0x00b6
                    00B7    366 _RD	=	0x00b7
                    00B8    367 _PX0	=	0x00b8
                    00B9    368 _PT0	=	0x00b9
                    00BA    369 _PX1	=	0x00ba
                    00BB    370 _PT1	=	0x00bb
                    00BC    371 _PS	=	0x00bc
                    00D0    372 _P	=	0x00d0
                    00D1    373 _F1	=	0x00d1
                    00D2    374 _OV	=	0x00d2
                    00D3    375 _RS0	=	0x00d3
                    00D4    376 _RS1	=	0x00d4
                    00D5    377 _F0	=	0x00d5
                    00D6    378 _AC	=	0x00d6
                    00D7    379 _CY	=	0x00d7
                    00AD    380 _ET2	=	0x00ad
                    00BD    381 _PT2	=	0x00bd
                    00C8    382 _T2CON_0	=	0x00c8
                    00C9    383 _T2CON_1	=	0x00c9
                    00CA    384 _T2CON_2	=	0x00ca
                    00CB    385 _T2CON_3	=	0x00cb
                    00CC    386 _T2CON_4	=	0x00cc
                    00CD    387 _T2CON_5	=	0x00cd
                    00CE    388 _T2CON_6	=	0x00ce
                    00CF    389 _T2CON_7	=	0x00cf
                    00C8    390 _CP_RL2	=	0x00c8
                    00C9    391 _C_T2	=	0x00c9
                    00CA    392 _TR2	=	0x00ca
                    00CB    393 _EXEN2	=	0x00cb
                    00CC    394 _TCLK	=	0x00cc
                    00CD    395 _RCLK	=	0x00cd
                    00CE    396 _EXF2	=	0x00ce
                    00CF    397 _TF2	=	0x00cf
                    00DF    398 _CF	=	0x00df
                    00DE    399 _CR	=	0x00de
                    00DC    400 _CCF4	=	0x00dc
                    00DB    401 _CCF3	=	0x00db
                    00DA    402 _CCF2	=	0x00da
                    00D9    403 _CCF1	=	0x00d9
                    00D8    404 _CCF0	=	0x00d8
                    00AE    405 _EC	=	0x00ae
                    00BE    406 _PPCL	=	0x00be
                    00BD    407 _PT2L	=	0x00bd
                    00BC    408 _PLS	=	0x00bc
                    00BB    409 _PT1L	=	0x00bb
                    00BA    410 _PX1L	=	0x00ba
                    00B9    411 _PT0L	=	0x00b9
                    00B8    412 _PX0L	=	0x00b8
                    00C0    413 _P4_0	=	0x00c0
                    00C1    414 _P4_1	=	0x00c1
                    00C2    415 _P4_2	=	0x00c2
                    00C3    416 _P4_3	=	0x00c3
                    00C4    417 _P4_4	=	0x00c4
                    00C5    418 _P4_5	=	0x00c5
                    00C6    419 _P4_6	=	0x00c6
                    00C7    420 _P4_7	=	0x00c7
                    00D8    421 _P5_0	=	0x00d8
                    00D9    422 _P5_1	=	0x00d9
                    00DA    423 _P5_2	=	0x00da
                    00DB    424 _P5_3	=	0x00db
                    00DC    425 _P5_4	=	0x00dc
                    00DD    426 _P5_5	=	0x00dd
                    00DE    427 _P5_6	=	0x00de
                    00DF    428 _P5_7	=	0x00df
                            429 ;--------------------------------------------------------
                            430 ; overlayable register banks
                            431 ;--------------------------------------------------------
                            432 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     433 	.ds 8
                            434 ;--------------------------------------------------------
                            435 ; internal ram data
                            436 ;--------------------------------------------------------
                            437 	.area DSEG    (DATA)
                            438 ;--------------------------------------------------------
                            439 ; overlayable items in internal ram 
                            440 ;--------------------------------------------------------
                            441 	.area OSEG    (OVR,DATA)
                            442 ;--------------------------------------------------------
                            443 ; Stack segment in internal ram 
                            444 ;--------------------------------------------------------
                            445 	.area	SSEG	(DATA)
   0000                     446 __start__stack:
   0000                     447 	.ds	1
                            448 
                            449 ;--------------------------------------------------------
                            450 ; indirectly addressable internal ram data
                            451 ;--------------------------------------------------------
                            452 	.area ISEG    (DATA)
                            453 ;--------------------------------------------------------
                            454 ; bit data
                            455 ;--------------------------------------------------------
                            456 	.area BSEG    (BIT)
   0000                     457 _Restart::
   0000                     458 	.ds 1
   0001                     459 _setupBuffers_alloc_failed_1_1:
   0001                     460 	.ds 1
   0002                     461 _setupBuffers_sloc0_1_0:
   0002                     462 	.ds 1
   0003                     463 _handlePlus_alloc_success_1_1:
   0003                     464 	.ds 1
                            465 ;--------------------------------------------------------
                            466 ; paged external ram data
                            467 ;--------------------------------------------------------
                            468 	.area PSEG    (PAG,XDATA)
                            469 ;--------------------------------------------------------
                            470 ; external ram data
                            471 ;--------------------------------------------------------
                            472 	.area XSEG    (XDATA)
   0000                     473 _dataout_PARM_2:
   0000                     474 	.ds 1
   0001                     475 _dataout_p_1_1:
   0001                     476 	.ds 2
   0003                     477 _heap::
   0003                     478 	.ds 1600
   0643                     479 _Buffers::
   0643                     480 	.ds 1200
   0AF3                     481 _setupBuffers_i_1_1:
   0AF3                     482 	.ds 2
   0AF5                     483 _handlePlus_buffer_size_1_1:
   0AF5                     484 	.ds 2
   0AF7                     485 _handleMinus_buffer_number_1_1:
   0AF7                     486 	.ds 2
   0AF9                     487 _handleInput_c_1_1:
   0AF9                     488 	.ds 1
                            489 ;--------------------------------------------------------
                            490 ; external initialized ram data
                            491 ;--------------------------------------------------------
                            492 	.area XISEG   (XDATA)
   0000                     493 _Buffer_Size::
   0000                     494 	.ds 2
   0002                     495 _Num_Buffers::
   0002                     496 	.ds 2
   0004                     497 _Num_Input_Chars::
   0004                     498 	.ds 2
                            499 	.area HOME    (CODE)
                            500 	.area GSINIT0 (CODE)
                            501 	.area GSINIT1 (CODE)
                            502 	.area GSINIT2 (CODE)
                            503 	.area GSINIT3 (CODE)
                            504 	.area GSINIT4 (CODE)
                            505 	.area GSINIT5 (CODE)
                            506 	.area GSINIT  (CODE)
                            507 	.area GSFINAL (CODE)
                            508 	.area CSEG    (CODE)
                            509 ;--------------------------------------------------------
                            510 ; interrupt vector 
                            511 ;--------------------------------------------------------
                            512 	.area HOME    (CODE)
   0000                     513 __interrupt_vect:
   0000 02s00r00            514 	ljmp	__sdcc_gsinit_startup
                            515 ;--------------------------------------------------------
                            516 ; global & static initialisations
                            517 ;--------------------------------------------------------
                            518 	.area HOME    (CODE)
                            519 	.area GSINIT  (CODE)
                            520 	.area GSFINAL (CODE)
                            521 	.area GSINIT  (CODE)
                            522 	.globl __sdcc_gsinit_startup
                            523 	.globl __sdcc_program_startup
                            524 	.globl __start__stack
                            525 	.globl __mcs51_genXINIT
                            526 	.globl __mcs51_genXRAMCLEAR
                            527 	.globl __mcs51_genRAMCLEAR
                            528 ;	main.c:47: bool Restart = false;
                            529 ;	genAssign
   0000 C2*00               530 	clr	_Restart
                            531 	.area GSFINAL (CODE)
   0000 02s00r00            532 	ljmp	__sdcc_program_startup
                            533 ;--------------------------------------------------------
                            534 ; Home
                            535 ;--------------------------------------------------------
                            536 	.area HOME    (CODE)
                            537 	.area CSEG    (CODE)
   0000                     538 __sdcc_program_startup:
   0000 12s09rA9            539 	lcall	_main
                            540 ;	return from main will lock up
   0003 80 FE               541 	sjmp .
                            542 ;--------------------------------------------------------
                            543 ; code
                            544 ;--------------------------------------------------------
                            545 	.area CSEG    (CODE)
                            546 ;------------------------------------------------------------
                            547 ;Allocation info for local variables in function 'dataout'
                            548 ;------------------------------------------------------------
                            549 ;x                         Allocated with name '_dataout_PARM_2'
                            550 ;p                         Allocated with name '_dataout_p_1_1'
                            551 ;------------------------------------------------------------
                            552 ;	main.h:14: void dataout(char xdata *p, char x){
                            553 ;	-----------------------------------------
                            554 ;	 function dataout
                            555 ;	-----------------------------------------
   0005                     556 _dataout:
                    0002    557 	ar2 = 0x02
                    0003    558 	ar3 = 0x03
                    0004    559 	ar4 = 0x04
                    0005    560 	ar5 = 0x05
                    0006    561 	ar6 = 0x06
                    0007    562 	ar7 = 0x07
                    0000    563 	ar0 = 0x00
                    0001    564 	ar1 = 0x01
                            565 ;	genReceive
   0005 AA 83               566 	mov	r2,dph
   0007 E5 82               567 	mov	a,dpl
   0009 90s00r01            568 	mov	dptr,#_dataout_p_1_1
   000C F0                  569 	movx	@dptr,a
   000D A3                  570 	inc	dptr
   000E EA                  571 	mov	a,r2
   000F F0                  572 	movx	@dptr,a
                            573 ;	main.h:15: *p = x;
                            574 ;	genAssign
   0010 90s00r01            575 	mov	dptr,#_dataout_p_1_1
   0013 E0                  576 	movx	a,@dptr
   0014 FA                  577 	mov	r2,a
   0015 A3                  578 	inc	dptr
   0016 E0                  579 	movx	a,@dptr
   0017 FB                  580 	mov	r3,a
                            581 ;	genAssign
   0018 90s00r00            582 	mov	dptr,#_dataout_PARM_2
   001B E0                  583 	movx	a,@dptr
                            584 ;	genPointerSet
                            585 ;     genFarPointerSet
   001C FC                  586 	mov	r4,a
   001D 8A 82               587 	mov	dpl,r2
   001F 8B 83               588 	mov	dph,r3
                            589 ;	Peephole 136	removed redundant move
   0021 F0                  590 	movx	@dptr,a
                            591 ;	Peephole 300	removed redundant label 00101$
   0022 22                  592 	ret
                            593 ;------------------------------------------------------------
                            594 ;Allocation info for local variables in function '_sdcc_external_startup'
                            595 ;------------------------------------------------------------
                            596 ;------------------------------------------------------------
                            597 ;	main.c:50: _sdcc_external_startup(){
                            598 ;	-----------------------------------------
                            599 ;	 function _sdcc_external_startup
                            600 ;	-----------------------------------------
   0023                     601 __sdcc_external_startup:
                            602 ;	main.c:52: AUXR |= AUXR_ENABLE_XRAM_MASK;   //Enable all XRAM
                            603 ;	genOr
   0023 43 8E 0C            604 	orl	_AUXR,#0x0C
                            605 ;	main.c:53: return 0;
                            606 ;	genRet
                            607 ;	Peephole 182.b	used 16 bit load of dptr
   0026 90 00 00            608 	mov	dptr,#0x0000
                            609 ;	Peephole 300	removed redundant label 00101$
   0029 22                  610 	ret
                            611 ;------------------------------------------------------------
                            612 ;Allocation info for local variables in function 'setupBuffers'
                            613 ;------------------------------------------------------------
                            614 ;i                         Allocated with name '_setupBuffers_i_1_1'
                            615 ;------------------------------------------------------------
                            616 ;	main.c:57: void setupBuffers(void){
                            617 ;	-----------------------------------------
                            618 ;	 function setupBuffers
                            619 ;	-----------------------------------------
   002A                     620 _setupBuffers:
                            621 ;	main.c:59: bool alloc_failed = true;
                            622 ;	genAssign
   002A D2*01               623 	setb	_setupBuffers_alloc_failed_1_1
                            624 ;	main.c:60: Buffer_Size = -1;
                            625 ;	genAssign
   002C 90s00r00            626 	mov	dptr,#_Buffer_Size
   002F 74 FF               627 	mov	a,#0xFF
   0031 F0                  628 	movx	@dptr,a
   0032 A3                  629 	inc	dptr
                            630 ;	Peephole 101	removed redundant mov
   0033 F0                  631 	movx	@dptr,a
                            632 ;	main.c:61: Num_Buffers = 0;    //Reset
                            633 ;	genAssign
   0034 90s00r02            634 	mov	dptr,#_Num_Buffers
   0037 E4                  635 	clr	a
   0038 F0                  636 	movx	@dptr,a
   0039 A3                  637 	inc	dptr
   003A F0                  638 	movx	@dptr,a
                            639 ;	main.c:62: DEBUGPORT(0x02);
                            640 ;	genAssign
   003B 90s00r00            641 	mov	dptr,#_dataout_PARM_2
   003E 74 02               642 	mov	a,#0x02
   0040 F0                  643 	movx	@dptr,a
                            644 ;	genCall
                            645 ;	Peephole 182.b	used 16 bit load of dptr
   0041 90 FF FF            646 	mov	dptr,#0xFFFF
   0044 12s00r05            647 	lcall	_dataout
                            648 ;	main.c:65: for (i = 0; i < MAX_NUM_BUFFERS; ++i){
                            649 ;	genAssign
   0047 90s0ArF3            650 	mov	dptr,#_setupBuffers_i_1_1
   004A 74 64               651 	mov	a,#0x64
   004C F0                  652 	movx	@dptr,a
   004D E4                  653 	clr	a
   004E A3                  654 	inc	dptr
   004F F0                  655 	movx	@dptr,a
   0050                     656 00125$:
                            657 ;	main.c:66: Buffers[i].in_use = false;
                            658 ;	genAssign
   0050 90s0ArF3            659 	mov	dptr,#_setupBuffers_i_1_1
   0053 E0                  660 	movx	a,@dptr
   0054 FA                  661 	mov	r2,a
   0055 A3                  662 	inc	dptr
   0056 E0                  663 	movx	a,@dptr
   0057 FB                  664 	mov	r3,a
                            665 ;	genMinus
                            666 ;	genMinusDec
   0058 1A                  667 	dec	r2
   0059 BA FF 01            668 	cjne	r2,#0xff,00141$
   005C 1B                  669 	dec	r3
   005D                     670 00141$:
                            671 ;	genAssign
   005D 90s00r00            672 	mov	dptr,#__mulint_PARM_2
   0060 74 0C               673 	mov	a,#0x0C
   0062 F0                  674 	movx	@dptr,a
   0063 E4                  675 	clr	a
   0064 A3                  676 	inc	dptr
   0065 F0                  677 	movx	@dptr,a
                            678 ;	genCall
   0066 8A 82               679 	mov	dpl,r2
   0068 8B 83               680 	mov	dph,r3
   006A C0 02               681 	push	ar2
   006C C0 03               682 	push	ar3
   006E 12s00r00            683 	lcall	__mulint
   0071 AC 82               684 	mov	r4,dpl
   0073 AD 83               685 	mov	r5,dph
   0075 D0 03               686 	pop	ar3
   0077 D0 02               687 	pop	ar2
                            688 ;	genPlus
                            689 ;	Peephole 236.g	used r4 instead of ar4
   0079 EC                  690 	mov	a,r4
   007A 24r43               691 	add	a,#_Buffers
   007C FC                  692 	mov	r4,a
                            693 ;	Peephole 236.g	used r5 instead of ar5
   007D ED                  694 	mov	a,r5
   007E 34s06               695 	addc	a,#(_Buffers >> 8)
   0080 FD                  696 	mov	r5,a
                            697 ;	genPlus
                            698 ;     genPlusIncr
   0081 74 0A               699 	mov	a,#0x0A
                            700 ;	Peephole 236.a	used r4 instead of ar4
   0083 2C                  701 	add	a,r4
   0084 F5 82               702 	mov	dpl,a
                            703 ;	Peephole 181	changed mov to clr
   0086 E4                  704 	clr	a
                            705 ;	Peephole 236.b	used r5 instead of ar5
   0087 3D                  706 	addc	a,r5
   0088 F5 83               707 	mov	dph,a
                            708 ;	genPointerSet
                            709 ;     genFarPointerSet
                            710 ;	Peephole 181	changed mov to clr
   008A E4                  711 	clr	a
   008B F0                  712 	movx	@dptr,a
   008C A3                  713 	inc	dptr
                            714 ;	Peephole 101	removed redundant mov
   008D F0                  715 	movx	@dptr,a
                            716 ;	genAssign
   008E 90s0ArF3            717 	mov	dptr,#_setupBuffers_i_1_1
   0091 EA                  718 	mov	a,r2
   0092 F0                  719 	movx	@dptr,a
   0093 A3                  720 	inc	dptr
   0094 EB                  721 	mov	a,r3
   0095 F0                  722 	movx	@dptr,a
                            723 ;	main.c:65: for (i = 0; i < MAX_NUM_BUFFERS; ++i){
                            724 ;	genAssign
   0096 90s0ArF3            725 	mov	dptr,#_setupBuffers_i_1_1
   0099 E0                  726 	movx	a,@dptr
   009A FA                  727 	mov	r2,a
   009B A3                  728 	inc	dptr
   009C E0                  729 	movx	a,@dptr
                            730 ;	genIfx
   009D FB                  731 	mov	r3,a
                            732 ;	Peephole 135	removed redundant mov
   009E 4A                  733 	orl	a,r2
                            734 ;	genIfxJump
                            735 ;	Peephole 108.b	removed ljmp by inverse jump logic
   009F 70 AF               736 	jnz	00125$
                            737 ;	Peephole 300	removed redundant label 00142$
                            738 ;	main.c:70: while (alloc_failed){
   00A1                     739 00120$:
                            740 ;	genIfx
                            741 ;	genIfxJump
   00A1 20*01 01            742 	jb	_setupBuffers_alloc_failed_1_1,00143$
                            743 ;	Peephole 251.a	replaced ljmp to ret with ret
   00A4 22                  744 	ret
   00A5                     745 00143$:
                            746 ;	main.c:73: while (Buffer_Size == -1 || Buffer_Size > BUF1_MAX_VALUE || Buffer_Size < BUF1_MIN_VALUE || (Buffer_Size & 0xF) ){
   00A5                     747 00112$:
                            748 ;	genAssign
   00A5 90s00r00            749 	mov	dptr,#_Buffer_Size
   00A8 E0                  750 	movx	a,@dptr
   00A9 FA                  751 	mov	r2,a
   00AA A3                  752 	inc	dptr
   00AB E0                  753 	movx	a,@dptr
   00AC FB                  754 	mov	r3,a
                            755 ;	genCmpEq
                            756 ;	gencjneshort
   00AD BA FF 05            757 	cjne	r2,#0xFF,00144$
   00B0 BB FF 02            758 	cjne	r3,#0xFF,00144$
                            759 ;	Peephole 112.b	changed ljmp to sjmp
   00B3 80 21               760 	sjmp	00113$
   00B5                     761 00144$:
                            762 ;	genCmpGt
                            763 ;	genCmp
   00B5 C3                  764 	clr	c
   00B6 74 40               765 	mov	a,#0x40
   00B8 9A                  766 	subb	a,r2
                            767 ;	Peephole 159	avoided xrl during execution
   00B9 74 86               768 	mov	a,#(0x06 ^ 0x80)
   00BB 8B F0               769 	mov	b,r3
   00BD 63 F0 80            770 	xrl	b,#0x80
   00C0 95 F0               771 	subb	a,b
                            772 ;	genIfxJump
                            773 ;	Peephole 112.b	changed ljmp to sjmp
                            774 ;	Peephole 160.a	removed sjmp by inverse jump logic
                            775 ;	genCmpLt
                            776 ;	genCmp
   00C2 40 12               777 	jc	00113$
                            778 ;	Peephole 300	removed redundant label 00145$
                            779 ;	Peephole 256.a	removed redundant clr c
   00C4 EA                  780 	mov	a,r2
   00C5 94 20               781 	subb	a,#0x20
   00C7 EB                  782 	mov	a,r3
   00C8 64 80               783 	xrl	a,#0x80
   00CA 94 80               784 	subb	a,#0x80
                            785 ;	genIfxJump
                            786 ;	Peephole 112.b	changed ljmp to sjmp
                            787 ;	Peephole 160.a	removed sjmp by inverse jump logic
   00CC 40 08               788 	jc	00113$
                            789 ;	Peephole 300	removed redundant label 00146$
                            790 ;	genAnd
   00CE EA                  791 	mov	a,r2
   00CF 54 0F               792 	anl	a,#0x0F
   00D1 70 03               793 	jnz	00147$
   00D3 02s01r89            794 	ljmp	00114$
   00D6                     795 00147$:
   00D6                     796 00113$:
                            797 ;	main.c:74: printf ("\r\nEnter a size for the buffers that is a multiple of 16 between %d and %d: ", BUF1_MIN_VALUE, BUF1_MAX_VALUE);
                            798 ;	genIpush
   00D6 74 40               799 	mov	a,#0x40
   00D8 C0 E0               800 	push	acc
   00DA 74 06               801 	mov	a,#0x06
   00DC C0 E0               802 	push	acc
                            803 ;	genIpush
   00DE 74 20               804 	mov	a,#0x20
   00E0 C0 E0               805 	push	acc
                            806 ;	Peephole 181	changed mov to clr
   00E2 E4                  807 	clr	a
   00E3 C0 E0               808 	push	acc
                            809 ;	genIpush
   00E5 74r00               810 	mov	a,#__str_0
   00E7 C0 E0               811 	push	acc
   00E9 74s00               812 	mov	a,#(__str_0 >> 8)
   00EB C0 E0               813 	push	acc
   00ED 74 80               814 	mov	a,#0x80
   00EF C0 E0               815 	push	acc
                            816 ;	genCall
   00F1 12s00r00            817 	lcall	_printf
   00F4 E5 81               818 	mov	a,sp
   00F6 24 F9               819 	add	a,#0xf9
   00F8 F5 81               820 	mov	sp,a
                            821 ;	main.c:75: Buffer_Size = Serial_GetInteger(BUF1_MAX_STR_LENGTH);
                            822 ;	genCall
                            823 ;	Peephole 182.b	used 16 bit load of dptr
   00FA 90 00 0A            824 	mov	dptr,#0x000A
   00FD 12s00r00            825 	lcall	_Serial_GetInteger
   0100 AC 82               826 	mov	r4,dpl
   0102 AD 83               827 	mov	r5,dph
                            828 ;	genAssign
   0104 90s00r00            829 	mov	dptr,#_Buffer_Size
   0107 EC                  830 	mov	a,r4
   0108 F0                  831 	movx	@dptr,a
   0109 A3                  832 	inc	dptr
   010A ED                  833 	mov	a,r5
   010B F0                  834 	movx	@dptr,a
                            835 ;	main.c:76: if (Buffer_Size < BUF1_MIN_VALUE){
                            836 ;	genCmpLt
                            837 ;	genCmp
   010C C3                  838 	clr	c
   010D EC                  839 	mov	a,r4
   010E 94 20               840 	subb	a,#0x20
   0110 ED                  841 	mov	a,r5
   0111 64 80               842 	xrl	a,#0x80
   0113 94 80               843 	subb	a,#0x80
                            844 ;	genIfxJump
                            845 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0115 50 1F               846 	jnc	00107$
                            847 ;	Peephole 300	removed redundant label 00148$
                            848 ;	main.c:77: printf("\r\nError. Value must be greater than %d\r\n", BUF1_MIN_VALUE);
                            849 ;	genIpush
   0117 74 20               850 	mov	a,#0x20
   0119 C0 E0               851 	push	acc
                            852 ;	Peephole 181	changed mov to clr
   011B E4                  853 	clr	a
   011C C0 E0               854 	push	acc
                            855 ;	genIpush
   011E 74r4C               856 	mov	a,#__str_1
   0120 C0 E0               857 	push	acc
   0122 74s00               858 	mov	a,#(__str_1 >> 8)
   0124 C0 E0               859 	push	acc
   0126 74 80               860 	mov	a,#0x80
   0128 C0 E0               861 	push	acc
                            862 ;	genCall
   012A 12s00r00            863 	lcall	_printf
   012D E5 81               864 	mov	a,sp
   012F 24 FB               865 	add	a,#0xfb
   0131 F5 81               866 	mov	sp,a
   0133 02s00rA5            867 	ljmp	00112$
   0136                     868 00107$:
                            869 ;	main.c:79: else if(Buffer_Size > BUF1_MAX_VALUE){
                            870 ;	genCmpGt
                            871 ;	genCmp
   0136 C3                  872 	clr	c
   0137 74 40               873 	mov	a,#0x40
   0139 9C                  874 	subb	a,r4
                            875 ;	Peephole 159	avoided xrl during execution
   013A 74 86               876 	mov	a,#(0x06 ^ 0x80)
   013C 8D F0               877 	mov	b,r5
   013E 63 F0 80            878 	xrl	b,#0x80
   0141 95 F0               879 	subb	a,b
                            880 ;	genIfxJump
                            881 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0143 50 20               882 	jnc	00104$
                            883 ;	Peephole 300	removed redundant label 00149$
                            884 ;	main.c:80: printf("\r\nError. Value must be less than %d\r\n", BUF1_MAX_VALUE);
                            885 ;	genIpush
   0145 74 40               886 	mov	a,#0x40
   0147 C0 E0               887 	push	acc
   0149 74 06               888 	mov	a,#0x06
   014B C0 E0               889 	push	acc
                            890 ;	genIpush
   014D 74r75               891 	mov	a,#__str_2
   014F C0 E0               892 	push	acc
   0151 74s00               893 	mov	a,#(__str_2 >> 8)
   0153 C0 E0               894 	push	acc
   0155 74 80               895 	mov	a,#0x80
   0157 C0 E0               896 	push	acc
                            897 ;	genCall
   0159 12s00r00            898 	lcall	_printf
   015C E5 81               899 	mov	a,sp
   015E 24 FB               900 	add	a,#0xfb
   0160 F5 81               901 	mov	sp,a
   0162 02s00rA5            902 	ljmp	00112$
   0165                     903 00104$:
                            904 ;	main.c:83: else if (Buffer_Size & 0xF){
                            905 ;	genAnd
   0165 EC                  906 	mov	a,r4
   0166 54 0F               907 	anl	a,#0x0F
   0168 70 03               908 	jnz	00150$
   016A 02s00rA5            909 	ljmp	00112$
   016D                     910 00150$:
                            911 ;	main.c:84: printf ("\r\nError. Buffer Size must be a multiple of 16\r\n", Buffer_Size);
                            912 ;	genIpush
   016D C0 04               913 	push	ar4
   016F C0 05               914 	push	ar5
                            915 ;	genIpush
   0171 74r9B               916 	mov	a,#__str_3
   0173 C0 E0               917 	push	acc
   0175 74s00               918 	mov	a,#(__str_3 >> 8)
   0177 C0 E0               919 	push	acc
   0179 74 80               920 	mov	a,#0x80
   017B C0 E0               921 	push	acc
                            922 ;	genCall
   017D 12s00r00            923 	lcall	_printf
   0180 E5 81               924 	mov	a,sp
   0182 24 FB               925 	add	a,#0xfb
   0184 F5 81               926 	mov	sp,a
   0186 02s00rA5            927 	ljmp	00112$
   0189                     928 00114$:
                            929 ;	main.c:88: alloc_failed = !Buffer_Init(&Buffers[Num_Buffers], Buffer_Size, 0);
                            930 ;	genAssign
   0189 90s00r02            931 	mov	dptr,#_Num_Buffers
   018C E0                  932 	movx	a,@dptr
   018D FC                  933 	mov	r4,a
   018E A3                  934 	inc	dptr
   018F E0                  935 	movx	a,@dptr
   0190 FD                  936 	mov	r5,a
                            937 ;	genAssign
   0191 90s00r00            938 	mov	dptr,#__mulint_PARM_2
   0194 74 0C               939 	mov	a,#0x0C
   0196 F0                  940 	movx	@dptr,a
   0197 E4                  941 	clr	a
   0198 A3                  942 	inc	dptr
   0199 F0                  943 	movx	@dptr,a
                            944 ;	genCall
   019A 8C 82               945 	mov	dpl,r4
   019C 8D 83               946 	mov	dph,r5
   019E C0 02               947 	push	ar2
   01A0 C0 03               948 	push	ar3
   01A2 12s00r00            949 	lcall	__mulint
   01A5 AC 82               950 	mov	r4,dpl
   01A7 AD 83               951 	mov	r5,dph
   01A9 D0 03               952 	pop	ar3
   01AB D0 02               953 	pop	ar2
                            954 ;	genPlus
                            955 ;	Peephole 236.g	used r4 instead of ar4
   01AD EC                  956 	mov	a,r4
   01AE 24r43               957 	add	a,#_Buffers
   01B0 FC                  958 	mov	r4,a
                            959 ;	Peephole 236.g	used r5 instead of ar5
   01B1 ED                  960 	mov	a,r5
   01B2 34s06               961 	addc	a,#(_Buffers >> 8)
   01B4 FD                  962 	mov	r5,a
                            963 ;	genCast
   01B5 7E 00               964 	mov	r6,#0x0
                            965 ;	genAssign
   01B7 90s00r00            966 	mov	dptr,#_Buffer_Init_PARM_2
   01BA EA                  967 	mov	a,r2
   01BB F0                  968 	movx	@dptr,a
   01BC A3                  969 	inc	dptr
   01BD EB                  970 	mov	a,r3
   01BE F0                  971 	movx	@dptr,a
                            972 ;	genAssign
   01BF 90s00r00            973 	mov	dptr,#_Buffer_Init_PARM_3
   01C2 E4                  974 	clr	a
   01C3 F0                  975 	movx	@dptr,a
   01C4 A3                  976 	inc	dptr
   01C5 F0                  977 	movx	@dptr,a
                            978 ;	genCall
   01C6 8C 82               979 	mov	dpl,r4
   01C8 8D 83               980 	mov	dph,r5
   01CA 8E F0               981 	mov	b,r6
   01CC 12s00r00            982 	lcall	_Buffer_Init
   01CF 92*02               983 	mov	_setupBuffers_sloc0_1_0,c
                            984 ;	genNot
   01D1 A2*02               985 	mov	c,_setupBuffers_sloc0_1_0
   01D3 B3                  986 	cpl	c
   01D4 92*01               987 	mov	_setupBuffers_alloc_failed_1_1,c
                            988 ;	main.c:89: Num_Buffers++;
                            989 ;	genAssign
   01D6 90s00r02            990 	mov	dptr,#_Num_Buffers
   01D9 E0                  991 	movx	a,@dptr
   01DA FA                  992 	mov	r2,a
   01DB A3                  993 	inc	dptr
   01DC E0                  994 	movx	a,@dptr
   01DD FB                  995 	mov	r3,a
                            996 ;	genPlus
   01DE 90s00r02            997 	mov	dptr,#_Num_Buffers
                            998 ;     genPlusIncr
   01E1 74 01               999 	mov	a,#0x01
                           1000 ;	Peephole 236.a	used r2 instead of ar2
   01E3 2A                 1001 	add	a,r2
   01E4 F0                 1002 	movx	@dptr,a
                           1003 ;	Peephole 181	changed mov to clr
   01E5 E4                 1004 	clr	a
                           1005 ;	Peephole 236.b	used r3 instead of ar3
   01E6 3B                 1006 	addc	a,r3
   01E7 A3                 1007 	inc	dptr
   01E8 F0                 1008 	movx	@dptr,a
                           1009 ;	main.c:90: if (!alloc_failed){
                           1010 ;	genIfx
                           1011 ;	genIfxJump
                           1012 ;	Peephole 108.e	removed ljmp by inverse jump logic
   01E9 20*01 62           1013 	jb	_setupBuffers_alloc_failed_1_1,00116$
                           1014 ;	Peephole 300	removed redundant label 00151$
                           1015 ;	main.c:91: alloc_failed = !Buffer_Init(&Buffers[Num_Buffers], Buffer_Size, 1);
                           1016 ;	genAssign
   01EC 90s00r02           1017 	mov	dptr,#_Num_Buffers
   01EF E0                 1018 	movx	a,@dptr
   01F0 FA                 1019 	mov	r2,a
   01F1 A3                 1020 	inc	dptr
   01F2 E0                 1021 	movx	a,@dptr
   01F3 FB                 1022 	mov	r3,a
                           1023 ;	genAssign
   01F4 90s00r00           1024 	mov	dptr,#__mulint_PARM_2
   01F7 74 0C              1025 	mov	a,#0x0C
   01F9 F0                 1026 	movx	@dptr,a
   01FA E4                 1027 	clr	a
   01FB A3                 1028 	inc	dptr
   01FC F0                 1029 	movx	@dptr,a
                           1030 ;	genCall
   01FD 8A 82              1031 	mov	dpl,r2
   01FF 8B 83              1032 	mov	dph,r3
   0201 12s00r00           1033 	lcall	__mulint
   0204 AA 82              1034 	mov	r2,dpl
   0206 AB 83              1035 	mov	r3,dph
                           1036 ;	genPlus
                           1037 ;	Peephole 236.g	used r2 instead of ar2
   0208 EA                 1038 	mov	a,r2
   0209 24r43              1039 	add	a,#_Buffers
   020B FA                 1040 	mov	r2,a
                           1041 ;	Peephole 236.g	used r3 instead of ar3
   020C EB                 1042 	mov	a,r3
   020D 34s06              1043 	addc	a,#(_Buffers >> 8)
   020F FB                 1044 	mov	r3,a
                           1045 ;	genCast
   0210 7C 00              1046 	mov	r4,#0x0
                           1047 ;	genAssign
   0212 90s00r00           1048 	mov	dptr,#_Buffer_Size
   0215 E0                 1049 	movx	a,@dptr
   0216 FD                 1050 	mov	r5,a
   0217 A3                 1051 	inc	dptr
   0218 E0                 1052 	movx	a,@dptr
   0219 FE                 1053 	mov	r6,a
                           1054 ;	genAssign
   021A 90s00r00           1055 	mov	dptr,#_Buffer_Init_PARM_2
   021D ED                 1056 	mov	a,r5
   021E F0                 1057 	movx	@dptr,a
   021F A3                 1058 	inc	dptr
   0220 EE                 1059 	mov	a,r6
   0221 F0                 1060 	movx	@dptr,a
                           1061 ;	genAssign
   0222 90s00r00           1062 	mov	dptr,#_Buffer_Init_PARM_3
   0225 74 01              1063 	mov	a,#0x01
   0227 F0                 1064 	movx	@dptr,a
   0228 E4                 1065 	clr	a
   0229 A3                 1066 	inc	dptr
   022A F0                 1067 	movx	@dptr,a
                           1068 ;	genCall
   022B 8A 82              1069 	mov	dpl,r2
   022D 8B 83              1070 	mov	dph,r3
   022F 8C F0              1071 	mov	b,r4
   0231 12s00r00           1072 	lcall	_Buffer_Init
   0234 92*02              1073 	mov	_setupBuffers_sloc0_1_0,c
                           1074 ;	genNot
   0236 A2*02              1075 	mov	c,_setupBuffers_sloc0_1_0
   0238 B3                 1076 	cpl	c
   0239 92*01              1077 	mov	_setupBuffers_alloc_failed_1_1,c
                           1078 ;	main.c:92: Num_Buffers++;
                           1079 ;	genAssign
   023B 90s00r02           1080 	mov	dptr,#_Num_Buffers
   023E E0                 1081 	movx	a,@dptr
   023F FA                 1082 	mov	r2,a
   0240 A3                 1083 	inc	dptr
   0241 E0                 1084 	movx	a,@dptr
   0242 FB                 1085 	mov	r3,a
                           1086 ;	genPlus
   0243 90s00r02           1087 	mov	dptr,#_Num_Buffers
                           1088 ;     genPlusIncr
   0246 74 01              1089 	mov	a,#0x01
                           1090 ;	Peephole 236.a	used r2 instead of ar2
   0248 2A                 1091 	add	a,r2
   0249 F0                 1092 	movx	@dptr,a
                           1093 ;	Peephole 181	changed mov to clr
   024A E4                 1094 	clr	a
                           1095 ;	Peephole 236.b	used r3 instead of ar3
   024B 3B                 1096 	addc	a,r3
   024C A3                 1097 	inc	dptr
   024D F0                 1098 	movx	@dptr,a
   024E                    1099 00116$:
                           1100 ;	main.c:95: if (!alloc_failed)
                           1101 ;	genIfx
                           1102 ;	genIfxJump
                           1103 ;	Peephole 108.e	removed ljmp by inverse jump logic
   024E 20*01 42           1104 	jb	_setupBuffers_alloc_failed_1_1,00118$
                           1105 ;	Peephole 300	removed redundant label 00152$
                           1106 ;	main.c:96: printf ("\r\nBuffers of size: %d allocated at addresses: %p and %p\r\n", Buffer_Size, Buffers[0].buf_start, Buffers[1].buf_start);
                           1107 ;	genPointerGet
                           1108 ;	genFarPointerGet
   0251 90s06r4F           1109 	mov	dptr,#(_Buffers + 0x000c)
   0254 E0                 1110 	movx	a,@dptr
   0255 FA                 1111 	mov	r2,a
   0256 A3                 1112 	inc	dptr
   0257 E0                 1113 	movx	a,@dptr
   0258 FB                 1114 	mov	r3,a
                           1115 ;	genCast
   0259 7C 00              1116 	mov	r4,#0x0
                           1117 ;	genPointerGet
                           1118 ;	genFarPointerGet
   025B 90s06r43           1119 	mov	dptr,#_Buffers
   025E E0                 1120 	movx	a,@dptr
   025F FD                 1121 	mov	r5,a
   0260 A3                 1122 	inc	dptr
   0261 E0                 1123 	movx	a,@dptr
   0262 FE                 1124 	mov	r6,a
                           1125 ;	genCast
   0263 7F 00              1126 	mov	r7,#0x0
                           1127 ;	genIpush
   0265 C0 02              1128 	push	ar2
   0267 C0 03              1129 	push	ar3
   0269 C0 04              1130 	push	ar4
                           1131 ;	genIpush
   026B C0 05              1132 	push	ar5
   026D C0 06              1133 	push	ar6
   026F C0 07              1134 	push	ar7
                           1135 ;	genIpush
   0271 90s00r00           1136 	mov	dptr,#_Buffer_Size
   0274 E0                 1137 	movx	a,@dptr
   0275 C0 E0              1138 	push	acc
   0277 A3                 1139 	inc	dptr
   0278 E0                 1140 	movx	a,@dptr
   0279 C0 E0              1141 	push	acc
                           1142 ;	genIpush
   027B 74rCB              1143 	mov	a,#__str_4
   027D C0 E0              1144 	push	acc
   027F 74s00              1145 	mov	a,#(__str_4 >> 8)
   0281 C0 E0              1146 	push	acc
   0283 74 80              1147 	mov	a,#0x80
   0285 C0 E0              1148 	push	acc
                           1149 ;	genCall
   0287 12s00r00           1150 	lcall	_printf
   028A E5 81              1151 	mov	a,sp
   028C 24 F5              1152 	add	a,#0xf5
   028E F5 81              1153 	mov	sp,a
   0290 02s00rA1           1154 	ljmp	00120$
   0293                    1155 00118$:
                           1156 ;	main.c:98: printf("\r\nMalloc failed for buffer size %d, choose something smaller\r\n", Buffer_Size);
                           1157 ;	genIpush
   0293 90s00r00           1158 	mov	dptr,#_Buffer_Size
   0296 E0                 1159 	movx	a,@dptr
   0297 C0 E0              1160 	push	acc
   0299 A3                 1161 	inc	dptr
   029A E0                 1162 	movx	a,@dptr
   029B C0 E0              1163 	push	acc
                           1164 ;	genIpush
   029D 74r05              1165 	mov	a,#__str_5
   029F C0 E0              1166 	push	acc
   02A1 74s01              1167 	mov	a,#(__str_5 >> 8)
   02A3 C0 E0              1168 	push	acc
   02A5 74 80              1169 	mov	a,#0x80
   02A7 C0 E0              1170 	push	acc
                           1171 ;	genCall
   02A9 12s00r00           1172 	lcall	_printf
   02AC E5 81              1173 	mov	a,sp
   02AE 24 FB              1174 	add	a,#0xfb
   02B0 F5 81              1175 	mov	sp,a
                           1176 ;	main.c:100: Buffer_Free(&Buffers[0]);
                           1177 ;	genCall
                           1178 ;	Peephole 182.a	used 16 bit load of DPTR
   02B2 90s06r43           1179 	mov	dptr,#_Buffers
   02B5 75 F0 00           1180 	mov	b,#0x00
   02B8 12s00r00           1181 	lcall	_Buffer_Free
                           1182 ;	main.c:101: Buffer_Free(&Buffers[1]);
                           1183 ;	genCall
                           1184 ;	Peephole 182.a	used 16 bit load of DPTR
   02BB 90s06r4F           1185 	mov	dptr,#(_Buffers + 0x000c)
   02BE 75 F0 00           1186 	mov	b,#0x00
   02C1 12s00r00           1187 	lcall	_Buffer_Free
                           1188 ;	main.c:102: Num_Buffers = 0;
                           1189 ;	genAssign
   02C4 90s00r02           1190 	mov	dptr,#_Num_Buffers
   02C7 E4                 1191 	clr	a
   02C8 F0                 1192 	movx	@dptr,a
   02C9 A3                 1193 	inc	dptr
   02CA F0                 1194 	movx	@dptr,a
                           1195 ;	main.c:103: Buffer_Size = 0;    //Reset so it will ask again
                           1196 ;	genAssign
   02CB 90s00r00           1197 	mov	dptr,#_Buffer_Size
   02CE E4                 1198 	clr	a
   02CF F0                 1199 	movx	@dptr,a
   02D0 A3                 1200 	inc	dptr
   02D1 F0                 1201 	movx	@dptr,a
   02D2 02s00rA1           1202 	ljmp	00120$
                           1203 ;	Peephole 259.b	removed redundant label 00126$ and ret
                           1204 ;
                           1205 ;------------------------------------------------------------
                           1206 ;Allocation info for local variables in function 'handlePlus'
                           1207 ;------------------------------------------------------------
                           1208 ;buffer_size               Allocated with name '_handlePlus_buffer_size_1_1'
                           1209 ;first_free_buffer_index   Allocated with name '_handlePlus_first_free_buffer_index_1_1'
                           1210 ;------------------------------------------------------------
                           1211 ;	main.c:109: void handlePlus(void){
                           1212 ;	-----------------------------------------
                           1213 ;	 function handlePlus
                           1214 ;	-----------------------------------------
   02D5                    1215 _handlePlus:
                           1216 ;	main.c:111: int buffer_size = -1;
                           1217 ;	genAssign
   02D5 90s0ArF5           1218 	mov	dptr,#_handlePlus_buffer_size_1_1
   02D8 74 FF              1219 	mov	a,#0xFF
   02DA F0                 1220 	movx	@dptr,a
   02DB A3                 1221 	inc	dptr
                           1222 ;	Peephole 101	removed redundant mov
   02DC F0                 1223 	movx	@dptr,a
                           1224 ;	main.c:114: while (buffer_size == -1 || buffer_size > NEW_BUF_MAX_VALUE || buffer_size < NEW_BUF_MIN_VALUE ){
   02DD                    1225 00108$:
                           1226 ;	genAssign
   02DD 90s0ArF5           1227 	mov	dptr,#_handlePlus_buffer_size_1_1
   02E0 E0                 1228 	movx	a,@dptr
   02E1 FA                 1229 	mov	r2,a
   02E2 A3                 1230 	inc	dptr
   02E3 E0                 1231 	movx	a,@dptr
   02E4 FB                 1232 	mov	r3,a
                           1233 ;	genCmpEq
                           1234 ;	gencjneshort
   02E5 BA FF 05           1235 	cjne	r2,#0xFF,00130$
   02E8 BB FF 02           1236 	cjne	r3,#0xFF,00130$
                           1237 ;	Peephole 112.b	changed ljmp to sjmp
   02EB 80 1C              1238 	sjmp	00109$
   02ED                    1239 00130$:
                           1240 ;	genCmpGt
                           1241 ;	genCmp
   02ED C3                 1242 	clr	c
   02EE 74 90              1243 	mov	a,#0x90
   02F0 9A                 1244 	subb	a,r2
                           1245 ;	Peephole 159	avoided xrl during execution
   02F1 74 81              1246 	mov	a,#(0x01 ^ 0x80)
   02F3 8B F0              1247 	mov	b,r3
   02F5 63 F0 80           1248 	xrl	b,#0x80
   02F8 95 F0              1249 	subb	a,b
                           1250 ;	genIfxJump
                           1251 ;	Peephole 112.b	changed ljmp to sjmp
                           1252 ;	Peephole 160.a	removed sjmp by inverse jump logic
                           1253 ;	genCmpLt
                           1254 ;	genCmp
   02FA 40 0D              1255 	jc	00109$
                           1256 ;	Peephole 300	removed redundant label 00131$
                           1257 ;	Peephole 256.a	removed redundant clr c
   02FC EA                 1258 	mov	a,r2
   02FD 94 14              1259 	subb	a,#0x14
   02FF EB                 1260 	mov	a,r3
   0300 64 80              1261 	xrl	a,#0x80
   0302 94 80              1262 	subb	a,#0x80
                           1263 ;	genIfxJump
   0304 40 03              1264 	jc	00132$
   0306 02s03r9B           1265 	ljmp	00127$
   0309                    1266 00132$:
   0309                    1267 00109$:
                           1268 ;	main.c:115: printf ("\r\nEnter a size for the new buffer between %d and %d: ", NEW_BUF_MIN_VALUE, NEW_BUF_MAX_VALUE);
                           1269 ;	genIpush
   0309 74 90              1270 	mov	a,#0x90
   030B C0 E0              1271 	push	acc
   030D 74 01              1272 	mov	a,#0x01
   030F C0 E0              1273 	push	acc
                           1274 ;	genIpush
   0311 74 14              1275 	mov	a,#0x14
   0313 C0 E0              1276 	push	acc
                           1277 ;	Peephole 181	changed mov to clr
   0315 E4                 1278 	clr	a
   0316 C0 E0              1279 	push	acc
                           1280 ;	genIpush
   0318 74r44              1281 	mov	a,#__str_6
   031A C0 E0              1282 	push	acc
   031C 74s01              1283 	mov	a,#(__str_6 >> 8)
   031E C0 E0              1284 	push	acc
   0320 74 80              1285 	mov	a,#0x80
   0322 C0 E0              1286 	push	acc
                           1287 ;	genCall
   0324 12s00r00           1288 	lcall	_printf
   0327 E5 81              1289 	mov	a,sp
   0329 24 F9              1290 	add	a,#0xf9
   032B F5 81              1291 	mov	sp,a
                           1292 ;	main.c:116: buffer_size = Serial_GetInteger(BUF1_MAX_STR_LENGTH);
                           1293 ;	genCall
                           1294 ;	Peephole 182.b	used 16 bit load of dptr
   032D 90 00 0A           1295 	mov	dptr,#0x000A
   0330 12s00r00           1296 	lcall	_Serial_GetInteger
   0333 AA 82              1297 	mov	r2,dpl
   0335 AB 83              1298 	mov	r3,dph
                           1299 ;	genAssign
   0337 90s0ArF5           1300 	mov	dptr,#_handlePlus_buffer_size_1_1
   033A EA                 1301 	mov	a,r2
   033B F0                 1302 	movx	@dptr,a
   033C A3                 1303 	inc	dptr
   033D EB                 1304 	mov	a,r3
   033E F0                 1305 	movx	@dptr,a
                           1306 ;	main.c:117: if (buffer_size < NEW_BUF_MIN_VALUE){
                           1307 ;	genCmpLt
                           1308 ;	genCmp
   033F C3                 1309 	clr	c
   0340 EA                 1310 	mov	a,r2
   0341 94 14              1311 	subb	a,#0x14
   0343 EB                 1312 	mov	a,r3
   0344 64 80              1313 	xrl	a,#0x80
   0346 94 80              1314 	subb	a,#0x80
                           1315 ;	genIfxJump
                           1316 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0348 50 1F              1317 	jnc	00104$
                           1318 ;	Peephole 300	removed redundant label 00133$
                           1319 ;	main.c:118: printf("\r\nError. Value must be greater than %d\r\n", NEW_BUF_MIN_VALUE);
                           1320 ;	genIpush
   034A 74 14              1321 	mov	a,#0x14
   034C C0 E0              1322 	push	acc
                           1323 ;	Peephole 181	changed mov to clr
   034E E4                 1324 	clr	a
   034F C0 E0              1325 	push	acc
                           1326 ;	genIpush
   0351 74r4C              1327 	mov	a,#__str_1
   0353 C0 E0              1328 	push	acc
   0355 74s00              1329 	mov	a,#(__str_1 >> 8)
   0357 C0 E0              1330 	push	acc
   0359 74 80              1331 	mov	a,#0x80
   035B C0 E0              1332 	push	acc
                           1333 ;	genCall
   035D 12s00r00           1334 	lcall	_printf
   0360 E5 81              1335 	mov	a,sp
   0362 24 FB              1336 	add	a,#0xfb
   0364 F5 81              1337 	mov	sp,a
   0366 02s02rDD           1338 	ljmp	00108$
   0369                    1339 00104$:
                           1340 ;	main.c:120: else if(buffer_size > NEW_BUF_MAX_VALUE){
                           1341 ;	genCmpGt
                           1342 ;	genCmp
   0369 C3                 1343 	clr	c
   036A 74 90              1344 	mov	a,#0x90
   036C 9A                 1345 	subb	a,r2
                           1346 ;	Peephole 159	avoided xrl during execution
   036D 74 81              1347 	mov	a,#(0x01 ^ 0x80)
   036F 8B F0              1348 	mov	b,r3
   0371 63 F0 80           1349 	xrl	b,#0x80
   0374 95 F0              1350 	subb	a,b
                           1351 ;	genIfxJump
   0376 40 03              1352 	jc	00134$
   0378 02s02rDD           1353 	ljmp	00108$
   037B                    1354 00134$:
                           1355 ;	main.c:121: printf("\r\nError. Value must be less than %d\r\n", NEW_BUF_MAX_VALUE);
                           1356 ;	genIpush
   037B 74 90              1357 	mov	a,#0x90
   037D C0 E0              1358 	push	acc
   037F 74 01              1359 	mov	a,#0x01
   0381 C0 E0              1360 	push	acc
                           1361 ;	genIpush
   0383 74r75              1362 	mov	a,#__str_2
   0385 C0 E0              1363 	push	acc
   0387 74s00              1364 	mov	a,#(__str_2 >> 8)
   0389 C0 E0              1365 	push	acc
   038B 74 80              1366 	mov	a,#0x80
   038D C0 E0              1367 	push	acc
                           1368 ;	genCall
   038F 12s00r00           1369 	lcall	_printf
   0392 E5 81              1370 	mov	a,sp
   0394 24 FB              1371 	add	a,#0xfb
   0396 F5 81              1372 	mov	sp,a
   0398 02s02rDD           1373 	ljmp	00108$
                           1374 ;	main.c:126: while(Buffers[first_free_buffer_index].in_use){
   039B                    1375 00127$:
                           1376 ;	genAssign
   039B 7A 01              1377 	mov	r2,#0x01
   039D 7B 00              1378 	mov	r3,#0x00
   039F                    1379 00113$:
                           1380 ;	genAssign
   039F 90s00r00           1381 	mov	dptr,#__mulint_PARM_2
   03A2 74 0C              1382 	mov	a,#0x0C
   03A4 F0                 1383 	movx	@dptr,a
   03A5 E4                 1384 	clr	a
   03A6 A3                 1385 	inc	dptr
   03A7 F0                 1386 	movx	@dptr,a
                           1387 ;	genCall
   03A8 8A 82              1388 	mov	dpl,r2
   03AA 8B 83              1389 	mov	dph,r3
   03AC C0 02              1390 	push	ar2
   03AE C0 03              1391 	push	ar3
   03B0 12s00r00           1392 	lcall	__mulint
   03B3 AC 82              1393 	mov	r4,dpl
   03B5 AD 83              1394 	mov	r5,dph
   03B7 D0 03              1395 	pop	ar3
   03B9 D0 02              1396 	pop	ar2
                           1397 ;	genPlus
                           1398 ;	Peephole 236.g	used r4 instead of ar4
   03BB EC                 1399 	mov	a,r4
   03BC 24r43              1400 	add	a,#_Buffers
   03BE FC                 1401 	mov	r4,a
                           1402 ;	Peephole 236.g	used r5 instead of ar5
   03BF ED                 1403 	mov	a,r5
   03C0 34s06              1404 	addc	a,#(_Buffers >> 8)
   03C2 FD                 1405 	mov	r5,a
                           1406 ;	genPlus
                           1407 ;     genPlusIncr
   03C3 74 0A              1408 	mov	a,#0x0A
                           1409 ;	Peephole 236.a	used r4 instead of ar4
   03C5 2C                 1410 	add	a,r4
   03C6 F5 82              1411 	mov	dpl,a
                           1412 ;	Peephole 181	changed mov to clr
   03C8 E4                 1413 	clr	a
                           1414 ;	Peephole 236.b	used r5 instead of ar5
   03C9 3D                 1415 	addc	a,r5
   03CA F5 83              1416 	mov	dph,a
                           1417 ;	genPointerGet
                           1418 ;	genFarPointerGet
   03CC E0                 1419 	movx	a,@dptr
   03CD FE                 1420 	mov	r6,a
   03CE A3                 1421 	inc	dptr
   03CF E0                 1422 	movx	a,@dptr
                           1423 ;	genIfx
   03D0 FF                 1424 	mov	r7,a
                           1425 ;	Peephole 135	removed redundant mov
   03D1 4E                 1426 	orl	a,r6
                           1427 ;	genIfxJump
                           1428 ;	Peephole 108.c	removed ljmp by inverse jump logic
   03D2 60 2A              1429 	jz	00115$
                           1430 ;	Peephole 300	removed redundant label 00135$
                           1431 ;	main.c:127: first_free_buffer_index++;
                           1432 ;	genPlus
                           1433 ;     genPlusIncr
   03D4 0A                 1434 	inc	r2
   03D5 BA 00 01           1435 	cjne	r2,#0x00,00136$
   03D8 0B                 1436 	inc	r3
   03D9                    1437 00136$:
                           1438 ;	main.c:128: if (first_free_buffer_index > MAX_NUM_BUFFERS) {
                           1439 ;	genCmpGt
                           1440 ;	genCmp
   03D9 C3                 1441 	clr	c
   03DA 74 64              1442 	mov	a,#0x64
   03DC 9A                 1443 	subb	a,r2
                           1444 ;	Peephole 159	avoided xrl during execution
   03DD 74 80              1445 	mov	a,#(0x00 ^ 0x80)
   03DF 8B F0              1446 	mov	b,r3
   03E1 63 F0 80           1447 	xrl	b,#0x80
   03E4 95 F0              1448 	subb	a,b
                           1449 ;	genIfxJump
                           1450 ;	Peephole 108.a	removed ljmp by inverse jump logic
   03E6 50 B7              1451 	jnc	00113$
                           1452 ;	Peephole 300	removed redundant label 00137$
                           1453 ;	main.c:129: printf ("\r\nOut of possible buffers. Allocation failed");
                           1454 ;	genIpush
   03E8 74r7A              1455 	mov	a,#__str_7
   03EA C0 E0              1456 	push	acc
   03EC 74s01              1457 	mov	a,#(__str_7 >> 8)
   03EE C0 E0              1458 	push	acc
   03F0 74 80              1459 	mov	a,#0x80
   03F2 C0 E0              1460 	push	acc
                           1461 ;	genCall
   03F4 12s00r00           1462 	lcall	_printf
   03F7 15 81              1463 	dec	sp
   03F9 15 81              1464 	dec	sp
   03FB 15 81              1465 	dec	sp
                           1466 ;	main.c:130: return;
                           1467 ;	genRet
                           1468 ;	Peephole 251.a	replaced ljmp to ret with ret
   03FD 22                 1469 	ret
   03FE                    1470 00115$:
                           1471 ;	main.c:133: alloc_success = Buffer_Init(&Buffers[first_free_buffer_index], buffer_size, first_free_buffer_index);
                           1472 ;	genAssign
                           1473 ;	genCast
   03FE 7E 00              1474 	mov	r6,#0x0
                           1475 ;	genAssign
   0400 90s0ArF5           1476 	mov	dptr,#_handlePlus_buffer_size_1_1
   0403 E0                 1477 	movx	a,@dptr
   0404 FF                 1478 	mov	r7,a
   0405 A3                 1479 	inc	dptr
   0406 E0                 1480 	movx	a,@dptr
   0407 F8                 1481 	mov	r0,a
                           1482 ;	genAssign
   0408 90s00r00           1483 	mov	dptr,#_Buffer_Init_PARM_2
   040B EF                 1484 	mov	a,r7
   040C F0                 1485 	movx	@dptr,a
   040D A3                 1486 	inc	dptr
   040E E8                 1487 	mov	a,r0
   040F F0                 1488 	movx	@dptr,a
                           1489 ;	genAssign
   0410 90s00r00           1490 	mov	dptr,#_Buffer_Init_PARM_3
   0413 EA                 1491 	mov	a,r2
   0414 F0                 1492 	movx	@dptr,a
   0415 A3                 1493 	inc	dptr
   0416 EB                 1494 	mov	a,r3
   0417 F0                 1495 	movx	@dptr,a
                           1496 ;	genCall
   0418 8C 82              1497 	mov	dpl,r4
   041A 8D 83              1498 	mov	dph,r5
   041C 8E F0              1499 	mov	b,r6
   041E C0 02              1500 	push	ar2
   0420 C0 03              1501 	push	ar3
   0422 C0 07              1502 	push	ar7
   0424 C0 00              1503 	push	ar0
   0426 12s00r00           1504 	lcall	_Buffer_Init
   0429 D0 00              1505 	pop	ar0
   042B D0 07              1506 	pop	ar7
   042D D0 03              1507 	pop	ar3
   042F D0 02              1508 	pop	ar2
   0431 92*03              1509 	mov	_handlePlus_alloc_success_1_1,c
                           1510 ;	main.c:134: Num_Buffers++;
                           1511 ;	genAssign
   0433 90s00r02           1512 	mov	dptr,#_Num_Buffers
   0436 E0                 1513 	movx	a,@dptr
   0437 FC                 1514 	mov	r4,a
   0438 A3                 1515 	inc	dptr
   0439 E0                 1516 	movx	a,@dptr
   043A FD                 1517 	mov	r5,a
                           1518 ;	genPlus
   043B 90s00r02           1519 	mov	dptr,#_Num_Buffers
                           1520 ;     genPlusIncr
   043E 74 01              1521 	mov	a,#0x01
                           1522 ;	Peephole 236.a	used r4 instead of ar4
   0440 2C                 1523 	add	a,r4
   0441 F0                 1524 	movx	@dptr,a
                           1525 ;	Peephole 181	changed mov to clr
   0442 E4                 1526 	clr	a
                           1527 ;	Peephole 236.b	used r5 instead of ar5
   0443 3D                 1528 	addc	a,r5
   0444 A3                 1529 	inc	dptr
   0445 F0                 1530 	movx	@dptr,a
                           1531 ;	main.c:136: if (alloc_success)
                           1532 ;	genIfx
                           1533 ;	genIfxJump
                           1534 ;	Peephole 108.d	removed ljmp by inverse jump logic
   0446 30*03 43           1535 	jnb	_handlePlus_alloc_success_1_1,00117$
                           1536 ;	Peephole 300	removed redundant label 00138$
                           1537 ;	main.c:137: printf ("\r\nBuffer %d of size: %d allocated at address: %p \r\n", first_free_buffer_index, buffer_size, Buffers[Num_Buffers-1].buf_start);
                           1538 ;	genAssign
   0449 90s00r02           1539 	mov	dptr,#_Num_Buffers
   044C E0                 1540 	movx	a,@dptr
   044D FC                 1541 	mov	r4,a
   044E A3                 1542 	inc	dptr
   044F E0                 1543 	movx	a,@dptr
   0450 FD                 1544 	mov	r5,a
                           1545 ;	genCast
                           1546 ;	genMinus
                           1547 ;	genMinusDec
   0451 EC                 1548 	mov	a,r4
   0452 14                 1549 	dec	a
                           1550 ;	genMult
                           1551 ;	genMultOneByte
   0453 75 F0 0C           1552 	mov	b,#0x0C
   0456 A4                 1553 	mul	ab
                           1554 ;	genPlus
   0457 24r43              1555 	add	a,#_Buffers
   0459 F5 82              1556 	mov	dpl,a
   045B 74s06              1557 	mov	a,#(_Buffers >> 8)
   045D 35 F0              1558 	addc	a,b
   045F F5 83              1559 	mov	dph,a
                           1560 ;	genPointerGet
                           1561 ;	genFarPointerGet
   0461 E0                 1562 	movx	a,@dptr
   0462 FC                 1563 	mov	r4,a
   0463 A3                 1564 	inc	dptr
   0464 E0                 1565 	movx	a,@dptr
   0465 FD                 1566 	mov	r5,a
                           1567 ;	genCast
   0466 7E 00              1568 	mov	r6,#0x0
                           1569 ;	genIpush
   0468 C0 04              1570 	push	ar4
   046A C0 05              1571 	push	ar5
   046C C0 06              1572 	push	ar6
                           1573 ;	genIpush
   046E C0 07              1574 	push	ar7
   0470 C0 00              1575 	push	ar0
                           1576 ;	genIpush
   0472 C0 02              1577 	push	ar2
   0474 C0 03              1578 	push	ar3
                           1579 ;	genIpush
   0476 74rA7              1580 	mov	a,#__str_8
   0478 C0 E0              1581 	push	acc
   047A 74s01              1582 	mov	a,#(__str_8 >> 8)
   047C C0 E0              1583 	push	acc
   047E 74 80              1584 	mov	a,#0x80
   0480 C0 E0              1585 	push	acc
                           1586 ;	genCall
   0482 12s00r00           1587 	lcall	_printf
   0485 E5 81              1588 	mov	a,sp
   0487 24 F6              1589 	add	a,#0xf6
   0489 F5 81              1590 	mov	sp,a
                           1591 ;	Peephole 112.b	changed ljmp to sjmp
                           1592 ;	Peephole 251.b	replaced sjmp to ret with ret
   048B 22                 1593 	ret
   048C                    1594 00117$:
                           1595 ;	main.c:139: printf("\r\nMalloc failed for buffer size %d\r\n", buffer_size);
                           1596 ;	genIpush
   048C C0 07              1597 	push	ar7
   048E C0 00              1598 	push	ar0
                           1599 ;	genIpush
   0490 74rDB              1600 	mov	a,#__str_9
   0492 C0 E0              1601 	push	acc
   0494 74s01              1602 	mov	a,#(__str_9 >> 8)
   0496 C0 E0              1603 	push	acc
   0498 74 80              1604 	mov	a,#0x80
   049A C0 E0              1605 	push	acc
                           1606 ;	genCall
   049C 12s00r00           1607 	lcall	_printf
   049F E5 81              1608 	mov	a,sp
   04A1 24 FB              1609 	add	a,#0xfb
   04A3 F5 81              1610 	mov	sp,a
                           1611 ;	main.c:141: Num_Buffers--;
                           1612 ;	genAssign
   04A5 90s00r02           1613 	mov	dptr,#_Num_Buffers
   04A8 E0                 1614 	movx	a,@dptr
   04A9 FA                 1615 	mov	r2,a
   04AA A3                 1616 	inc	dptr
   04AB E0                 1617 	movx	a,@dptr
   04AC FB                 1618 	mov	r3,a
                           1619 ;	genMinus
                           1620 ;	genMinusDec
   04AD 1A                 1621 	dec	r2
   04AE BA FF 01           1622 	cjne	r2,#0xff,00139$
   04B1 1B                 1623 	dec	r3
   04B2                    1624 00139$:
                           1625 ;	genAssign
   04B2 90s00r02           1626 	mov	dptr,#_Num_Buffers
   04B5 EA                 1627 	mov	a,r2
   04B6 F0                 1628 	movx	@dptr,a
   04B7 A3                 1629 	inc	dptr
   04B8 EB                 1630 	mov	a,r3
   04B9 F0                 1631 	movx	@dptr,a
                           1632 ;	main.c:142: Buffer_Free(&Buffers[Num_Buffers]);
                           1633 ;	genAssign
   04BA 90s00r02           1634 	mov	dptr,#_Num_Buffers
   04BD E0                 1635 	movx	a,@dptr
   04BE FA                 1636 	mov	r2,a
   04BF A3                 1637 	inc	dptr
   04C0 E0                 1638 	movx	a,@dptr
   04C1 FB                 1639 	mov	r3,a
                           1640 ;	genAssign
   04C2 90s00r00           1641 	mov	dptr,#__mulint_PARM_2
   04C5 74 0C              1642 	mov	a,#0x0C
   04C7 F0                 1643 	movx	@dptr,a
   04C8 E4                 1644 	clr	a
   04C9 A3                 1645 	inc	dptr
   04CA F0                 1646 	movx	@dptr,a
                           1647 ;	genCall
   04CB 8A 82              1648 	mov	dpl,r2
   04CD 8B 83              1649 	mov	dph,r3
   04CF 12s00r00           1650 	lcall	__mulint
   04D2 AA 82              1651 	mov	r2,dpl
   04D4 AB 83              1652 	mov	r3,dph
                           1653 ;	genPlus
                           1654 ;	Peephole 236.g	used r2 instead of ar2
   04D6 EA                 1655 	mov	a,r2
   04D7 24r43              1656 	add	a,#_Buffers
   04D9 FA                 1657 	mov	r2,a
                           1658 ;	Peephole 236.g	used r3 instead of ar3
   04DA EB                 1659 	mov	a,r3
   04DB 34s06              1660 	addc	a,#(_Buffers >> 8)
   04DD FB                 1661 	mov	r3,a
                           1662 ;	genCast
   04DE 7C 00              1663 	mov	r4,#0x0
                           1664 ;	genCall
   04E0 8A 82              1665 	mov	dpl,r2
   04E2 8B 83              1666 	mov	dph,r3
   04E4 8C F0              1667 	mov	b,r4
                           1668 ;	main.c:143: buffer_size = -1;    //Reset so it will ask again
                           1669 ;	Peephole 253.b	replaced lcall/ret with ljmp
   04E6 02s00r00           1670 	ljmp	_Buffer_Free
                           1671 ;
                           1672 ;------------------------------------------------------------
                           1673 ;Allocation info for local variables in function 'handleMinus'
                           1674 ;------------------------------------------------------------
                           1675 ;buffer_number             Allocated with name '_handleMinus_buffer_number_1_1'
                           1676 ;------------------------------------------------------------
                           1677 ;	main.c:150: void handleMinus(void){
                           1678 ;	-----------------------------------------
                           1679 ;	 function handleMinus
                           1680 ;	-----------------------------------------
   04E9                    1681 _handleMinus:
                           1682 ;	main.c:152: printf("\r\nEnter id of buffer you want to free: ");
                           1683 ;	genIpush
   04E9 74r00              1684 	mov	a,#__str_10
   04EB C0 E0              1685 	push	acc
   04ED 74s02              1686 	mov	a,#(__str_10 >> 8)
   04EF C0 E0              1687 	push	acc
   04F1 74 80              1688 	mov	a,#0x80
   04F3 C0 E0              1689 	push	acc
                           1690 ;	genCall
   04F5 12s00r00           1691 	lcall	_printf
   04F8 15 81              1692 	dec	sp
   04FA 15 81              1693 	dec	sp
   04FC 15 81              1694 	dec	sp
                           1695 ;	main.c:153: buffer_number = Serial_GetInteger(BUF1_MAX_STR_LENGTH);    //Get a three digit integer
                           1696 ;	genCall
                           1697 ;	Peephole 182.b	used 16 bit load of dptr
   04FE 90 00 0A           1698 	mov	dptr,#0x000A
   0501 12s00r00           1699 	lcall	_Serial_GetInteger
   0504 E5 82              1700 	mov	a,dpl
   0506 85 83 F0           1701 	mov	b,dph
                           1702 ;	genAssign
   0509 90s0ArF7           1703 	mov	dptr,#_handleMinus_buffer_number_1_1
   050C F0                 1704 	movx	@dptr,a
   050D A3                 1705 	inc	dptr
   050E E5 F0              1706 	mov	a,b
   0510 F0                 1707 	movx	@dptr,a
                           1708 ;	main.c:154: while (buffer_number <= 1 ){
   0511                    1709 00103$:
                           1710 ;	genAssign
   0511 90s0ArF7           1711 	mov	dptr,#_handleMinus_buffer_number_1_1
   0514 E0                 1712 	movx	a,@dptr
   0515 FA                 1713 	mov	r2,a
   0516 A3                 1714 	inc	dptr
   0517 E0                 1715 	movx	a,@dptr
   0518 FB                 1716 	mov	r3,a
                           1717 ;	genCmpGt
                           1718 ;	genCmp
   0519 C3                 1719 	clr	c
   051A 74 01              1720 	mov	a,#0x01
   051C 9A                 1721 	subb	a,r2
                           1722 ;	Peephole 159	avoided xrl during execution
   051D 74 80              1723 	mov	a,#(0x00 ^ 0x80)
   051F 8B F0              1724 	mov	b,r3
   0521 63 F0 80           1725 	xrl	b,#0x80
   0524 95 F0              1726 	subb	a,b
                           1727 ;	genIfxJump
                           1728 ;	Peephole 112.b	changed ljmp to sjmp
                           1729 ;	Peephole 160.a	removed sjmp by inverse jump logic
   0526 40 46              1730 	jc	00105$
                           1731 ;	Peephole 300	removed redundant label 00115$
                           1732 ;	main.c:155: if (buffer_number == -2){
                           1733 ;	genCmpEq
                           1734 ;	gencjneshort
                           1735 ;	Peephole 112.b	changed ljmp to sjmp
                           1736 ;	Peephole 198.a	optimized misc jump sequence
   0528 BA FE 19           1737 	cjne	r2,#0xFE,00102$
   052B BB FF 16           1738 	cjne	r3,#0xFF,00102$
                           1739 ;	Peephole 200.b	removed redundant sjmp
                           1740 ;	Peephole 300	removed redundant label 00116$
                           1741 ;	Peephole 300	removed redundant label 00117$
                           1742 ;	main.c:156: printf("\r\nCancelling");
                           1743 ;	genIpush
   052E 74r28              1744 	mov	a,#__str_11
   0530 C0 E0              1745 	push	acc
   0532 74s02              1746 	mov	a,#(__str_11 >> 8)
   0534 C0 E0              1747 	push	acc
   0536 74 80              1748 	mov	a,#0x80
   0538 C0 E0              1749 	push	acc
                           1750 ;	genCall
   053A 12s00r00           1751 	lcall	_printf
   053D 15 81              1752 	dec	sp
   053F 15 81              1753 	dec	sp
   0541 15 81              1754 	dec	sp
                           1755 ;	main.c:157: return;
                           1756 ;	genRet
                           1757 ;	Peephole 251.a	replaced ljmp to ret with ret
   0543 22                 1758 	ret
   0544                    1759 00102$:
                           1760 ;	main.c:159: printf("\r\nCan't free buffers 0 or 1. Enter another buffer id: ");
                           1761 ;	genIpush
   0544 74r35              1762 	mov	a,#__str_12
   0546 C0 E0              1763 	push	acc
   0548 74s02              1764 	mov	a,#(__str_12 >> 8)
   054A C0 E0              1765 	push	acc
   054C 74 80              1766 	mov	a,#0x80
   054E C0 E0              1767 	push	acc
                           1768 ;	genCall
   0550 12s00r00           1769 	lcall	_printf
   0553 15 81              1770 	dec	sp
   0555 15 81              1771 	dec	sp
   0557 15 81              1772 	dec	sp
                           1773 ;	main.c:160: buffer_number = Serial_GetInteger(BUF1_MAX_STR_LENGTH);
                           1774 ;	genCall
                           1775 ;	Peephole 182.b	used 16 bit load of dptr
   0559 90 00 0A           1776 	mov	dptr,#0x000A
   055C 12s00r00           1777 	lcall	_Serial_GetInteger
   055F E5 82              1778 	mov	a,dpl
   0561 85 83 F0           1779 	mov	b,dph
                           1780 ;	genAssign
   0564 90s0ArF7           1781 	mov	dptr,#_handleMinus_buffer_number_1_1
   0567 F0                 1782 	movx	@dptr,a
   0568 A3                 1783 	inc	dptr
   0569 E5 F0              1784 	mov	a,b
   056B F0                 1785 	movx	@dptr,a
                           1786 ;	Peephole 112.b	changed ljmp to sjmp
   056C 80 A3              1787 	sjmp	00103$
   056E                    1788 00105$:
                           1789 ;	main.c:162: if( Buffers[buffer_number].in_use){
                           1790 ;	genAssign
   056E 90s00r00           1791 	mov	dptr,#__mulint_PARM_2
   0571 74 0C              1792 	mov	a,#0x0C
   0573 F0                 1793 	movx	@dptr,a
   0574 E4                 1794 	clr	a
   0575 A3                 1795 	inc	dptr
   0576 F0                 1796 	movx	@dptr,a
                           1797 ;	genCall
   0577 8A 82              1798 	mov	dpl,r2
   0579 8B 83              1799 	mov	dph,r3
   057B C0 02              1800 	push	ar2
   057D C0 03              1801 	push	ar3
   057F 12s00r00           1802 	lcall	__mulint
   0582 AC 82              1803 	mov	r4,dpl
   0584 AD 83              1804 	mov	r5,dph
   0586 D0 03              1805 	pop	ar3
   0588 D0 02              1806 	pop	ar2
                           1807 ;	genPlus
                           1808 ;	Peephole 236.g	used r4 instead of ar4
   058A EC                 1809 	mov	a,r4
   058B 24r43              1810 	add	a,#_Buffers
   058D FE                 1811 	mov	r6,a
                           1812 ;	Peephole 236.g	used r5 instead of ar5
   058E ED                 1813 	mov	a,r5
   058F 34s06              1814 	addc	a,#(_Buffers >> 8)
   0591 FF                 1815 	mov	r7,a
                           1816 ;	genPlus
                           1817 ;     genPlusIncr
   0592 74 0A              1818 	mov	a,#0x0A
                           1819 ;	Peephole 236.a	used r6 instead of ar6
   0594 2E                 1820 	add	a,r6
   0595 F5 82              1821 	mov	dpl,a
                           1822 ;	Peephole 181	changed mov to clr
   0597 E4                 1823 	clr	a
                           1824 ;	Peephole 236.b	used r7 instead of ar7
   0598 3F                 1825 	addc	a,r7
   0599 F5 83              1826 	mov	dph,a
                           1827 ;	genPointerGet
                           1828 ;	genFarPointerGet
   059B E0                 1829 	movx	a,@dptr
   059C FE                 1830 	mov	r6,a
   059D A3                 1831 	inc	dptr
   059E E0                 1832 	movx	a,@dptr
                           1833 ;	genIfx
   059F FF                 1834 	mov	r7,a
                           1835 ;	Peephole 135	removed redundant mov
   05A0 4E                 1836 	orl	a,r6
                           1837 ;	genIfxJump
                           1838 ;	Peephole 108.c	removed ljmp by inverse jump logic
   05A1 60 4A              1839 	jz	00107$
                           1840 ;	Peephole 300	removed redundant label 00118$
                           1841 ;	main.c:163: printf ("\r\nFreeing Buffer %d", buffer_number);
                           1842 ;	genIpush
   05A3 C0 04              1843 	push	ar4
   05A5 C0 05              1844 	push	ar5
   05A7 C0 02              1845 	push	ar2
   05A9 C0 03              1846 	push	ar3
                           1847 ;	genIpush
   05AB 74r6C              1848 	mov	a,#__str_13
   05AD C0 E0              1849 	push	acc
   05AF 74s02              1850 	mov	a,#(__str_13 >> 8)
   05B1 C0 E0              1851 	push	acc
   05B3 74 80              1852 	mov	a,#0x80
   05B5 C0 E0              1853 	push	acc
                           1854 ;	genCall
   05B7 12s00r00           1855 	lcall	_printf
   05BA E5 81              1856 	mov	a,sp
   05BC 24 FB              1857 	add	a,#0xfb
   05BE F5 81              1858 	mov	sp,a
   05C0 D0 05              1859 	pop	ar5
   05C2 D0 04              1860 	pop	ar4
                           1861 ;	main.c:164: Buffer_Free(&Buffers[buffer_number]);
                           1862 ;	genPlus
                           1863 ;	Peephole 236.g	used r4 instead of ar4
   05C4 EC                 1864 	mov	a,r4
   05C5 24r43              1865 	add	a,#_Buffers
   05C7 FC                 1866 	mov	r4,a
                           1867 ;	Peephole 236.g	used r5 instead of ar5
   05C8 ED                 1868 	mov	a,r5
   05C9 34s06              1869 	addc	a,#(_Buffers >> 8)
   05CB FD                 1870 	mov	r5,a
                           1871 ;	genCast
   05CC 7E 00              1872 	mov	r6,#0x0
                           1873 ;	genCall
   05CE 8C 82              1874 	mov	dpl,r4
   05D0 8D 83              1875 	mov	dph,r5
   05D2 8E F0              1876 	mov	b,r6
   05D4 12s00r00           1877 	lcall	_Buffer_Free
                           1878 ;	main.c:165: Num_Buffers--;
                           1879 ;	genAssign
   05D7 90s00r02           1880 	mov	dptr,#_Num_Buffers
   05DA E0                 1881 	movx	a,@dptr
   05DB FC                 1882 	mov	r4,a
   05DC A3                 1883 	inc	dptr
   05DD E0                 1884 	movx	a,@dptr
   05DE FD                 1885 	mov	r5,a
                           1886 ;	genMinus
                           1887 ;	genMinusDec
   05DF 1C                 1888 	dec	r4
   05E0 BC FF 01           1889 	cjne	r4,#0xff,00119$
   05E3 1D                 1890 	dec	r5
   05E4                    1891 00119$:
                           1892 ;	genAssign
   05E4 90s00r02           1893 	mov	dptr,#_Num_Buffers
   05E7 EC                 1894 	mov	a,r4
   05E8 F0                 1895 	movx	@dptr,a
   05E9 A3                 1896 	inc	dptr
   05EA ED                 1897 	mov	a,r5
   05EB F0                 1898 	movx	@dptr,a
                           1899 ;	Peephole 112.b	changed ljmp to sjmp
                           1900 ;	Peephole 251.b	replaced sjmp to ret with ret
   05EC 22                 1901 	ret
   05ED                    1902 00107$:
                           1903 ;	main.c:168: printf ("\r\nInvalid buffer id %d.", buffer_number);
                           1904 ;	genIpush
   05ED C0 02              1905 	push	ar2
   05EF C0 03              1906 	push	ar3
                           1907 ;	genIpush
   05F1 74r80              1908 	mov	a,#__str_14
   05F3 C0 E0              1909 	push	acc
   05F5 74s02              1910 	mov	a,#(__str_14 >> 8)
   05F7 C0 E0              1911 	push	acc
   05F9 74 80              1912 	mov	a,#0x80
   05FB C0 E0              1913 	push	acc
                           1914 ;	genCall
   05FD 12s00r00           1915 	lcall	_printf
   0600 E5 81              1916 	mov	a,sp
   0602 24 FB              1917 	add	a,#0xfb
   0604 F5 81              1918 	mov	sp,a
                           1919 ;	Peephole 300	removed redundant label 00109$
   0606 22                 1920 	ret
                           1921 ;------------------------------------------------------------
                           1922 ;Allocation info for local variables in function 'handleInput'
                           1923 ;------------------------------------------------------------
                           1924 ;c                         Allocated with name '_handleInput_c_1_1'
                           1925 ;i                         Allocated with name '_handleInput_i_1_1'
                           1926 ;------------------------------------------------------------
                           1927 ;	main.c:172: void handleInput(char c){
                           1928 ;	-----------------------------------------
                           1929 ;	 function handleInput
                           1930 ;	-----------------------------------------
   0607                    1931 _handleInput:
                           1932 ;	genReceive
   0607 E5 82              1933 	mov	a,dpl
   0609 90s0ArF9           1934 	mov	dptr,#_handleInput_c_1_1
   060C F0                 1935 	movx	@dptr,a
                           1936 ;	main.c:174: DEBUGPORT(0x03);
                           1937 ;	genAssign
   060D 90s00r00           1938 	mov	dptr,#_dataout_PARM_2
   0610 74 03              1939 	mov	a,#0x03
   0612 F0                 1940 	movx	@dptr,a
                           1941 ;	genCall
                           1942 ;	Peephole 182.b	used 16 bit load of dptr
   0613 90 FF FF           1943 	mov	dptr,#0xFFFF
   0616 12s00r05           1944 	lcall	_dataout
                           1945 ;	main.c:176: if (isdigit(c) || isalpha(c)){
                           1946 ;	genAssign
   0619 90s0ArF9           1947 	mov	dptr,#_handleInput_c_1_1
   061C E0                 1948 	movx	a,@dptr
                           1949 ;	genCall
   061D FA                 1950 	mov	r2,a
                           1951 ;	Peephole 244.c	loading dpl from a instead of r2
   061E F5 82              1952 	mov	dpl,a
   0620 C0 02              1953 	push	ar2
   0622 12s00r00           1954 	lcall	_isdigit
   0625 E5 82              1955 	mov	a,dpl
   0627 D0 02              1956 	pop	ar2
                           1957 ;	genIfx
                           1958 ;	genIfxJump
                           1959 ;	Peephole 108.b	removed ljmp by inverse jump logic
   0629 70 1A              1960 	jnz	00125$
                           1961 ;	Peephole 300	removed redundant label 00150$
                           1962 ;	genCall
   062B 8A 82              1963 	mov	dpl,r2
   062D C0 02              1964 	push	ar2
   062F 12s00r00           1965 	lcall	_isupper
   0632 E5 82              1966 	mov	a,dpl
   0634 D0 02              1967 	pop	ar2
                           1968 ;	genIfx
                           1969 ;	genIfxJump
                           1970 ;	Peephole 108.b	removed ljmp by inverse jump logic
   0636 70 0D              1971 	jnz	00125$
                           1972 ;	Peephole 300	removed redundant label 00151$
                           1973 ;	genCall
   0638 8A 82              1974 	mov	dpl,r2
   063A C0 02              1975 	push	ar2
   063C 12s00r00           1976 	lcall	_islower
   063F E5 82              1977 	mov	a,dpl
   0641 D0 02              1978 	pop	ar2
                           1979 ;	genIfx
                           1980 ;	genIfxJump
                           1981 ;	Peephole 108.c	removed ljmp by inverse jump logic
   0643 60 60              1982 	jz	00126$
                           1983 ;	Peephole 300	removed redundant label 00152$
   0645                    1984 00125$:
                           1985 ;	main.c:178: if (Buffers[0].buf_start + Buffers[0].buf_insert < Buffers[0].buf_end ){
                           1986 ;	genPointerGet
                           1987 ;	genFarPointerGet
   0645 90s06r43           1988 	mov	dptr,#_Buffers
   0648 E0                 1989 	movx	a,@dptr
   0649 FB                 1990 	mov	r3,a
   064A A3                 1991 	inc	dptr
   064B E0                 1992 	movx	a,@dptr
   064C FC                 1993 	mov	r4,a
                           1994 ;	genPointerGet
                           1995 ;	genFarPointerGet
   064D 90s06r47           1996 	mov	dptr,#(_Buffers + 0x0004)
   0650 E0                 1997 	movx	a,@dptr
   0651 FD                 1998 	mov	r5,a
   0652 A3                 1999 	inc	dptr
   0653 E0                 2000 	movx	a,@dptr
   0654 FE                 2001 	mov	r6,a
                           2002 ;	genPlus
                           2003 ;	Peephole 236.g	used r5 instead of ar5
   0655 ED                 2004 	mov	a,r5
                           2005 ;	Peephole 236.a	used r3 instead of ar3
   0656 2B                 2006 	add	a,r3
   0657 FB                 2007 	mov	r3,a
                           2008 ;	Peephole 236.g	used r6 instead of ar6
   0658 EE                 2009 	mov	a,r6
                           2010 ;	Peephole 236.b	used r4 instead of ar4
   0659 3C                 2011 	addc	a,r4
   065A FC                 2012 	mov	r4,a
                           2013 ;	genPointerGet
                           2014 ;	genFarPointerGet
   065B 90s06r45           2015 	mov	dptr,#(_Buffers + 0x0002)
   065E E0                 2016 	movx	a,@dptr
   065F FD                 2017 	mov	r5,a
   0660 A3                 2018 	inc	dptr
   0661 E0                 2019 	movx	a,@dptr
   0662 FE                 2020 	mov	r6,a
                           2021 ;	genCmpLt
                           2022 ;	genCmp
   0663 C3                 2023 	clr	c
   0664 EB                 2024 	mov	a,r3
   0665 9D                 2025 	subb	a,r5
   0666 EC                 2026 	mov	a,r4
   0667 9E                 2027 	subb	a,r6
                           2028 ;	genIfxJump
   0668 40 01              2029 	jc	00153$
                           2030 ;	Peephole 251.a	replaced ljmp to ret with ret
   066A 22                 2031 	ret
   066B                    2032 00153$:
                           2033 ;	main.c:179: Buffers[0].buf_start[Buffers[0].buf_insert]  = c;
                           2034 ;	genPointerGet
                           2035 ;	genFarPointerGet
   066B 90s06r43           2036 	mov	dptr,#_Buffers
   066E E0                 2037 	movx	a,@dptr
   066F FB                 2038 	mov	r3,a
   0670 A3                 2039 	inc	dptr
   0671 E0                 2040 	movx	a,@dptr
   0672 FC                 2041 	mov	r4,a
                           2042 ;	genPointerGet
                           2043 ;	genFarPointerGet
   0673 90s06r47           2044 	mov	dptr,#(_Buffers + 0x0004)
   0676 E0                 2045 	movx	a,@dptr
   0677 FD                 2046 	mov	r5,a
   0678 A3                 2047 	inc	dptr
   0679 E0                 2048 	movx	a,@dptr
   067A FE                 2049 	mov	r6,a
                           2050 ;	genPlus
                           2051 ;	Peephole 236.g	used r5 instead of ar5
   067B ED                 2052 	mov	a,r5
                           2053 ;	Peephole 236.a	used r3 instead of ar3
   067C 2B                 2054 	add	a,r3
   067D FB                 2055 	mov	r3,a
                           2056 ;	Peephole 236.g	used r6 instead of ar6
   067E EE                 2057 	mov	a,r6
                           2058 ;	Peephole 236.b	used r4 instead of ar4
   067F 3C                 2059 	addc	a,r4
   0680 FC                 2060 	mov	r4,a
                           2061 ;	genAssign
   0681 90s0ArF9           2062 	mov	dptr,#_handleInput_c_1_1
   0684 E0                 2063 	movx	a,@dptr
                           2064 ;	genPointerSet
                           2065 ;     genFarPointerSet
   0685 FF                 2066 	mov	r7,a
   0686 8B 82              2067 	mov	dpl,r3
   0688 8C 83              2068 	mov	dph,r4
                           2069 ;	Peephole 136	removed redundant move
   068A F0                 2070 	movx	@dptr,a
                           2071 ;	main.c:180: ++Buffers[0].buf_insert;
                           2072 ;	genPlus
                           2073 ;     genPlusIncr
   068B 0D                 2074 	inc	r5
   068C BD 00 01           2075 	cjne	r5,#0x00,00154$
   068F 0E                 2076 	inc	r6
   0690                    2077 00154$:
                           2078 ;	genPointerSet
                           2079 ;     genFarPointerSet
   0690 90s06r47           2080 	mov	dptr,#(_Buffers + 0x0004)
   0693 ED                 2081 	mov	a,r5
   0694 F0                 2082 	movx	@dptr,a
   0695 A3                 2083 	inc	dptr
   0696 EE                 2084 	mov	a,r6
   0697 F0                 2085 	movx	@dptr,a
                           2086 ;	main.c:181: ++Num_Input_Chars;
                           2087 ;	genPlus
   0698 90s00r04           2088 	mov	dptr,#_Num_Input_Chars
   069B E0                 2089 	movx	a,@dptr
   069C 24 01              2090 	add	a,#0x01
   069E F0                 2091 	movx	@dptr,a
   069F A3                 2092 	inc	dptr
   06A0 E0                 2093 	movx	a,@dptr
   06A1 34 00              2094 	addc	a,#0x00
   06A3 F0                 2095 	movx	@dptr,a
                           2096 ;	Peephole 251.a	replaced ljmp to ret with ret
   06A4 22                 2097 	ret
   06A5                    2098 00126$:
                           2099 ;	main.c:184: else if(c == '?'){
                           2100 ;	genCmpEq
                           2101 ;	gencjneshort
   06A5 BA 3F 02           2102 	cjne	r2,#0x3F,00155$
   06A8 80 03              2103 	sjmp	00156$
   06AA                    2104 00155$:
   06AA 02s07r3F           2105 	ljmp	00123$
   06AD                    2106 00156$:
                           2107 ;	main.c:186: for (i = 0; i < MAX_NUM_BUFFERS; ++i){
                           2108 ;	genAssign
   06AD 7B 00              2109 	mov	r3,#0x00
   06AF 7C 00              2110 	mov	r4,#0x00
   06B1                    2111 00130$:
                           2112 ;	genCmpLt
                           2113 ;	genCmp
   06B1 C3                 2114 	clr	c
   06B2 EB                 2115 	mov	a,r3
   06B3 94 64              2116 	subb	a,#0x64
   06B5 EC                 2117 	mov	a,r4
   06B6 64 80              2118 	xrl	a,#0x80
   06B8 94 80              2119 	subb	a,#0x80
                           2120 ;	genIfxJump
                           2121 ;	Peephole 108.a	removed ljmp by inverse jump logic
   06BA 50 51              2122 	jnc	00133$
                           2123 ;	Peephole 300	removed redundant label 00157$
                           2124 ;	main.c:187: if (Buffers[i].in_use){
                           2125 ;	genAssign
   06BC 90s00r00           2126 	mov	dptr,#__mulint_PARM_2
   06BF 74 0C              2127 	mov	a,#0x0C
   06C1 F0                 2128 	movx	@dptr,a
   06C2 E4                 2129 	clr	a
   06C3 A3                 2130 	inc	dptr
   06C4 F0                 2131 	movx	@dptr,a
                           2132 ;	genCall
   06C5 8B 82              2133 	mov	dpl,r3
   06C7 8C 83              2134 	mov	dph,r4
   06C9 C0 03              2135 	push	ar3
   06CB C0 04              2136 	push	ar4
   06CD 12s00r00           2137 	lcall	__mulint
   06D0 AD 82              2138 	mov	r5,dpl
   06D2 AE 83              2139 	mov	r6,dph
   06D4 D0 04              2140 	pop	ar4
   06D6 D0 03              2141 	pop	ar3
                           2142 ;	genPlus
                           2143 ;	Peephole 236.g	used r5 instead of ar5
   06D8 ED                 2144 	mov	a,r5
   06D9 24r43              2145 	add	a,#_Buffers
   06DB FD                 2146 	mov	r5,a
                           2147 ;	Peephole 236.g	used r6 instead of ar6
   06DC EE                 2148 	mov	a,r6
   06DD 34s06              2149 	addc	a,#(_Buffers >> 8)
   06DF FE                 2150 	mov	r6,a
                           2151 ;	genPlus
                           2152 ;     genPlusIncr
   06E0 74 0A              2153 	mov	a,#0x0A
                           2154 ;	Peephole 236.a	used r5 instead of ar5
   06E2 2D                 2155 	add	a,r5
   06E3 F5 82              2156 	mov	dpl,a
                           2157 ;	Peephole 181	changed mov to clr
   06E5 E4                 2158 	clr	a
                           2159 ;	Peephole 236.b	used r6 instead of ar6
   06E6 3E                 2160 	addc	a,r6
   06E7 F5 83              2161 	mov	dph,a
                           2162 ;	genPointerGet
                           2163 ;	genFarPointerGet
   06E9 E0                 2164 	movx	a,@dptr
   06EA FF                 2165 	mov	r7,a
   06EB A3                 2166 	inc	dptr
   06EC E0                 2167 	movx	a,@dptr
                           2168 ;	genIfx
   06ED F8                 2169 	mov	r0,a
                           2170 ;	Peephole 135	removed redundant mov
   06EE 4F                 2171 	orl	a,r7
                           2172 ;	genIfxJump
                           2173 ;	Peephole 108.c	removed ljmp by inverse jump logic
   06EF 60 15              2174 	jz	00132$
                           2175 ;	Peephole 300	removed redundant label 00158$
                           2176 ;	main.c:188: Buffer_Print(&Buffers[i], false);
                           2177 ;	genAssign
                           2178 ;	genCast
   06F1 7F 00              2179 	mov	r7,#0x0
                           2180 ;	genAssign
   06F3 C2*00              2181 	clr	_Buffer_Print_PARM_2
                           2182 ;	genCall
   06F5 8D 82              2183 	mov	dpl,r5
   06F7 8E 83              2184 	mov	dph,r6
   06F9 8F F0              2185 	mov	b,r7
   06FB C0 03              2186 	push	ar3
   06FD C0 04              2187 	push	ar4
   06FF 12s00r00           2188 	lcall	_Buffer_Print
   0702 D0 04              2189 	pop	ar4
   0704 D0 03              2190 	pop	ar3
   0706                    2191 00132$:
                           2192 ;	main.c:186: for (i = 0; i < MAX_NUM_BUFFERS; ++i){
                           2193 ;	genPlus
                           2194 ;     genPlusIncr
   0706 0B                 2195 	inc	r3
                           2196 ;	Peephole 112.b	changed ljmp to sjmp
                           2197 ;	Peephole 243	avoided branch to sjmp
   0707 BB 00 A7           2198 	cjne	r3,#0x00,00130$
   070A 0C                 2199 	inc	r4
                           2200 ;	Peephole 300	removed redundant label 00159$
   070B 80 A4              2201 	sjmp	00130$
   070D                    2202 00133$:
                           2203 ;	main.c:191: Buffer_Clear(&Buffers[0]);
                           2204 ;	genCall
                           2205 ;	Peephole 182.a	used 16 bit load of DPTR
   070D 90s06r43           2206 	mov	dptr,#_Buffers
   0710 75 F0 00           2207 	mov	b,#0x00
   0713 12s00r00           2208 	lcall	_Buffer_Clear
                           2209 ;	main.c:192: printf("Number of characters input since last '?': %d\r\n", Num_Input_Chars);
                           2210 ;	genIpush
   0716 90s00r04           2211 	mov	dptr,#_Num_Input_Chars
   0719 E0                 2212 	movx	a,@dptr
   071A C0 E0              2213 	push	acc
   071C A3                 2214 	inc	dptr
   071D E0                 2215 	movx	a,@dptr
   071E C0 E0              2216 	push	acc
                           2217 ;	genIpush
   0720 74r98              2218 	mov	a,#__str_15
   0722 C0 E0              2219 	push	acc
   0724 74s02              2220 	mov	a,#(__str_15 >> 8)
   0726 C0 E0              2221 	push	acc
   0728 74 80              2222 	mov	a,#0x80
   072A C0 E0              2223 	push	acc
                           2224 ;	genCall
   072C 12s00r00           2225 	lcall	_printf
   072F E5 81              2226 	mov	a,sp
   0731 24 FB              2227 	add	a,#0xfb
   0733 F5 81              2228 	mov	sp,a
                           2229 ;	main.c:193: Num_Input_Chars = 0;    //Reset the count
                           2230 ;	genAssign
   0735 90s00r04           2231 	mov	dptr,#_Num_Input_Chars
   0738 E4                 2232 	clr	a
   0739 F0                 2233 	movx	@dptr,a
   073A A3                 2234 	inc	dptr
   073B F0                 2235 	movx	@dptr,a
                           2236 ;	main.c:194: displayPrompt();
                           2237 ;	genCall
                           2238 ;	Peephole 251.a	replaced ljmp to ret with ret
                           2239 ;	Peephole 253.a	replaced lcall/ret with ljmp
   073C 02s09r93           2240 	ljmp	_displayPrompt
   073F                    2241 00123$:
                           2242 ;	main.c:197: else if(c == '+'){
                           2243 ;	genCmpEq
                           2244 ;	gencjneshort
                           2245 ;	Peephole 112.b	changed ljmp to sjmp
                           2246 ;	Peephole 198.b	optimized misc jump sequence
   073F BA 2B 06           2247 	cjne	r2,#0x2B,00120$
                           2248 ;	Peephole 200.b	removed redundant sjmp
                           2249 ;	Peephole 300	removed redundant label 00160$
                           2250 ;	Peephole 300	removed redundant label 00161$
                           2251 ;	main.c:202: handlePlus();
                           2252 ;	genCall
   0742 12s02rD5           2253 	lcall	_handlePlus
                           2254 ;	main.c:203: displayPrompt();
                           2255 ;	genCall
                           2256 ;	Peephole 251.a	replaced ljmp to ret with ret
                           2257 ;	Peephole 253.a	replaced lcall/ret with ljmp
   0745 02s09r93           2258 	ljmp	_displayPrompt
   0748                    2259 00120$:
                           2260 ;	main.c:205: else if(c == '-'){
                           2261 ;	genCmpEq
                           2262 ;	gencjneshort
                           2263 ;	Peephole 112.b	changed ljmp to sjmp
                           2264 ;	Peephole 198.b	optimized misc jump sequence
   0748 BA 2D 06           2265 	cjne	r2,#0x2D,00117$
                           2266 ;	Peephole 200.b	removed redundant sjmp
                           2267 ;	Peephole 300	removed redundant label 00162$
                           2268 ;	Peephole 300	removed redundant label 00163$
                           2269 ;	main.c:210: handleMinus();
                           2270 ;	genCall
   074B 12s04rE9           2271 	lcall	_handleMinus
                           2272 ;	main.c:211: displayPrompt();
                           2273 ;	genCall
                           2274 ;	Peephole 251.a	replaced ljmp to ret with ret
                           2275 ;	Peephole 253.a	replaced lcall/ret with ljmp
   074E 02s09r93           2276 	ljmp	_displayPrompt
   0751                    2277 00117$:
                           2278 ;	main.c:213: else if(c == '='){
                           2279 ;	genCmpEq
                           2280 ;	gencjneshort
                           2281 ;	Peephole 112.b	changed ljmp to sjmp
                           2282 ;	Peephole 198.b	optimized misc jump sequence
   0751 BA 3D 2D           2283 	cjne	r2,#0x3D,00114$
                           2284 ;	Peephole 200.b	removed redundant sjmp
                           2285 ;	Peephole 300	removed redundant label 00164$
                           2286 ;	Peephole 300	removed redundant label 00165$
                           2287 ;	main.c:215: Buffer_Print(&Buffers[0], true);
                           2288 ;	genAssign
   0754 D2*00              2289 	setb	_Buffer_Print_PARM_2
                           2290 ;	genCall
                           2291 ;	Peephole 182.a	used 16 bit load of DPTR
   0756 90s06r43           2292 	mov	dptr,#_Buffers
   0759 75 F0 00           2293 	mov	b,#0x00
   075C 12s00r00           2294 	lcall	_Buffer_Print
                           2295 ;	main.c:216: printf("Number of characters input since last '?': %d\r\n", Num_Input_Chars);
                           2296 ;	genIpush
   075F 90s00r04           2297 	mov	dptr,#_Num_Input_Chars
   0762 E0                 2298 	movx	a,@dptr
   0763 C0 E0              2299 	push	acc
   0765 A3                 2300 	inc	dptr
   0766 E0                 2301 	movx	a,@dptr
   0767 C0 E0              2302 	push	acc
                           2303 ;	genIpush
   0769 74r98              2304 	mov	a,#__str_15
   076B C0 E0              2305 	push	acc
   076D 74s02              2306 	mov	a,#(__str_15 >> 8)
   076F C0 E0              2307 	push	acc
   0771 74 80              2308 	mov	a,#0x80
   0773 C0 E0              2309 	push	acc
                           2310 ;	genCall
   0775 12s00r00           2311 	lcall	_printf
   0778 E5 81              2312 	mov	a,sp
   077A 24 FB              2313 	add	a,#0xfb
   077C F5 81              2314 	mov	sp,a
                           2315 ;	main.c:218: displayPrompt();
                           2316 ;	genCall
                           2317 ;	Peephole 112.b	changed ljmp to sjmp
                           2318 ;	Peephole 251.b	replaced sjmp to ret with ret
                           2319 ;	Peephole 253.a	replaced lcall/ret with ljmp
   077E 02s09r93           2320 	ljmp	_displayPrompt
   0781                    2321 00114$:
                           2322 ;	main.c:220: else if(c == '%'){
                           2323 ;	genCmpEq
                           2324 ;	gencjneshort
                           2325 ;	Peephole 112.b	changed ljmp to sjmp
                           2326 ;	Peephole 198.b	optimized misc jump sequence
   0781 BA 25 50           2327 	cjne	r2,#0x25,00111$
                           2328 ;	Peephole 200.b	removed redundant sjmp
                           2329 ;	Peephole 300	removed redundant label 00166$
                           2330 ;	Peephole 300	removed redundant label 00167$
                           2331 ;	main.c:222: if(Buffers[1].in_use){
                           2332 ;	genPointerGet
                           2333 ;	genFarPointerGet
   0784 90s06r59           2334 	mov	dptr,#(_Buffers + 0x0016)
   0787 E0                 2335 	movx	a,@dptr
   0788 FB                 2336 	mov	r3,a
   0789 A3                 2337 	inc	dptr
   078A E0                 2338 	movx	a,@dptr
                           2339 ;	genIfx
   078B FC                 2340 	mov	r4,a
                           2341 ;	Peephole 135	removed redundant mov
   078C 4B                 2342 	orl	a,r3
                           2343 ;	genIfxJump
                           2344 ;	Peephole 108.c	removed ljmp by inverse jump logic
   078D 60 2F              2345 	jz	00106$
                           2346 ;	Peephole 300	removed redundant label 00168$
                           2347 ;	main.c:223: Buffer_ContentSwap(&Buffers[0], &Buffers[1]);
                           2348 ;	genCast
   078F 90s00r00           2349 	mov	dptr,#_Buffer_ContentSwap_PARM_2
   0792 74r4F              2350 	mov	a,#(_Buffers + 0x000c)
   0794 F0                 2351 	movx	@dptr,a
   0795 A3                 2352 	inc	dptr
   0796 74s06              2353 	mov	a,#((_Buffers + 0x000c) >> 8)
   0798 F0                 2354 	movx	@dptr,a
   0799 A3                 2355 	inc	dptr
   079A 74 00              2356 	mov	a,#0x0
   079C F0                 2357 	movx	@dptr,a
                           2358 ;	genCall
                           2359 ;	Peephole 182.a	used 16 bit load of DPTR
   079D 90s06r43           2360 	mov	dptr,#_Buffers
   07A0 75 F0 00           2361 	mov	b,#0x00
   07A3 12s00r00           2362 	lcall	_Buffer_ContentSwap
                           2363 ;	main.c:224: printf("\r\n\r\nSwapped contents of Buffer0 and Buffer 1.\r\n");
                           2364 ;	genIpush
   07A6 74rC8              2365 	mov	a,#__str_16
   07A8 C0 E0              2366 	push	acc
   07AA 74s02              2367 	mov	a,#(__str_16 >> 8)
   07AC C0 E0              2368 	push	acc
   07AE 74 80              2369 	mov	a,#0x80
   07B0 C0 E0              2370 	push	acc
                           2371 ;	genCall
   07B2 12s00r00           2372 	lcall	_printf
   07B5 15 81              2373 	dec	sp
   07B7 15 81              2374 	dec	sp
   07B9 15 81              2375 	dec	sp
                           2376 ;	main.c:225: displayPrompt();
                           2377 ;	genCall
                           2378 ;	Peephole 112.b	changed ljmp to sjmp
                           2379 ;	Peephole 251.b	replaced sjmp to ret with ret
                           2380 ;	Peephole 253.a	replaced lcall/ret with ljmp
   07BB 02s09r93           2381 	ljmp	_displayPrompt
   07BE                    2382 00106$:
                           2383 ;	main.c:228: printf("\r\nCan't swap. Need to allocate buffer 1. Press '+'");
                           2384 ;	genIpush
   07BE 74rF8              2385 	mov	a,#__str_17
   07C0 C0 E0              2386 	push	acc
   07C2 74s02              2387 	mov	a,#(__str_17 >> 8)
   07C4 C0 E0              2388 	push	acc
   07C6 74 80              2389 	mov	a,#0x80
   07C8 C0 E0              2390 	push	acc
                           2391 ;	genCall
   07CA 12s00r00           2392 	lcall	_printf
   07CD 15 81              2393 	dec	sp
   07CF 15 81              2394 	dec	sp
   07D1 15 81              2395 	dec	sp
                           2396 ;	Peephole 112.b	changed ljmp to sjmp
                           2397 ;	Peephole 251.b	replaced sjmp to ret with ret
   07D3 22                 2398 	ret
   07D4                    2399 00111$:
                           2400 ;	main.c:231: else if(c == '@'){
                           2401 ;	genCmpEq
                           2402 ;	gencjneshort
                           2403 ;	Peephole 112.b	changed ljmp to sjmp
                           2404 ;	Peephole 198.b	optimized misc jump sequence
   07D4 BA 40 02           2405 	cjne	r2,#0x40,00134$
                           2406 ;	Peephole 200.b	removed redundant sjmp
                           2407 ;	Peephole 300	removed redundant label 00169$
                           2408 ;	Peephole 300	removed redundant label 00170$
                           2409 ;	main.c:233: Restart = true;
                           2410 ;	genAssign
   07D7 D2*00              2411 	setb	_Restart
   07D9                    2412 00134$:
   07D9 22                 2413 	ret
                           2414 ;------------------------------------------------------------
                           2415 ;Allocation info for local variables in function 'FreeAll'
                           2416 ;------------------------------------------------------------
                           2417 ;i                         Allocated with name '_FreeAll_i_1_1'
                           2418 ;------------------------------------------------------------
                           2419 ;	main.c:237: void FreeAll(void){
                           2420 ;	-----------------------------------------
                           2421 ;	 function FreeAll
                           2422 ;	-----------------------------------------
   07DA                    2423 _FreeAll:
                           2424 ;	main.c:240: for (i = 0; i < MAX_NUM_BUFFERS; ++i){
                           2425 ;	genAssign
   07DA 7A 00              2426 	mov	r2,#0x00
   07DC 7B 00              2427 	mov	r3,#0x00
   07DE                    2428 00101$:
                           2429 ;	genCmpLt
                           2430 ;	genCmp
   07DE C3                 2431 	clr	c
   07DF EA                 2432 	mov	a,r2
   07E0 94 64              2433 	subb	a,#0x64
   07E2 EB                 2434 	mov	a,r3
   07E3 64 80              2435 	xrl	a,#0x80
   07E5 94 80              2436 	subb	a,#0x80
                           2437 ;	genIfxJump
                           2438 ;	Peephole 108.a	removed ljmp by inverse jump logic
   07E7 50 45              2439 	jnc	00105$
                           2440 ;	Peephole 300	removed redundant label 00110$
                           2441 ;	main.c:241: Buffer_Free(&Buffers[i]);
                           2442 ;	genAssign
   07E9 90s00r00           2443 	mov	dptr,#__mulint_PARM_2
   07EC 74 0C              2444 	mov	a,#0x0C
   07EE F0                 2445 	movx	@dptr,a
   07EF E4                 2446 	clr	a
   07F0 A3                 2447 	inc	dptr
   07F1 F0                 2448 	movx	@dptr,a
                           2449 ;	genCall
   07F2 8A 82              2450 	mov	dpl,r2
   07F4 8B 83              2451 	mov	dph,r3
   07F6 C0 02              2452 	push	ar2
   07F8 C0 03              2453 	push	ar3
   07FA 12s00r00           2454 	lcall	__mulint
   07FD AC 82              2455 	mov	r4,dpl
   07FF AD 83              2456 	mov	r5,dph
   0801 D0 03              2457 	pop	ar3
   0803 D0 02              2458 	pop	ar2
                           2459 ;	genPlus
                           2460 ;	Peephole 236.g	used r4 instead of ar4
   0805 EC                 2461 	mov	a,r4
   0806 24r43              2462 	add	a,#_Buffers
   0808 FC                 2463 	mov	r4,a
                           2464 ;	Peephole 236.g	used r5 instead of ar5
   0809 ED                 2465 	mov	a,r5
   080A 34s06              2466 	addc	a,#(_Buffers >> 8)
   080C FD                 2467 	mov	r5,a
                           2468 ;	genCast
   080D 7E 00              2469 	mov	r6,#0x0
                           2470 ;	genCall
   080F 8C 82              2471 	mov	dpl,r4
   0811 8D 83              2472 	mov	dph,r5
   0813 8E F0              2473 	mov	b,r6
   0815 C0 02              2474 	push	ar2
   0817 C0 03              2475 	push	ar3
   0819 12s00r00           2476 	lcall	_Buffer_Free
   081C D0 03              2477 	pop	ar3
   081E D0 02              2478 	pop	ar2
                           2479 ;	main.c:242: Num_Buffers = 0;
                           2480 ;	genAssign
   0820 90s00r02           2481 	mov	dptr,#_Num_Buffers
   0823 E4                 2482 	clr	a
   0824 F0                 2483 	movx	@dptr,a
   0825 A3                 2484 	inc	dptr
   0826 F0                 2485 	movx	@dptr,a
                           2486 ;	main.c:240: for (i = 0; i < MAX_NUM_BUFFERS; ++i){
                           2487 ;	genPlus
                           2488 ;     genPlusIncr
   0827 0A                 2489 	inc	r2
                           2490 ;	Peephole 112.b	changed ljmp to sjmp
                           2491 ;	Peephole 243	avoided branch to sjmp
   0828 BA 00 B3           2492 	cjne	r2,#0x00,00101$
   082B 0B                 2493 	inc	r3
                           2494 ;	Peephole 300	removed redundant label 00111$
   082C 80 B0              2495 	sjmp	00101$
   082E                    2496 00105$:
   082E 22                 2497 	ret
                           2498 ;------------------------------------------------------------
                           2499 ;Allocation info for local variables in function 'displayWelcome'
                           2500 ;------------------------------------------------------------
                           2501 ;------------------------------------------------------------
                           2502 ;	main.c:246: void displayWelcome(void){
                           2503 ;	-----------------------------------------
                           2504 ;	 function displayWelcome
                           2505 ;	-----------------------------------------
   082F                    2506 _displayWelcome:
                           2507 ;	main.c:247: DEBUGPORT(0x01);
                           2508 ;	genAssign
   082F 90s00r00           2509 	mov	dptr,#_dataout_PARM_2
   0832 74 01              2510 	mov	a,#0x01
   0834 F0                 2511 	movx	@dptr,a
                           2512 ;	genCall
                           2513 ;	Peephole 182.b	used 16 bit load of dptr
   0835 90 FF FF           2514 	mov	dptr,#0xFFFF
   0838 12s00r05           2515 	lcall	_dataout
                           2516 ;	main.c:248: printf("\r\n********************");
                           2517 ;	genIpush
   083B 74r2B              2518 	mov	a,#__str_18
   083D C0 E0              2519 	push	acc
   083F 74s03              2520 	mov	a,#(__str_18 >> 8)
   0841 C0 E0              2521 	push	acc
   0843 74 80              2522 	mov	a,#0x80
   0845 C0 E0              2523 	push	acc
                           2524 ;	genCall
   0847 12s00r00           2525 	lcall	_printf
   084A 15 81              2526 	dec	sp
   084C 15 81              2527 	dec	sp
   084E 15 81              2528 	dec	sp
                           2529 ;	main.c:249: printf("\r\n* Welcome to Lab 3 *");
                           2530 ;	genIpush
   0850 74r42              2531 	mov	a,#__str_19
   0852 C0 E0              2532 	push	acc
   0854 74s03              2533 	mov	a,#(__str_19 >> 8)
   0856 C0 E0              2534 	push	acc
   0858 74 80              2535 	mov	a,#0x80
   085A C0 E0              2536 	push	acc
                           2537 ;	genCall
   085C 12s00r00           2538 	lcall	_printf
   085F 15 81              2539 	dec	sp
   0861 15 81              2540 	dec	sp
   0863 15 81              2541 	dec	sp
                           2542 ;	main.c:250: printf("\r\n********************");
                           2543 ;	genIpush
   0865 74r2B              2544 	mov	a,#__str_18
   0867 C0 E0              2545 	push	acc
   0869 74s03              2546 	mov	a,#(__str_18 >> 8)
   086B C0 E0              2547 	push	acc
   086D 74 80              2548 	mov	a,#0x80
   086F C0 E0              2549 	push	acc
                           2550 ;	genCall
   0871 12s00r00           2551 	lcall	_printf
   0874 15 81              2552 	dec	sp
   0876 15 81              2553 	dec	sp
   0878 15 81              2554 	dec	sp
                           2555 ;	main.c:251: printf("\r\nAuthor: Joey Jacobus");
                           2556 ;	genIpush
   087A 74r59              2557 	mov	a,#__str_20
   087C C0 E0              2558 	push	acc
   087E 74s03              2559 	mov	a,#(__str_20 >> 8)
   0880 C0 E0              2560 	push	acc
   0882 74 80              2561 	mov	a,#0x80
   0884 C0 E0              2562 	push	acc
                           2563 ;	genCall
   0886 12s00r00           2564 	lcall	_printf
   0889 15 81              2565 	dec	sp
   088B 15 81              2566 	dec	sp
   088D 15 81              2567 	dec	sp
                           2568 ;	main.c:252: printf("\r\nOctober 2016");
                           2569 ;	genIpush
   088F 74r70              2570 	mov	a,#__str_21
   0891 C0 E0              2571 	push	acc
   0893 74s03              2572 	mov	a,#(__str_21 >> 8)
   0895 C0 E0              2573 	push	acc
   0897 74 80              2574 	mov	a,#0x80
   0899 C0 E0              2575 	push	acc
                           2576 ;	genCall
   089B 12s00r00           2577 	lcall	_printf
   089E 15 81              2578 	dec	sp
   08A0 15 81              2579 	dec	sp
   08A2 15 81              2580 	dec	sp
                           2581 ;	main.c:253: printf("\r\nEmbedded Systems Design: The University of Colorado at Boulder");
                           2582 ;	genIpush
   08A4 74r7F              2583 	mov	a,#__str_22
   08A6 C0 E0              2584 	push	acc
   08A8 74s03              2585 	mov	a,#(__str_22 >> 8)
   08AA C0 E0              2586 	push	acc
   08AC 74 80              2587 	mov	a,#0x80
   08AE C0 E0              2588 	push	acc
                           2589 ;	genCall
   08B0 12s00r00           2590 	lcall	_printf
   08B3 15 81              2591 	dec	sp
   08B5 15 81              2592 	dec	sp
   08B7 15 81              2593 	dec	sp
                           2594 ;	main.c:254: printf("\r\n\r\n");
                           2595 ;	genIpush
   08B9 74rC0              2596 	mov	a,#__str_23
   08BB C0 E0              2597 	push	acc
   08BD 74s03              2598 	mov	a,#(__str_23 >> 8)
   08BF C0 E0              2599 	push	acc
   08C1 74 80              2600 	mov	a,#0x80
   08C3 C0 E0              2601 	push	acc
                           2602 ;	genCall
   08C5 12s00r00           2603 	lcall	_printf
   08C8 15 81              2604 	dec	sp
   08CA 15 81              2605 	dec	sp
   08CC 15 81              2606 	dec	sp
                           2607 ;	main.c:255: printf("Enter alpha numeric characters to store them in buffer 0\r\n");
                           2608 ;	genIpush
   08CE 74rC5              2609 	mov	a,#__str_24
   08D0 C0 E0              2610 	push	acc
   08D2 74s03              2611 	mov	a,#(__str_24 >> 8)
   08D4 C0 E0              2612 	push	acc
   08D6 74 80              2613 	mov	a,#0x80
   08D8 C0 E0              2614 	push	acc
                           2615 ;	genCall
   08DA 12s00r00           2616 	lcall	_printf
   08DD 15 81              2617 	dec	sp
   08DF 15 81              2618 	dec	sp
   08E1 15 81              2619 	dec	sp
                           2620 ;	main.c:256: printf("Enter a special character at any time to perform the following ops:\r\n");
                           2621 ;	genIpush
   08E3 74r00              2622 	mov	a,#__str_25
   08E5 C0 E0              2623 	push	acc
   08E7 74s04              2624 	mov	a,#(__str_25 >> 8)
   08E9 C0 E0              2625 	push	acc
   08EB 74 80              2626 	mov	a,#0x80
   08ED C0 E0              2627 	push	acc
                           2628 ;	genCall
   08EF 12s00r00           2629 	lcall	_printf
   08F2 15 81              2630 	dec	sp
   08F4 15 81              2631 	dec	sp
   08F6 15 81              2632 	dec	sp
                           2633 ;	main.c:258: printf("\r\n'+': Create a new buffer");
                           2634 ;	genIpush
   08F8 74r46              2635 	mov	a,#__str_26
   08FA C0 E0              2636 	push	acc
   08FC 74s04              2637 	mov	a,#(__str_26 >> 8)
   08FE C0 E0              2638 	push	acc
   0900 74 80              2639 	mov	a,#0x80
   0902 C0 E0              2640 	push	acc
                           2641 ;	genCall
   0904 12s00r00           2642 	lcall	_printf
   0907 15 81              2643 	dec	sp
   0909 15 81              2644 	dec	sp
   090B 15 81              2645 	dec	sp
                           2646 ;	main.c:259: printf("\r\n'-': Delete an existing buffer");
                           2647 ;	genIpush
   090D 74r61              2648 	mov	a,#__str_27
   090F C0 E0              2649 	push	acc
   0911 74s04              2650 	mov	a,#(__str_27 >> 8)
   0913 C0 E0              2651 	push	acc
   0915 74 80              2652 	mov	a,#0x80
   0917 C0 E0              2653 	push	acc
                           2654 ;	genCall
   0919 12s00r00           2655 	lcall	_printf
   091C 15 81              2656 	dec	sp
   091E 15 81              2657 	dec	sp
   0920 15 81              2658 	dec	sp
                           2659 ;	main.c:260: printf("\r\n'?': Clear contents of Buffer 0 and display in ASCII format");
                           2660 ;	genIpush
   0922 74r82              2661 	mov	a,#__str_28
   0924 C0 E0              2662 	push	acc
   0926 74s04              2663 	mov	a,#(__str_28 >> 8)
   0928 C0 E0              2664 	push	acc
   092A 74 80              2665 	mov	a,#0x80
   092C C0 E0              2666 	push	acc
                           2667 ;	genCall
   092E 12s00r00           2668 	lcall	_printf
   0931 15 81              2669 	dec	sp
   0933 15 81              2670 	dec	sp
   0935 15 81              2671 	dec	sp
                           2672 ;	main.c:261: printf("\r\n'=': Show contents of Buffer 0 in hexadecimal format");
                           2673 ;	genIpush
   0937 74rC0              2674 	mov	a,#__str_29
   0939 C0 E0              2675 	push	acc
   093B 74s04              2676 	mov	a,#(__str_29 >> 8)
   093D C0 E0              2677 	push	acc
   093F 74 80              2678 	mov	a,#0x80
   0941 C0 E0              2679 	push	acc
                           2680 ;	genCall
   0943 12s00r00           2681 	lcall	_printf
   0946 15 81              2682 	dec	sp
   0948 15 81              2683 	dec	sp
   094A 15 81              2684 	dec	sp
                           2685 ;	main.c:262: printf("\r\n'%c': Swap the contents of Buffer 0 and Buffer 1", '%');
                           2686 ;	genIpush
   094C 74 25              2687 	mov	a,#0x25
   094E C0 E0              2688 	push	acc
                           2689 ;	Peephole 181	changed mov to clr
   0950 E4                 2690 	clr	a
   0951 C0 E0              2691 	push	acc
                           2692 ;	genIpush
   0953 74rF7              2693 	mov	a,#__str_30
   0955 C0 E0              2694 	push	acc
   0957 74s04              2695 	mov	a,#(__str_30 >> 8)
   0959 C0 E0              2696 	push	acc
   095B 74 80              2697 	mov	a,#0x80
   095D C0 E0              2698 	push	acc
                           2699 ;	genCall
   095F 12s00r00           2700 	lcall	_printf
   0962 E5 81              2701 	mov	a,sp
   0964 24 FB              2702 	add	a,#0xfb
   0966 F5 81              2703 	mov	sp,a
                           2704 ;	main.c:263: printf("\r\n'@': Clear buffers and restart the program");
                           2705 ;	genIpush
   0968 74r2A              2706 	mov	a,#__str_31
   096A C0 E0              2707 	push	acc
   096C 74s05              2708 	mov	a,#(__str_31 >> 8)
   096E C0 E0              2709 	push	acc
   0970 74 80              2710 	mov	a,#0x80
   0972 C0 E0              2711 	push	acc
                           2712 ;	genCall
   0974 12s00r00           2713 	lcall	_printf
   0977 15 81              2714 	dec	sp
   0979 15 81              2715 	dec	sp
   097B 15 81              2716 	dec	sp
                           2717 ;	main.c:264: printf("\r\n\r\n");
                           2718 ;	genIpush
   097D 74rC0              2719 	mov	a,#__str_23
   097F C0 E0              2720 	push	acc
   0981 74s03              2721 	mov	a,#(__str_23 >> 8)
   0983 C0 E0              2722 	push	acc
   0985 74 80              2723 	mov	a,#0x80
   0987 C0 E0              2724 	push	acc
                           2725 ;	genCall
   0989 12s00r00           2726 	lcall	_printf
   098C 15 81              2727 	dec	sp
   098E 15 81              2728 	dec	sp
   0990 15 81              2729 	dec	sp
                           2730 ;	Peephole 300	removed redundant label 00101$
   0992 22                 2731 	ret
                           2732 ;------------------------------------------------------------
                           2733 ;Allocation info for local variables in function 'displayPrompt'
                           2734 ;------------------------------------------------------------
                           2735 ;------------------------------------------------------------
                           2736 ;	main.c:267: void displayPrompt(void){
                           2737 ;	-----------------------------------------
                           2738 ;	 function displayPrompt
                           2739 ;	-----------------------------------------
   0993                    2740 _displayPrompt:
                           2741 ;	main.c:268: printf ("\r\nEnter characters to add to Buffer0: ");
                           2742 ;	genIpush
   0993 74r57              2743 	mov	a,#__str_32
   0995 C0 E0              2744 	push	acc
   0997 74s05              2745 	mov	a,#(__str_32 >> 8)
   0999 C0 E0              2746 	push	acc
   099B 74 80              2747 	mov	a,#0x80
   099D C0 E0              2748 	push	acc
                           2749 ;	genCall
   099F 12s00r00           2750 	lcall	_printf
   09A2 15 81              2751 	dec	sp
   09A4 15 81              2752 	dec	sp
   09A6 15 81              2753 	dec	sp
                           2754 ;	Peephole 300	removed redundant label 00101$
   09A8 22                 2755 	ret
                           2756 ;------------------------------------------------------------
                           2757 ;Allocation info for local variables in function 'main'
                           2758 ;------------------------------------------------------------
                           2759 ;c                         Allocated with name '_main_c_1_1'
                           2760 ;------------------------------------------------------------
                           2761 ;	main.c:271: void main(void){
                           2762 ;	-----------------------------------------
                           2763 ;	 function main
                           2764 ;	-----------------------------------------
   09A9                    2765 _main:
                           2766 ;	main.c:273: DEBUGPORT(0x00);
                           2767 ;	genAssign
   09A9 90s00r00           2768 	mov	dptr,#_dataout_PARM_2
                           2769 ;	Peephole 181	changed mov to clr
   09AC E4                 2770 	clr	a
   09AD F0                 2771 	movx	@dptr,a
                           2772 ;	genCall
                           2773 ;	Peephole 182.b	used 16 bit load of dptr
   09AE 90 FF FF           2774 	mov	dptr,#0xFFFF
   09B1 12s00r05           2775 	lcall	_dataout
                           2776 ;	main.c:276: Restart = false;
                           2777 ;	genAssign
   09B4 C2*00              2778 	clr	_Restart
                           2779 ;	main.c:278: init_dynamic_memory((MEMHEADER xdata *)heap, HEAP_SIZE); // Initialize the heap
                           2780 ;	genAssign
   09B6 90s00r00           2781 	mov	dptr,#_init_dynamic_memory_PARM_2
   09B9 74 40              2782 	mov	a,#0x40
   09BB F0                 2783 	movx	@dptr,a
   09BC A3                 2784 	inc	dptr
   09BD 74 06              2785 	mov	a,#0x06
   09BF F0                 2786 	movx	@dptr,a
                           2787 ;	genCall
                           2788 ;	Peephole 182.a	used 16 bit load of DPTR
   09C0 90s00r03           2789 	mov	dptr,#_heap
   09C3 12s00r00           2790 	lcall	_init_dynamic_memory
                           2791 ;	main.c:279: Serial_Init();
                           2792 ;	genCall
   09C6 12s00r00           2793 	lcall	_Serial_Init
                           2794 ;	main.c:285: while(1){
   09C9                    2795 00109$:
                           2796 ;	main.c:286: displayWelcome();
                           2797 ;	genCall
   09C9 12s08r2F           2798 	lcall	_displayWelcome
                           2799 ;	main.c:287: setupBuffers();
                           2800 ;	genCall
   09CC 12s00r2A           2801 	lcall	_setupBuffers
                           2802 ;	main.c:288: printf ("\r\nBuffers set up!");
                           2803 ;	genIpush
   09CF 74r7E              2804 	mov	a,#__str_33
   09D1 C0 E0              2805 	push	acc
   09D3 74s05              2806 	mov	a,#(__str_33 >> 8)
   09D5 C0 E0              2807 	push	acc
   09D7 74 80              2808 	mov	a,#0x80
   09D9 C0 E0              2809 	push	acc
                           2810 ;	genCall
   09DB 12s00r00           2811 	lcall	_printf
   09DE 15 81              2812 	dec	sp
   09E0 15 81              2813 	dec	sp
   09E2 15 81              2814 	dec	sp
                           2815 ;	main.c:289: displayPrompt();
                           2816 ;	genCall
   09E4 12s09r93           2817 	lcall	_displayPrompt
                           2818 ;	main.c:290: P1_5 = 0;
                           2819 ;	genAssign
   09E7 C2 95              2820 	clr	_P1_5
                           2821 ;	main.c:291: while(1){
   09E9                    2822 00106$:
                           2823 ;	main.c:292: P1_5 = !P1_5;   //Debug
                           2824 ;	genNot
   09E9 B2 95              2825 	cpl	_P1_5
                           2826 ;	main.c:293: c = getchar();
                           2827 ;	genCall
   09EB 12s00r00           2828 	lcall	_getchar
   09EE AA 82              2829 	mov	r2,dpl
                           2830 ;	main.c:294: if (c == ENTER_KEY){
                           2831 ;	genCmpEq
                           2832 ;	gencjneshort
                           2833 ;	Peephole 112.b	changed ljmp to sjmp
                           2834 ;	Peephole 198.b	optimized misc jump sequence
   09F0 BA 0D 0A           2835 	cjne	r2,#0x0D,00102$
                           2836 ;	Peephole 200.b	removed redundant sjmp
                           2837 ;	Peephole 300	removed redundant label 00117$
                           2838 ;	Peephole 300	removed redundant label 00118$
                           2839 ;	main.c:295: putchar('\n');
                           2840 ;	genCall
   09F3 75 82 0A           2841 	mov	dpl,#0x0A
   09F6 C0 02              2842 	push	ar2
   09F8 12s00r00           2843 	lcall	_putchar
   09FB D0 02              2844 	pop	ar2
   09FD                    2845 00102$:
                           2846 ;	main.c:297: putchar(c);
                           2847 ;	genCall
   09FD 8A 82              2848 	mov	dpl,r2
   09FF C0 02              2849 	push	ar2
   0A01 12s00r00           2850 	lcall	_putchar
   0A04 D0 02              2851 	pop	ar2
                           2852 ;	main.c:299: handleInput(c);
                           2853 ;	genCall
   0A06 8A 82              2854 	mov	dpl,r2
   0A08 12s06r07           2855 	lcall	_handleInput
                           2856 ;	main.c:300: if (Restart){
                           2857 ;	genIfx
                           2858 ;	genIfxJump
                           2859 ;	Peephole 108.d	removed ljmp by inverse jump logic
                           2860 ;	main.c:301: Restart = false;
                           2861 ;	genAssign
                           2862 ;	Peephole 250.a	using atomic test and clear
   0A0B 10*00 02           2863 	jbc	_Restart,00119$
   0A0E 80 D9              2864 	sjmp	00106$
   0A10                    2865 00119$:
                           2866 ;	main.c:302: FreeAll();
                           2867 ;	genCall
   0A10 12s07rDA           2868 	lcall	_FreeAll
                           2869 ;	main.c:303: break;
                           2870 ;	Peephole 112.b	changed ljmp to sjmp
   0A13 80 B4              2871 	sjmp	00109$
                           2872 ;	Peephole 259.a	removed redundant label 00111$ and ret
                           2873 ;
                           2874 	.area CSEG    (CODE)
                           2875 	.area CONST   (CODE)
   0000                    2876 __str_0:
   0000 0D                 2877 	.db 0x0D
   0001 0A                 2878 	.db 0x0A
   0002 45 6E 74 65 72 20  2879 	.ascii "Enter a size for the buffers that is a multiple of 16 betw"
        61 20 73 69 7A 65
        20 66 6F 72 20 74
        68 65 20 62 75 66
        66 65 72 73 20 74
        68 61 74 20 69 73
        20 61 20 6D 75 6C
        74 69 70 6C 65 20
        6F 66 20 31 36 20
        62 65 74 77
   003C 65 65 6E 20 25 64  2880 	.ascii "een %d and %d: "
        20 61 6E 64 20 25
        64 3A 20
   004B 00                 2881 	.db 0x00
   004C                    2882 __str_1:
   004C 0D                 2883 	.db 0x0D
   004D 0A                 2884 	.db 0x0A
   004E 45 72 72 6F 72 2E  2885 	.ascii "Error. Value must be greater than %d"
        20 56 61 6C 75 65
        20 6D 75 73 74 20
        62 65 20 67 72 65
        61 74 65 72 20 74
        68 61 6E 20 25 64
   0072 0D                 2886 	.db 0x0D
   0073 0A                 2887 	.db 0x0A
   0074 00                 2888 	.db 0x00
   0075                    2889 __str_2:
   0075 0D                 2890 	.db 0x0D
   0076 0A                 2891 	.db 0x0A
   0077 45 72 72 6F 72 2E  2892 	.ascii "Error. Value must be less than %d"
        20 56 61 6C 75 65
        20 6D 75 73 74 20
        62 65 20 6C 65 73
        73 20 74 68 61 6E
        20 25 64
   0098 0D                 2893 	.db 0x0D
   0099 0A                 2894 	.db 0x0A
   009A 00                 2895 	.db 0x00
   009B                    2896 __str_3:
   009B 0D                 2897 	.db 0x0D
   009C 0A                 2898 	.db 0x0A
   009D 45 72 72 6F 72 2E  2899 	.ascii "Error. Buffer Size must be a multiple of 16"
        20 42 75 66 66 65
        72 20 53 69 7A 65
        20 6D 75 73 74 20
        62 65 20 61 20 6D
        75 6C 74 69 70 6C
        65 20 6F 66 20 31
        36
   00C8 0D                 2900 	.db 0x0D
   00C9 0A                 2901 	.db 0x0A
   00CA 00                 2902 	.db 0x00
   00CB                    2903 __str_4:
   00CB 0D                 2904 	.db 0x0D
   00CC 0A                 2905 	.db 0x0A
   00CD 42 75 66 66 65 72  2906 	.ascii "Buffers of size: %d allocated at addresses: %p and %p"
        73 20 6F 66 20 73
        69 7A 65 3A 20 25
        64 20 61 6C 6C 6F
        63 61 74 65 64 20
        61 74 20 61 64 64
        72 65 73 73 65 73
        3A 20 25 70 20 61
        6E 64 20 25 70
   0102 0D                 2907 	.db 0x0D
   0103 0A                 2908 	.db 0x0A
   0104 00                 2909 	.db 0x00
   0105                    2910 __str_5:
   0105 0D                 2911 	.db 0x0D
   0106 0A                 2912 	.db 0x0A
   0107 4D 61 6C 6C 6F 63  2913 	.ascii "Malloc failed for buffer size %d, choose something smaller"
        20 66 61 69 6C 65
        64 20 66 6F 72 20
        62 75 66 66 65 72
        20 73 69 7A 65 20
        25 64 2C 20 63 68
        6F 6F 73 65 20 73
        6F 6D 65 74 68 69
        6E 67 20 73 6D 61
        6C 6C 65 72
   0141 0D                 2914 	.db 0x0D
   0142 0A                 2915 	.db 0x0A
   0143 00                 2916 	.db 0x00
   0144                    2917 __str_6:
   0144 0D                 2918 	.db 0x0D
   0145 0A                 2919 	.db 0x0A
   0146 45 6E 74 65 72 20  2920 	.ascii "Enter a size for the new buffer between %d and %d: "
        61 20 73 69 7A 65
        20 66 6F 72 20 74
        68 65 20 6E 65 77
        20 62 75 66 66 65
        72 20 62 65 74 77
        65 65 6E 20 25 64
        20 61 6E 64 20 25
        64 3A 20
   0179 00                 2921 	.db 0x00
   017A                    2922 __str_7:
   017A 0D                 2923 	.db 0x0D
   017B 0A                 2924 	.db 0x0A
   017C 4F 75 74 20 6F 66  2925 	.ascii "Out of possible buffers. Allocation failed"
        20 70 6F 73 73 69
        62 6C 65 20 62 75
        66 66 65 72 73 2E
        20 41 6C 6C 6F 63
        61 74 69 6F 6E 20
        66 61 69 6C 65 64
   01A6 00                 2926 	.db 0x00
   01A7                    2927 __str_8:
   01A7 0D                 2928 	.db 0x0D
   01A8 0A                 2929 	.db 0x0A
   01A9 42 75 66 66 65 72  2930 	.ascii "Buffer %d of size: %d allocated at address: %p "
        20 25 64 20 6F 66
        20 73 69 7A 65 3A
        20 25 64 20 61 6C
        6C 6F 63 61 74 65
        64 20 61 74 20 61
        64 64 72 65 73 73
        3A 20 25 70 20
   01D8 0D                 2931 	.db 0x0D
   01D9 0A                 2932 	.db 0x0A
   01DA 00                 2933 	.db 0x00
   01DB                    2934 __str_9:
   01DB 0D                 2935 	.db 0x0D
   01DC 0A                 2936 	.db 0x0A
   01DD 4D 61 6C 6C 6F 63  2937 	.ascii "Malloc failed for buffer size %d"
        20 66 61 69 6C 65
        64 20 66 6F 72 20
        62 75 66 66 65 72
        20 73 69 7A 65 20
        25 64
   01FD 0D                 2938 	.db 0x0D
   01FE 0A                 2939 	.db 0x0A
   01FF 00                 2940 	.db 0x00
   0200                    2941 __str_10:
   0200 0D                 2942 	.db 0x0D
   0201 0A                 2943 	.db 0x0A
   0202 45 6E 74 65 72 20  2944 	.ascii "Enter id of buffer you want to free: "
        69 64 20 6F 66 20
        62 75 66 66 65 72
        20 79 6F 75 20 77
        61 6E 74 20 74 6F
        20 66 72 65 65 3A
        20
   0227 00                 2945 	.db 0x00
   0228                    2946 __str_11:
   0228 0D                 2947 	.db 0x0D
   0229 0A                 2948 	.db 0x0A
   022A 43 61 6E 63 65 6C  2949 	.ascii "Cancelling"
        6C 69 6E 67
   0234 00                 2950 	.db 0x00
   0235                    2951 __str_12:
   0235 0D                 2952 	.db 0x0D
   0236 0A                 2953 	.db 0x0A
   0237 43 61 6E 27 74 20  2954 	.ascii "Can't free buffers 0 or 1. Enter another buffer id: "
        66 72 65 65 20 62
        75 66 66 65 72 73
        20 30 20 6F 72 20
        31 2E 20 45 6E 74
        65 72 20 61 6E 6F
        74 68 65 72 20 62
        75 66 66 65 72 20
        69 64 3A 20
   026B 00                 2955 	.db 0x00
   026C                    2956 __str_13:
   026C 0D                 2957 	.db 0x0D
   026D 0A                 2958 	.db 0x0A
   026E 46 72 65 65 69 6E  2959 	.ascii "Freeing Buffer %d"
        67 20 42 75 66 66
        65 72 20 25 64
   027F 00                 2960 	.db 0x00
   0280                    2961 __str_14:
   0280 0D                 2962 	.db 0x0D
   0281 0A                 2963 	.db 0x0A
   0282 49 6E 76 61 6C 69  2964 	.ascii "Invalid buffer id %d."
        64 20 62 75 66 66
        65 72 20 69 64 20
        25 64 2E
   0297 00                 2965 	.db 0x00
   0298                    2966 __str_15:
   0298 4E 75 6D 62 65 72  2967 	.ascii "Number of characters input since last '?': %d"
        20 6F 66 20 63 68
        61 72 61 63 74 65
        72 73 20 69 6E 70
        75 74 20 73 69 6E
        63 65 20 6C 61 73
        74 20 27 3F 27 3A
        20 25 64
   02C5 0D                 2968 	.db 0x0D
   02C6 0A                 2969 	.db 0x0A
   02C7 00                 2970 	.db 0x00
   02C8                    2971 __str_16:
   02C8 0D                 2972 	.db 0x0D
   02C9 0A                 2973 	.db 0x0A
   02CA 0D                 2974 	.db 0x0D
   02CB 0A                 2975 	.db 0x0A
   02CC 53 77 61 70 70 65  2976 	.ascii "Swapped contents of Buffer0 and Buffer 1."
        64 20 63 6F 6E 74
        65 6E 74 73 20 6F
        66 20 42 75 66 66
        65 72 30 20 61 6E
        64 20 42 75 66 66
        65 72 20 31 2E
   02F5 0D                 2977 	.db 0x0D
   02F6 0A                 2978 	.db 0x0A
   02F7 00                 2979 	.db 0x00
   02F8                    2980 __str_17:
   02F8 0D                 2981 	.db 0x0D
   02F9 0A                 2982 	.db 0x0A
   02FA 43 61 6E 27 74 20  2983 	.ascii "Can't swap. Need to allocate buffer 1. Press '+'"
        73 77 61 70 2E 20
        4E 65 65 64 20 74
        6F 20 61 6C 6C 6F
        63 61 74 65 20 62
        75 66 66 65 72 20
        31 2E 20 50 72 65
        73 73 20 27 2B 27
   032A 00                 2984 	.db 0x00
   032B                    2985 __str_18:
   032B 0D                 2986 	.db 0x0D
   032C 0A                 2987 	.db 0x0A
   032D 2A 2A 2A 2A 2A 2A  2988 	.ascii "********************"
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A
   0341 00                 2989 	.db 0x00
   0342                    2990 __str_19:
   0342 0D                 2991 	.db 0x0D
   0343 0A                 2992 	.db 0x0A
   0344 2A 20 57 65 6C 63  2993 	.ascii "* Welcome to Lab 3 *"
        6F 6D 65 20 74 6F
        20 4C 61 62 20 33
        20 2A
   0358 00                 2994 	.db 0x00
   0359                    2995 __str_20:
   0359 0D                 2996 	.db 0x0D
   035A 0A                 2997 	.db 0x0A
   035B 41 75 74 68 6F 72  2998 	.ascii "Author: Joey Jacobus"
        3A 20 4A 6F 65 79
        20 4A 61 63 6F 62
        75 73
   036F 00                 2999 	.db 0x00
   0370                    3000 __str_21:
   0370 0D                 3001 	.db 0x0D
   0371 0A                 3002 	.db 0x0A
   0372 4F 63 74 6F 62 65  3003 	.ascii "October 2016"
        72 20 32 30 31 36
   037E 00                 3004 	.db 0x00
   037F                    3005 __str_22:
   037F 0D                 3006 	.db 0x0D
   0380 0A                 3007 	.db 0x0A
   0381 45 6D 62 65 64 64  3008 	.ascii "Embedded Systems Design: The University of Colorado at Bou"
        65 64 20 53 79 73
        74 65 6D 73 20 44
        65 73 69 67 6E 3A
        20 54 68 65 20 55
        6E 69 76 65 72 73
        69 74 79 20 6F 66
        20 43 6F 6C 6F 72
        61 64 6F 20 61 74
        20 42 6F 75
   03BB 6C 64 65 72        3009 	.ascii "lder"
   03BF 00                 3010 	.db 0x00
   03C0                    3011 __str_23:
   03C0 0D                 3012 	.db 0x0D
   03C1 0A                 3013 	.db 0x0A
   03C2 0D                 3014 	.db 0x0D
   03C3 0A                 3015 	.db 0x0A
   03C4 00                 3016 	.db 0x00
   03C5                    3017 __str_24:
   03C5 45 6E 74 65 72 20  3018 	.ascii "Enter alpha numeric characters to store them in buffer 0"
        61 6C 70 68 61 20
        6E 75 6D 65 72 69
        63 20 63 68 61 72
        61 63 74 65 72 73
        20 74 6F 20 73 74
        6F 72 65 20 74 68
        65 6D 20 69 6E 20
        62 75 66 66 65 72
        20 30
   03FD 0D                 3019 	.db 0x0D
   03FE 0A                 3020 	.db 0x0A
   03FF 00                 3021 	.db 0x00
   0400                    3022 __str_25:
   0400 45 6E 74 65 72 20  3023 	.ascii "Enter a special character at any time to perform the followi"
        61 20 73 70 65 63
        69 61 6C 20 63 68
        61 72 61 63 74 65
        72 20 61 74 20 61
        6E 79 20 74 69 6D
        65 20 74 6F 20 70
        65 72 66 6F 72 6D
        20 74 68 65 20 66
        6F 6C 6C 6F 77 69
   043C 6E 67 20 6F 70 73  3024 	.ascii "ng ops:"
        3A
   0443 0D                 3025 	.db 0x0D
   0444 0A                 3026 	.db 0x0A
   0445 00                 3027 	.db 0x00
   0446                    3028 __str_26:
   0446 0D                 3029 	.db 0x0D
   0447 0A                 3030 	.db 0x0A
   0448 27 2B 27 3A 20 43  3031 	.ascii "'+': Create a new buffer"
        72 65 61 74 65 20
        61 20 6E 65 77 20
        62 75 66 66 65 72
   0460 00                 3032 	.db 0x00
   0461                    3033 __str_27:
   0461 0D                 3034 	.db 0x0D
   0462 0A                 3035 	.db 0x0A
   0463 27 2D 27 3A 20 44  3036 	.ascii "'-': Delete an existing buffer"
        65 6C 65 74 65 20
        61 6E 20 65 78 69
        73 74 69 6E 67 20
        62 75 66 66 65 72
   0481 00                 3037 	.db 0x00
   0482                    3038 __str_28:
   0482 0D                 3039 	.db 0x0D
   0483 0A                 3040 	.db 0x0A
   0484 27 3F 27 3A 20 43  3041 	.ascii "'?': Clear contents of Buffer 0 and display in ASCII forma"
        6C 65 61 72 20 63
        6F 6E 74 65 6E 74
        73 20 6F 66 20 42
        75 66 66 65 72 20
        30 20 61 6E 64 20
        64 69 73 70 6C 61
        79 20 69 6E 20 41
        53 43 49 49 20 66
        6F 72 6D 61
   04BE 74                 3042 	.ascii "t"
   04BF 00                 3043 	.db 0x00
   04C0                    3044 __str_29:
   04C0 0D                 3045 	.db 0x0D
   04C1 0A                 3046 	.db 0x0A
   04C2 27 3D 27 3A 20 53  3047 	.ascii "'=': Show contents of Buffer 0 in hexadecimal format"
        68 6F 77 20 63 6F
        6E 74 65 6E 74 73
        20 6F 66 20 42 75
        66 66 65 72 20 30
        20 69 6E 20 68 65
        78 61 64 65 63 69
        6D 61 6C 20 66 6F
        72 6D 61 74
   04F6 00                 3048 	.db 0x00
   04F7                    3049 __str_30:
   04F7 0D                 3050 	.db 0x0D
   04F8 0A                 3051 	.db 0x0A
   04F9 27 25 63 27 3A 20  3052 	.ascii "'%c': Swap the contents of Buffer 0 and Buffer 1"
        53 77 61 70 20 74
        68 65 20 63 6F 6E
        74 65 6E 74 73 20
        6F 66 20 42 75 66
        66 65 72 20 30 20
        61 6E 64 20 42 75
        66 66 65 72 20 31
   0529 00                 3053 	.db 0x00
   052A                    3054 __str_31:
   052A 0D                 3055 	.db 0x0D
   052B 0A                 3056 	.db 0x0A
   052C 27 40 27 3A 20 43  3057 	.ascii "'@': Clear buffers and restart the program"
        6C 65 61 72 20 62
        75 66 66 65 72 73
        20 61 6E 64 20 72
        65 73 74 61 72 74
        20 74 68 65 20 70
        72 6F 67 72 61 6D
   0556 00                 3058 	.db 0x00
   0557                    3059 __str_32:
   0557 0D                 3060 	.db 0x0D
   0558 0A                 3061 	.db 0x0A
   0559 45 6E 74 65 72 20  3062 	.ascii "Enter characters to add to Buffer0: "
        63 68 61 72 61 63
        74 65 72 73 20 74
        6F 20 61 64 64 20
        74 6F 20 42 75 66
        66 65 72 30 3A 20
   057D 00                 3063 	.db 0x00
   057E                    3064 __str_33:
   057E 0D                 3065 	.db 0x0D
   057F 0A                 3066 	.db 0x0A
   0580 42 75 66 66 65 72  3067 	.ascii "Buffers set up!"
        73 20 73 65 74 20
        75 70 21
   058F 00                 3068 	.db 0x00
                           3069 	.area XINIT   (CODE)
   0000                    3070 __xinit__Buffer_Size:
   0000 FF FF              3071 	.byte #0xFF,#0xFF
   0002                    3072 __xinit__Num_Buffers:
   0002 00 00              3073 	.byte #0x00,#0x00
   0004                    3074 __xinit__Num_Input_Chars:
   0004 00 00              3075 	.byte #0x00,#0x00
