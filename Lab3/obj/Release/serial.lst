                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : FreeWare ANSI-C Compiler
                              3 ; Version 2.6.0 #4309 (Jul 28 2006)
                              4 ; This file generated Sun Oct 09 13:15:50 2016
                              5 ;--------------------------------------------------------
                              6 	.module serial
                              7 	.optsdcc -mmcs51 --model-large
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _Serial_Init
                             13 	.globl _getstring
                             14 	.globl _serial_getInteger
                             15 	.globl _P5_7
                             16 	.globl _P5_6
                             17 	.globl _P5_5
                             18 	.globl _P5_4
                             19 	.globl _P5_3
                             20 	.globl _P5_2
                             21 	.globl _P5_1
                             22 	.globl _P5_0
                             23 	.globl _P4_7
                             24 	.globl _P4_6
                             25 	.globl _P4_5
                             26 	.globl _P4_4
                             27 	.globl _P4_3
                             28 	.globl _P4_2
                             29 	.globl _P4_1
                             30 	.globl _P4_0
                             31 	.globl _PX0L
                             32 	.globl _PT0L
                             33 	.globl _PX1L
                             34 	.globl _PT1L
                             35 	.globl _PLS
                             36 	.globl _PT2L
                             37 	.globl _PPCL
                             38 	.globl _EC
                             39 	.globl _CCF0
                             40 	.globl _CCF1
                             41 	.globl _CCF2
                             42 	.globl _CCF3
                             43 	.globl _CCF4
                             44 	.globl _CR
                             45 	.globl _CF
                             46 	.globl _TF2
                             47 	.globl _EXF2
                             48 	.globl _RCLK
                             49 	.globl _TCLK
                             50 	.globl _EXEN2
                             51 	.globl _TR2
                             52 	.globl _C_T2
                             53 	.globl _CP_RL2
                             54 	.globl _T2CON_7
                             55 	.globl _T2CON_6
                             56 	.globl _T2CON_5
                             57 	.globl _T2CON_4
                             58 	.globl _T2CON_3
                             59 	.globl _T2CON_2
                             60 	.globl _T2CON_1
                             61 	.globl _T2CON_0
                             62 	.globl _PT2
                             63 	.globl _ET2
                             64 	.globl _CY
                             65 	.globl _AC
                             66 	.globl _F0
                             67 	.globl _RS1
                             68 	.globl _RS0
                             69 	.globl _OV
                             70 	.globl _F1
                             71 	.globl _P
                             72 	.globl _PS
                             73 	.globl _PT1
                             74 	.globl _PX1
                             75 	.globl _PT0
                             76 	.globl _PX0
                             77 	.globl _RD
                             78 	.globl _WR
                             79 	.globl _T1
                             80 	.globl _T0
                             81 	.globl _INT1
                             82 	.globl _INT0
                             83 	.globl _TXD
                             84 	.globl _RXD
                             85 	.globl _P3_7
                             86 	.globl _P3_6
                             87 	.globl _P3_5
                             88 	.globl _P3_4
                             89 	.globl _P3_3
                             90 	.globl _P3_2
                             91 	.globl _P3_1
                             92 	.globl _P3_0
                             93 	.globl _EA
                             94 	.globl _ES
                             95 	.globl _ET1
                             96 	.globl _EX1
                             97 	.globl _ET0
                             98 	.globl _EX0
                             99 	.globl _P2_7
                            100 	.globl _P2_6
                            101 	.globl _P2_5
                            102 	.globl _P2_4
                            103 	.globl _P2_3
                            104 	.globl _P2_2
                            105 	.globl _P2_1
                            106 	.globl _P2_0
                            107 	.globl _SM0
                            108 	.globl _SM1
                            109 	.globl _SM2
                            110 	.globl _REN
                            111 	.globl _TB8
                            112 	.globl _RB8
                            113 	.globl _TI
                            114 	.globl _RI
                            115 	.globl _P1_7
                            116 	.globl _P1_6
                            117 	.globl _P1_5
                            118 	.globl _P1_4
                            119 	.globl _P1_3
                            120 	.globl _P1_2
                            121 	.globl _P1_1
                            122 	.globl _P1_0
                            123 	.globl _TF1
                            124 	.globl _TR1
                            125 	.globl _TF0
                            126 	.globl _TR0
                            127 	.globl _IE1
                            128 	.globl _IT1
                            129 	.globl _IE0
                            130 	.globl _IT0
                            131 	.globl _P0_7
                            132 	.globl _P0_6
                            133 	.globl _P0_5
                            134 	.globl _P0_4
                            135 	.globl _P0_3
                            136 	.globl _P0_2
                            137 	.globl _P0_1
                            138 	.globl _P0_0
                            139 	.globl _EECON
                            140 	.globl _KBF
                            141 	.globl _KBE
                            142 	.globl _KBLS
                            143 	.globl _BRL
                            144 	.globl _BDRCON
                            145 	.globl _T2MOD
                            146 	.globl _SPDAT
                            147 	.globl _SPSTA
                            148 	.globl _SPCON
                            149 	.globl _SADEN
                            150 	.globl _SADDR
                            151 	.globl _WDTPRG
                            152 	.globl _WDTRST
                            153 	.globl _P5
                            154 	.globl _P4
                            155 	.globl _IPH1
                            156 	.globl _IPL1
                            157 	.globl _IPH0
                            158 	.globl _IPL0
                            159 	.globl _IEN1
                            160 	.globl _IEN0
                            161 	.globl _CMOD
                            162 	.globl _CL
                            163 	.globl _CH
                            164 	.globl _CCON
                            165 	.globl _CCAPM4
                            166 	.globl _CCAPM3
                            167 	.globl _CCAPM2
                            168 	.globl _CCAPM1
                            169 	.globl _CCAPM0
                            170 	.globl _CCAP4L
                            171 	.globl _CCAP3L
                            172 	.globl _CCAP2L
                            173 	.globl _CCAP1L
                            174 	.globl _CCAP0L
                            175 	.globl _CCAP4H
                            176 	.globl _CCAP3H
                            177 	.globl _CCAP2H
                            178 	.globl _CCAP1H
                            179 	.globl _CCAP0H
                            180 	.globl _CKCKON1
                            181 	.globl _CKCKON0
                            182 	.globl _CKRL
                            183 	.globl _AUXR1
                            184 	.globl _AUXR
                            185 	.globl _TH2
                            186 	.globl _TL2
                            187 	.globl _RCAP2H
                            188 	.globl _RCAP2L
                            189 	.globl _T2CON
                            190 	.globl _B
                            191 	.globl _ACC
                            192 	.globl _PSW
                            193 	.globl _IP
                            194 	.globl _P3
                            195 	.globl _IE
                            196 	.globl _P2
                            197 	.globl _SBUF
                            198 	.globl _SCON
                            199 	.globl _P1
                            200 	.globl _TH1
                            201 	.globl _TH0
                            202 	.globl _TL1
                            203 	.globl _TL0
                            204 	.globl _TMOD
                            205 	.globl _TCON
                            206 	.globl _PCON
                            207 	.globl _DPH
                            208 	.globl _DPL
                            209 	.globl _SP
                            210 	.globl _P0
                            211 	.globl _getstring_PARM_2
                            212 	.globl _putchar
                            213 	.globl _getchar
                            214 ;--------------------------------------------------------
                            215 ; special function registers
                            216 ;--------------------------------------------------------
                            217 	.area RSEG    (DATA)
                    0080    218 _P0	=	0x0080
                    0081    219 _SP	=	0x0081
                    0082    220 _DPL	=	0x0082
                    0083    221 _DPH	=	0x0083
                    0087    222 _PCON	=	0x0087
                    0088    223 _TCON	=	0x0088
                    0089    224 _TMOD	=	0x0089
                    008A    225 _TL0	=	0x008a
                    008B    226 _TL1	=	0x008b
                    008C    227 _TH0	=	0x008c
                    008D    228 _TH1	=	0x008d
                    0090    229 _P1	=	0x0090
                    0098    230 _SCON	=	0x0098
                    0099    231 _SBUF	=	0x0099
                    00A0    232 _P2	=	0x00a0
                    00A8    233 _IE	=	0x00a8
                    00B0    234 _P3	=	0x00b0
                    00B8    235 _IP	=	0x00b8
                    00D0    236 _PSW	=	0x00d0
                    00E0    237 _ACC	=	0x00e0
                    00F0    238 _B	=	0x00f0
                    00C8    239 _T2CON	=	0x00c8
                    00CA    240 _RCAP2L	=	0x00ca
                    00CB    241 _RCAP2H	=	0x00cb
                    00CC    242 _TL2	=	0x00cc
                    00CD    243 _TH2	=	0x00cd
                    008E    244 _AUXR	=	0x008e
                    00A2    245 _AUXR1	=	0x00a2
                    0097    246 _CKRL	=	0x0097
                    008F    247 _CKCKON0	=	0x008f
                    008F    248 _CKCKON1	=	0x008f
                    00FA    249 _CCAP0H	=	0x00fa
                    00FB    250 _CCAP1H	=	0x00fb
                    00FC    251 _CCAP2H	=	0x00fc
                    00FD    252 _CCAP3H	=	0x00fd
                    00FE    253 _CCAP4H	=	0x00fe
                    00EA    254 _CCAP0L	=	0x00ea
                    00EB    255 _CCAP1L	=	0x00eb
                    00EC    256 _CCAP2L	=	0x00ec
                    00ED    257 _CCAP3L	=	0x00ed
                    00EE    258 _CCAP4L	=	0x00ee
                    00DA    259 _CCAPM0	=	0x00da
                    00DB    260 _CCAPM1	=	0x00db
                    00DC    261 _CCAPM2	=	0x00dc
                    00DD    262 _CCAPM3	=	0x00dd
                    00DE    263 _CCAPM4	=	0x00de
                    00D8    264 _CCON	=	0x00d8
                    00F9    265 _CH	=	0x00f9
                    00E9    266 _CL	=	0x00e9
                    00D9    267 _CMOD	=	0x00d9
                    00A8    268 _IEN0	=	0x00a8
                    00B1    269 _IEN1	=	0x00b1
                    00B8    270 _IPL0	=	0x00b8
                    00B7    271 _IPH0	=	0x00b7
                    00B2    272 _IPL1	=	0x00b2
                    00B3    273 _IPH1	=	0x00b3
                    00C0    274 _P4	=	0x00c0
                    00D8    275 _P5	=	0x00d8
                    00A6    276 _WDTRST	=	0x00a6
                    00A7    277 _WDTPRG	=	0x00a7
                    00A9    278 _SADDR	=	0x00a9
                    00B9    279 _SADEN	=	0x00b9
                    00C3    280 _SPCON	=	0x00c3
                    00C4    281 _SPSTA	=	0x00c4
                    00C5    282 _SPDAT	=	0x00c5
                    00C9    283 _T2MOD	=	0x00c9
                    009B    284 _BDRCON	=	0x009b
                    009A    285 _BRL	=	0x009a
                    009C    286 _KBLS	=	0x009c
                    009D    287 _KBE	=	0x009d
                    009E    288 _KBF	=	0x009e
                    00D2    289 _EECON	=	0x00d2
                            290 ;--------------------------------------------------------
                            291 ; special function bits
                            292 ;--------------------------------------------------------
                            293 	.area RSEG    (DATA)
                    0080    294 _P0_0	=	0x0080
                    0081    295 _P0_1	=	0x0081
                    0082    296 _P0_2	=	0x0082
                    0083    297 _P0_3	=	0x0083
                    0084    298 _P0_4	=	0x0084
                    0085    299 _P0_5	=	0x0085
                    0086    300 _P0_6	=	0x0086
                    0087    301 _P0_7	=	0x0087
                    0088    302 _IT0	=	0x0088
                    0089    303 _IE0	=	0x0089
                    008A    304 _IT1	=	0x008a
                    008B    305 _IE1	=	0x008b
                    008C    306 _TR0	=	0x008c
                    008D    307 _TF0	=	0x008d
                    008E    308 _TR1	=	0x008e
                    008F    309 _TF1	=	0x008f
                    0090    310 _P1_0	=	0x0090
                    0091    311 _P1_1	=	0x0091
                    0092    312 _P1_2	=	0x0092
                    0093    313 _P1_3	=	0x0093
                    0094    314 _P1_4	=	0x0094
                    0095    315 _P1_5	=	0x0095
                    0096    316 _P1_6	=	0x0096
                    0097    317 _P1_7	=	0x0097
                    0098    318 _RI	=	0x0098
                    0099    319 _TI	=	0x0099
                    009A    320 _RB8	=	0x009a
                    009B    321 _TB8	=	0x009b
                    009C    322 _REN	=	0x009c
                    009D    323 _SM2	=	0x009d
                    009E    324 _SM1	=	0x009e
                    009F    325 _SM0	=	0x009f
                    00A0    326 _P2_0	=	0x00a0
                    00A1    327 _P2_1	=	0x00a1
                    00A2    328 _P2_2	=	0x00a2
                    00A3    329 _P2_3	=	0x00a3
                    00A4    330 _P2_4	=	0x00a4
                    00A5    331 _P2_5	=	0x00a5
                    00A6    332 _P2_6	=	0x00a6
                    00A7    333 _P2_7	=	0x00a7
                    00A8    334 _EX0	=	0x00a8
                    00A9    335 _ET0	=	0x00a9
                    00AA    336 _EX1	=	0x00aa
                    00AB    337 _ET1	=	0x00ab
                    00AC    338 _ES	=	0x00ac
                    00AF    339 _EA	=	0x00af
                    00B0    340 _P3_0	=	0x00b0
                    00B1    341 _P3_1	=	0x00b1
                    00B2    342 _P3_2	=	0x00b2
                    00B3    343 _P3_3	=	0x00b3
                    00B4    344 _P3_4	=	0x00b4
                    00B5    345 _P3_5	=	0x00b5
                    00B6    346 _P3_6	=	0x00b6
                    00B7    347 _P3_7	=	0x00b7
                    00B0    348 _RXD	=	0x00b0
                    00B1    349 _TXD	=	0x00b1
                    00B2    350 _INT0	=	0x00b2
                    00B3    351 _INT1	=	0x00b3
                    00B4    352 _T0	=	0x00b4
                    00B5    353 _T1	=	0x00b5
                    00B6    354 _WR	=	0x00b6
                    00B7    355 _RD	=	0x00b7
                    00B8    356 _PX0	=	0x00b8
                    00B9    357 _PT0	=	0x00b9
                    00BA    358 _PX1	=	0x00ba
                    00BB    359 _PT1	=	0x00bb
                    00BC    360 _PS	=	0x00bc
                    00D0    361 _P	=	0x00d0
                    00D1    362 _F1	=	0x00d1
                    00D2    363 _OV	=	0x00d2
                    00D3    364 _RS0	=	0x00d3
                    00D4    365 _RS1	=	0x00d4
                    00D5    366 _F0	=	0x00d5
                    00D6    367 _AC	=	0x00d6
                    00D7    368 _CY	=	0x00d7
                    00AD    369 _ET2	=	0x00ad
                    00BD    370 _PT2	=	0x00bd
                    00C8    371 _T2CON_0	=	0x00c8
                    00C9    372 _T2CON_1	=	0x00c9
                    00CA    373 _T2CON_2	=	0x00ca
                    00CB    374 _T2CON_3	=	0x00cb
                    00CC    375 _T2CON_4	=	0x00cc
                    00CD    376 _T2CON_5	=	0x00cd
                    00CE    377 _T2CON_6	=	0x00ce
                    00CF    378 _T2CON_7	=	0x00cf
                    00C8    379 _CP_RL2	=	0x00c8
                    00C9    380 _C_T2	=	0x00c9
                    00CA    381 _TR2	=	0x00ca
                    00CB    382 _EXEN2	=	0x00cb
                    00CC    383 _TCLK	=	0x00cc
                    00CD    384 _RCLK	=	0x00cd
                    00CE    385 _EXF2	=	0x00ce
                    00CF    386 _TF2	=	0x00cf
                    00DF    387 _CF	=	0x00df
                    00DE    388 _CR	=	0x00de
                    00DC    389 _CCF4	=	0x00dc
                    00DB    390 _CCF3	=	0x00db
                    00DA    391 _CCF2	=	0x00da
                    00D9    392 _CCF1	=	0x00d9
                    00D8    393 _CCF0	=	0x00d8
                    00AE    394 _EC	=	0x00ae
                    00BE    395 _PPCL	=	0x00be
                    00BD    396 _PT2L	=	0x00bd
                    00BC    397 _PLS	=	0x00bc
                    00BB    398 _PT1L	=	0x00bb
                    00BA    399 _PX1L	=	0x00ba
                    00B9    400 _PT0L	=	0x00b9
                    00B8    401 _PX0L	=	0x00b8
                    00C0    402 _P4_0	=	0x00c0
                    00C1    403 _P4_1	=	0x00c1
                    00C2    404 _P4_2	=	0x00c2
                    00C3    405 _P4_3	=	0x00c3
                    00C4    406 _P4_4	=	0x00c4
                    00C5    407 _P4_5	=	0x00c5
                    00C6    408 _P4_6	=	0x00c6
                    00C7    409 _P4_7	=	0x00c7
                    00D8    410 _P5_0	=	0x00d8
                    00D9    411 _P5_1	=	0x00d9
                    00DA    412 _P5_2	=	0x00da
                    00DB    413 _P5_3	=	0x00db
                    00DC    414 _P5_4	=	0x00dc
                    00DD    415 _P5_5	=	0x00dd
                    00DE    416 _P5_6	=	0x00de
                    00DF    417 _P5_7	=	0x00df
                            418 ;--------------------------------------------------------
                            419 ; overlayable register banks
                            420 ;--------------------------------------------------------
                            421 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     422 	.ds 8
                            423 ;--------------------------------------------------------
                            424 ; internal ram data
                            425 ;--------------------------------------------------------
                            426 	.area DSEG    (DATA)
   0000                     427 _getstring_sloc0_1_0:
   0000                     428 	.ds 3
                            429 ;--------------------------------------------------------
                            430 ; overlayable items in internal ram 
                            431 ;--------------------------------------------------------
                            432 	.area OSEG    (OVR,DATA)
                            433 ;--------------------------------------------------------
                            434 ; indirectly addressable internal ram data
                            435 ;--------------------------------------------------------
                            436 	.area ISEG    (DATA)
                            437 ;--------------------------------------------------------
                            438 ; bit data
                            439 ;--------------------------------------------------------
                            440 	.area BSEG    (BIT)
                            441 ;--------------------------------------------------------
                            442 ; paged external ram data
                            443 ;--------------------------------------------------------
                            444 	.area PSEG    (PAG,XDATA)
                            445 ;--------------------------------------------------------
                            446 ; external ram data
                            447 ;--------------------------------------------------------
                            448 	.area XSEG    (XDATA)
   0000                     449 _putchar_c_1_1:
   0000                     450 	.ds 1
   0001                     451 _serial_getInteger_max_length_1_1:
   0001                     452 	.ds 2
   0003                     453 _serial_getInteger_buf_1_1:
   0003                     454 	.ds 11
   000E                     455 _serial_getInteger_index_1_1:
   000E                     456 	.ds 2
   0010                     457 _getstring_PARM_2:
   0010                     458 	.ds 2
   0012                     459 _getstring_buf_1_1:
   0012                     460 	.ds 3
   0015                     461 _getstring_c_1_1:
   0015                     462 	.ds 1
                            463 ;--------------------------------------------------------
                            464 ; external initialized ram data
                            465 ;--------------------------------------------------------
                            466 	.area XISEG   (XDATA)
                            467 	.area HOME    (CODE)
                            468 	.area GSINIT0 (CODE)
                            469 	.area GSINIT1 (CODE)
                            470 	.area GSINIT2 (CODE)
                            471 	.area GSINIT3 (CODE)
                            472 	.area GSINIT4 (CODE)
                            473 	.area GSINIT5 (CODE)
                            474 	.area GSINIT  (CODE)
                            475 	.area GSFINAL (CODE)
                            476 	.area CSEG    (CODE)
                            477 ;--------------------------------------------------------
                            478 ; global & static initialisations
                            479 ;--------------------------------------------------------
                            480 	.area HOME    (CODE)
                            481 	.area GSINIT  (CODE)
                            482 	.area GSFINAL (CODE)
                            483 	.area GSINIT  (CODE)
                            484 ;--------------------------------------------------------
                            485 ; Home
                            486 ;--------------------------------------------------------
                            487 	.area HOME    (CODE)
                            488 	.area CSEG    (CODE)
                            489 ;--------------------------------------------------------
                            490 ; code
                            491 ;--------------------------------------------------------
                            492 	.area CSEG    (CODE)
                            493 ;------------------------------------------------------------
                            494 ;Allocation info for local variables in function 'putchar'
                            495 ;------------------------------------------------------------
                            496 ;c                         Allocated with name '_putchar_c_1_1'
                            497 ;------------------------------------------------------------
                            498 ;	serial.c:17: void putchar (char c){
                            499 ;	-----------------------------------------
                            500 ;	 function putchar
                            501 ;	-----------------------------------------
   0000                     502 _putchar:
                    0002    503 	ar2 = 0x02
                    0003    504 	ar3 = 0x03
                    0004    505 	ar4 = 0x04
                    0005    506 	ar5 = 0x05
                    0006    507 	ar6 = 0x06
                    0007    508 	ar7 = 0x07
                    0000    509 	ar0 = 0x00
                    0001    510 	ar1 = 0x01
                            511 ;	genReceive
   0000 E5 82               512 	mov	a,dpl
   0002 90s00r00            513 	mov	dptr,#_putchar_c_1_1
   0005 F0                  514 	movx	@dptr,a
                            515 ;	serial.c:18: while (TI == 0);
   0006                     516 00101$:
                            517 ;	genIfx
                            518 ;	genIfxJump
                            519 ;	Peephole 108.d	removed ljmp by inverse jump logic
   0006 30 99 FD            520 	jnb	_TI,00101$
                            521 ;	Peephole 300	removed redundant label 00108$
                            522 ;	serial.c:19: SBUF = c; // load serial port with transmit value
                            523 ;	genAssign
   0009 90s00r00            524 	mov	dptr,#_putchar_c_1_1
   000C E0                  525 	movx	a,@dptr
   000D F5 99               526 	mov	_SBUF,a
                            527 ;	serial.c:20: TI = 0; // clear TI flag
                            528 ;	genAssign
   000F C2 99               529 	clr	_TI
                            530 ;	Peephole 300	removed redundant label 00104$
   0011 22                  531 	ret
                            532 ;------------------------------------------------------------
                            533 ;Allocation info for local variables in function 'getchar'
                            534 ;------------------------------------------------------------
                            535 ;------------------------------------------------------------
                            536 ;	serial.c:23: char getchar (){
                            537 ;	-----------------------------------------
                            538 ;	 function getchar
                            539 ;	-----------------------------------------
   0012                     540 _getchar:
                            541 ;	serial.c:25: while (RI == 0);
   0012                     542 00101$:
                            543 ;	genIfx
                            544 ;	genIfxJump
                            545 ;	Peephole 108.d	removed ljmp by inverse jump logic
                            546 ;	serial.c:26: RI = 0; // clear RI flag
                            547 ;	genAssign
                            548 ;	Peephole 250.a	using atomic test and clear
   0012 10 98 02            549 	jbc	_RI,00108$
   0015 80 FB               550 	sjmp	00101$
   0017                     551 00108$:
                            552 ;	serial.c:27: return SBUF; // return character from SBUF
                            553 ;	genAssign
   0017 AA 99               554 	mov	r2,_SBUF
                            555 ;	genRet
   0019 8A 82               556 	mov	dpl,r2
                            557 ;	Peephole 300	removed redundant label 00104$
   001B 22                  558 	ret
                            559 ;------------------------------------------------------------
                            560 ;Allocation info for local variables in function 'serial_getInteger'
                            561 ;------------------------------------------------------------
                            562 ;max_length                Allocated with name '_serial_getInteger_max_length_1_1'
                            563 ;c                         Allocated with name '_serial_getInteger_c_1_1'
                            564 ;buf                       Allocated with name '_serial_getInteger_buf_1_1'
                            565 ;index                     Allocated with name '_serial_getInteger_index_1_1'
                            566 ;------------------------------------------------------------
                            567 ;	serial.c:36: int serial_getInteger(int max_length){
                            568 ;	-----------------------------------------
                            569 ;	 function serial_getInteger
                            570 ;	-----------------------------------------
   001C                     571 _serial_getInteger:
                            572 ;	genReceive
   001C AA 83               573 	mov	r2,dph
   001E E5 82               574 	mov	a,dpl
   0020 90s00r01            575 	mov	dptr,#_serial_getInteger_max_length_1_1
   0023 F0                  576 	movx	@dptr,a
   0024 A3                  577 	inc	dptr
   0025 EA                  578 	mov	a,r2
   0026 F0                  579 	movx	@dptr,a
                            580 ;	serial.c:39: int index = 0;
                            581 ;	genAssign
   0027 90s00r0E            582 	mov	dptr,#_serial_getInteger_index_1_1
   002A E4                  583 	clr	a
   002B F0                  584 	movx	@dptr,a
   002C A3                  585 	inc	dptr
   002D F0                  586 	movx	@dptr,a
                            587 ;	serial.c:41: if (max_length > 10){
                            588 ;	genAssign
   002E 90s00r01            589 	mov	dptr,#_serial_getInteger_max_length_1_1
   0031 E0                  590 	movx	a,@dptr
   0032 FA                  591 	mov	r2,a
   0033 A3                  592 	inc	dptr
   0034 E0                  593 	movx	a,@dptr
   0035 FB                  594 	mov	r3,a
                            595 ;	genCmpGt
                            596 ;	genCmp
   0036 C3                  597 	clr	c
   0037 74 0A               598 	mov	a,#0x0A
   0039 9A                  599 	subb	a,r2
                            600 ;	Peephole 159	avoided xrl during execution
   003A 74 80               601 	mov	a,#(0x00 ^ 0x80)
   003C 8B F0               602 	mov	b,r3
   003E 63 F0 80            603 	xrl	b,#0x80
   0041 95 F0               604 	subb	a,b
                            605 ;	genIfxJump
                            606 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0043 50 19               607 	jnc	00121$
                            608 ;	Peephole 300	removed redundant label 00123$
                            609 ;	serial.c:42: printf("Serial_getInteger(): Error. Max_Length too large.");
                            610 ;	genIpush
   0045 74r00               611 	mov	a,#__str_0
   0047 C0 E0               612 	push	acc
   0049 74s00               613 	mov	a,#(__str_0 >> 8)
   004B C0 E0               614 	push	acc
   004D 74 80               615 	mov	a,#0x80
   004F C0 E0               616 	push	acc
                            617 ;	genCall
   0051 12s00r00            618 	lcall	_printf
   0054 15 81               619 	dec	sp
   0056 15 81               620 	dec	sp
   0058 15 81               621 	dec	sp
                            622 ;	serial.c:43: return -1;
                            623 ;	genRet
                            624 ;	Peephole 182.b	used 16 bit load of dptr
   005A 90 FF FF            625 	mov	dptr,#0xFFFF
                            626 ;	Peephole 251.a	replaced ljmp to ret with ret
   005D 22                  627 	ret
                            628 ;	serial.c:46: while (index < max_length ){
   005E                     629 00121$:
                            630 ;	genAssign
   005E                     631 00112$:
                            632 ;	genAssign
   005E 90s00r0E            633 	mov	dptr,#_serial_getInteger_index_1_1
   0061 E0                  634 	movx	a,@dptr
   0062 FC                  635 	mov	r4,a
   0063 A3                  636 	inc	dptr
   0064 E0                  637 	movx	a,@dptr
   0065 FD                  638 	mov	r5,a
                            639 ;	genCmpLt
                            640 ;	genCmp
   0066 C3                  641 	clr	c
   0067 EC                  642 	mov	a,r4
   0068 9A                  643 	subb	a,r2
   0069 ED                  644 	mov	a,r5
   006A 64 80               645 	xrl	a,#0x80
   006C 8B F0               646 	mov	b,r3
   006E 63 F0 80            647 	xrl	b,#0x80
   0071 95 F0               648 	subb	a,b
                            649 ;	genIfxJump
   0073 40 03               650 	jc	00124$
   0075 02s01r10            651 	ljmp	00114$
   0078                     652 00124$:
                            653 ;	serial.c:47: c = getchar();
                            654 ;	genCall
   0078 C0 02               655 	push	ar2
   007A C0 03               656 	push	ar3
   007C C0 04               657 	push	ar4
   007E C0 05               658 	push	ar5
   0080 12s00r12            659 	lcall	_getchar
   0083 AE 82               660 	mov	r6,dpl
   0085 D0 05               661 	pop	ar5
   0087 D0 04               662 	pop	ar4
   0089 D0 03               663 	pop	ar3
   008B D0 02               664 	pop	ar2
                            665 ;	serial.c:48: putchar(c);
                            666 ;	genCall
   008D 8E 82               667 	mov	dpl,r6
   008F C0 02               668 	push	ar2
   0091 C0 03               669 	push	ar3
   0093 C0 04               670 	push	ar4
   0095 C0 05               671 	push	ar5
   0097 C0 06               672 	push	ar6
   0099 12s00r00            673 	lcall	_putchar
   009C D0 06               674 	pop	ar6
   009E D0 05               675 	pop	ar5
   00A0 D0 04               676 	pop	ar4
   00A2 D0 03               677 	pop	ar3
   00A4 D0 02               678 	pop	ar2
                            679 ;	serial.c:49: if (c == ENTER_KEY)
                            680 ;	genCmpEq
                            681 ;	gencjneshort
   00A6 BE 0D 02            682 	cjne	r6,#0x0D,00125$
                            683 ;	Peephole 112.b	changed ljmp to sjmp
   00A9 80 65               684 	sjmp	00114$
   00AB                     685 00125$:
                            686 ;	serial.c:51: else if (c == BACKSPACE_KEY)
                            687 ;	genCmpEq
                            688 ;	gencjneshort
                            689 ;	Peephole 112.b	changed ljmp to sjmp
                            690 ;	Peephole 198.b	optimized misc jump sequence
   00AB BE 08 12            691 	cjne	r6,#0x08,00107$
                            692 ;	Peephole 200.b	removed redundant sjmp
                            693 ;	Peephole 300	removed redundant label 00126$
                            694 ;	Peephole 300	removed redundant label 00127$
                            695 ;	serial.c:52: --index;
                            696 ;	genMinus
                            697 ;	genMinusDec
   00AE EC                  698 	mov	a,r4
   00AF 24 FF               699 	add	a,#0xff
   00B1 FF                  700 	mov	r7,a
   00B2 ED                  701 	mov	a,r5
   00B3 34 FF               702 	addc	a,#0xff
   00B5 F8                  703 	mov	r0,a
                            704 ;	genAssign
   00B6 90s00r0E            705 	mov	dptr,#_serial_getInteger_index_1_1
   00B9 EF                  706 	mov	a,r7
   00BA F0                  707 	movx	@dptr,a
   00BB A3                  708 	inc	dptr
   00BC E8                  709 	mov	a,r0
   00BD F0                  710 	movx	@dptr,a
                            711 ;	Peephole 112.b	changed ljmp to sjmp
   00BE 80 9E               712 	sjmp	00112$
   00C0                     713 00107$:
                            714 ;	serial.c:53: else if ( isdigit(c) ){
                            715 ;	genCall
   00C0 8E 82               716 	mov	dpl,r6
   00C2 C0 02               717 	push	ar2
   00C4 C0 03               718 	push	ar3
   00C6 C0 04               719 	push	ar4
   00C8 C0 05               720 	push	ar5
   00CA C0 06               721 	push	ar6
   00CC 12s00r00            722 	lcall	_isdigit
   00CF E5 82               723 	mov	a,dpl
   00D1 D0 06               724 	pop	ar6
   00D3 D0 05               725 	pop	ar5
   00D5 D0 04               726 	pop	ar4
   00D7 D0 03               727 	pop	ar3
   00D9 D0 02               728 	pop	ar2
                            729 ;	genIfx
                            730 ;	genIfxJump
                            731 ;	Peephole 108.c	removed ljmp by inverse jump logic
   00DB 60 1A               732 	jz	00104$
                            733 ;	Peephole 300	removed redundant label 00128$
                            734 ;	serial.c:54: buf[index] = c;
                            735 ;	genPlus
                            736 ;	Peephole 236.g	used r4 instead of ar4
   00DD EC                  737 	mov	a,r4
   00DE 24r03               738 	add	a,#_serial_getInteger_buf_1_1
   00E0 F5 82               739 	mov	dpl,a
                            740 ;	Peephole 236.g	used r5 instead of ar5
   00E2 ED                  741 	mov	a,r5
   00E3 34s00               742 	addc	a,#(_serial_getInteger_buf_1_1 >> 8)
   00E5 F5 83               743 	mov	dph,a
                            744 ;	genPointerSet
                            745 ;     genFarPointerSet
   00E7 EE                  746 	mov	a,r6
   00E8 F0                  747 	movx	@dptr,a
                            748 ;	serial.c:55: ++index;
                            749 ;	genPlus
   00E9 90s00r0E            750 	mov	dptr,#_serial_getInteger_index_1_1
                            751 ;     genPlusIncr
   00EC 74 01               752 	mov	a,#0x01
                            753 ;	Peephole 236.a	used r4 instead of ar4
   00EE 2C                  754 	add	a,r4
   00EF F0                  755 	movx	@dptr,a
                            756 ;	Peephole 181	changed mov to clr
   00F0 E4                  757 	clr	a
                            758 ;	Peephole 236.b	used r5 instead of ar5
   00F1 3D                  759 	addc	a,r5
   00F2 A3                  760 	inc	dptr
   00F3 F0                  761 	movx	@dptr,a
   00F4 02s00r5E            762 	ljmp	00112$
   00F7                     763 00104$:
                            764 ;	serial.c:58: printf("\r\nInvalid character. Enter only digits.");
                            765 ;	genIpush
   00F7 74r32               766 	mov	a,#__str_1
   00F9 C0 E0               767 	push	acc
   00FB 74s00               768 	mov	a,#(__str_1 >> 8)
   00FD C0 E0               769 	push	acc
   00FF 74 80               770 	mov	a,#0x80
   0101 C0 E0               771 	push	acc
                            772 ;	genCall
   0103 12s00r00            773 	lcall	_printf
   0106 15 81               774 	dec	sp
   0108 15 81               775 	dec	sp
   010A 15 81               776 	dec	sp
                            777 ;	serial.c:59: return -1;
                            778 ;	genRet
                            779 ;	Peephole 182.b	used 16 bit load of dptr
   010C 90 FF FF            780 	mov	dptr,#0xFFFF
                            781 ;	Peephole 112.b	changed ljmp to sjmp
                            782 ;	Peephole 251.b	replaced sjmp to ret with ret
   010F 22                  783 	ret
   0110                     784 00114$:
                            785 ;	serial.c:62: buf[index] = '\0';  //Null terminate the string
                            786 ;	genAssign
   0110 90s00r0E            787 	mov	dptr,#_serial_getInteger_index_1_1
   0113 E0                  788 	movx	a,@dptr
   0114 FA                  789 	mov	r2,a
   0115 A3                  790 	inc	dptr
   0116 E0                  791 	movx	a,@dptr
   0117 FB                  792 	mov	r3,a
                            793 ;	genPlus
                            794 ;	Peephole 236.g	used r2 instead of ar2
   0118 EA                  795 	mov	a,r2
   0119 24r03               796 	add	a,#_serial_getInteger_buf_1_1
   011B F5 82               797 	mov	dpl,a
                            798 ;	Peephole 236.g	used r3 instead of ar3
   011D EB                  799 	mov	a,r3
   011E 34s00               800 	addc	a,#(_serial_getInteger_buf_1_1 >> 8)
   0120 F5 83               801 	mov	dph,a
                            802 ;	genPointerSet
                            803 ;     genFarPointerSet
                            804 ;	Peephole 181	changed mov to clr
   0122 E4                  805 	clr	a
   0123 F0                  806 	movx	@dptr,a
                            807 ;	serial.c:63: return atoi(buf);
                            808 ;	genCall
                            809 ;	Peephole 182.a	used 16 bit load of DPTR
   0124 90s00r03            810 	mov	dptr,#_serial_getInteger_buf_1_1
   0127 75 F0 00            811 	mov	b,#0x00
                            812 ;	genRet
                            813 ;	Peephole 150.b	removed misc moves via dph, dpl before return
                            814 ;	Peephole 253.b	replaced lcall/ret with ljmp
   012A 02s00r00            815 	ljmp	_atoi
                            816 ;
                            817 ;------------------------------------------------------------
                            818 ;Allocation info for local variables in function 'getstring'
                            819 ;------------------------------------------------------------
                            820 ;sloc0                     Allocated with name '_getstring_sloc0_1_0'
                            821 ;length                    Allocated with name '_getstring_PARM_2'
                            822 ;buf                       Allocated with name '_getstring_buf_1_1'
                            823 ;c                         Allocated with name '_getstring_c_1_1'
                            824 ;offset                    Allocated with name '_getstring_offset_1_1'
                            825 ;------------------------------------------------------------
                            826 ;	serial.c:67: void getstring(unsigned char *buf, int length){
                            827 ;	-----------------------------------------
                            828 ;	 function getstring
                            829 ;	-----------------------------------------
   012D                     830 _getstring:
                            831 ;	genReceive
   012D AA F0               832 	mov	r2,b
   012F AB 83               833 	mov	r3,dph
   0131 E5 82               834 	mov	a,dpl
   0133 90s00r12            835 	mov	dptr,#_getstring_buf_1_1
   0136 F0                  836 	movx	@dptr,a
   0137 A3                  837 	inc	dptr
   0138 EB                  838 	mov	a,r3
   0139 F0                  839 	movx	@dptr,a
   013A A3                  840 	inc	dptr
   013B EA                  841 	mov	a,r2
   013C F0                  842 	movx	@dptr,a
                            843 ;	serial.c:70: c = getchar();
                            844 ;	genCall
   013D 12s00r12            845 	lcall	_getchar
   0140 AA 82               846 	mov	r2,dpl
                            847 ;	genAssign
   0142 90s00r15            848 	mov	dptr,#_getstring_c_1_1
   0145 EA                  849 	mov	a,r2
   0146 F0                  850 	movx	@dptr,a
                            851 ;	serial.c:71: putchar(c);
                            852 ;	genCall
   0147 8A 82               853 	mov	dpl,r2
   0149 12s00r00            854 	lcall	_putchar
                            855 ;	serial.c:72: while(c != ENTER_KEY && offset < length){
                            856 ;	genAssign
   014C 90s00r10            857 	mov	dptr,#_getstring_PARM_2
   014F E0                  858 	movx	a,@dptr
   0150 FA                  859 	mov	r2,a
   0151 A3                  860 	inc	dptr
   0152 E0                  861 	movx	a,@dptr
   0153 FB                  862 	mov	r3,a
                            863 ;	genAssign
   0154 90s00r12            864 	mov	dptr,#_getstring_buf_1_1
   0157 E0                  865 	movx	a,@dptr
   0158 F5*00               866 	mov	_getstring_sloc0_1_0,a
   015A A3                  867 	inc	dptr
   015B E0                  868 	movx	a,@dptr
   015C F5*01               869 	mov	(_getstring_sloc0_1_0 + 1),a
   015E A3                  870 	inc	dptr
   015F E0                  871 	movx	a,@dptr
   0160 F5*02               872 	mov	(_getstring_sloc0_1_0 + 2),a
                            873 ;	genAssign
   0162 7F 00               874 	mov	r7,#0x00
   0164 78 00               875 	mov	r0,#0x00
   0166                     876 00102$:
                            877 ;	genAssign
   0166 90s00r15            878 	mov	dptr,#_getstring_c_1_1
   0169 E0                  879 	movx	a,@dptr
   016A F9                  880 	mov	r1,a
                            881 ;	genCmpEq
                            882 ;	gencjneshort
   016B B9 0D 02            883 	cjne	r1,#0x0D,00111$
                            884 ;	Peephole 112.b	changed ljmp to sjmp
   016E 80 5D               885 	sjmp	00104$
   0170                     886 00111$:
                            887 ;	genCmpLt
                            888 ;	genCmp
   0170 C3                  889 	clr	c
   0171 EF                  890 	mov	a,r7
   0172 9A                  891 	subb	a,r2
   0173 E8                  892 	mov	a,r0
   0174 64 80               893 	xrl	a,#0x80
   0176 8B F0               894 	mov	b,r3
   0178 63 F0 80            895 	xrl	b,#0x80
   017B 95 F0               896 	subb	a,b
                            897 ;	genIfxJump
                            898 ;	Peephole 108.a	removed ljmp by inverse jump logic
   017D 50 4E               899 	jnc	00104$
                            900 ;	Peephole 300	removed redundant label 00112$
                            901 ;	serial.c:73: buf[offset] = c;
                            902 ;	genIpush
   017F C0 02               903 	push	ar2
   0181 C0 03               904 	push	ar3
                            905 ;	genPlus
                            906 ;	Peephole 236.g	used r7 instead of ar7
   0183 EF                  907 	mov	a,r7
   0184 25*00               908 	add	a,_getstring_sloc0_1_0
   0186 FA                  909 	mov	r2,a
                            910 ;	Peephole 236.g	used r0 instead of ar0
   0187 E8                  911 	mov	a,r0
   0188 35*01               912 	addc	a,(_getstring_sloc0_1_0 + 1)
   018A FB                  913 	mov	r3,a
   018B AC*02               914 	mov	r4,(_getstring_sloc0_1_0 + 2)
                            915 ;	genPointerSet
                            916 ;	genGenPointerSet
   018D 8A 82               917 	mov	dpl,r2
   018F 8B 83               918 	mov	dph,r3
   0191 8C F0               919 	mov	b,r4
   0193 E9                  920 	mov	a,r1
   0194 12s00r00            921 	lcall	__gptrput
                            922 ;	serial.c:74: c = getchar();
                            923 ;	genCall
   0197 C0 03               924 	push	ar3
   0199 C0 07               925 	push	ar7
   019B C0 00               926 	push	ar0
   019D 12s00r12            927 	lcall	_getchar
   01A0 AA 82               928 	mov	r2,dpl
   01A2 D0 00               929 	pop	ar0
   01A4 D0 07               930 	pop	ar7
   01A6 D0 03               931 	pop	ar3
                            932 ;	genAssign
   01A8 90s00r15            933 	mov	dptr,#_getstring_c_1_1
   01AB EA                  934 	mov	a,r2
   01AC F0                  935 	movx	@dptr,a
                            936 ;	serial.c:75: putchar(c);
                            937 ;	genCall
   01AD 8A 82               938 	mov	dpl,r2
   01AF C0 02               939 	push	ar2
   01B1 C0 03               940 	push	ar3
   01B3 C0 07               941 	push	ar7
   01B5 C0 00               942 	push	ar0
   01B7 12s00r00            943 	lcall	_putchar
   01BA D0 00               944 	pop	ar0
   01BC D0 07               945 	pop	ar7
   01BE D0 03               946 	pop	ar3
   01C0 D0 02               947 	pop	ar2
                            948 ;	serial.c:77: ++offset;
                            949 ;	genPlus
                            950 ;     genPlusIncr
   01C2 0F                  951 	inc	r7
   01C3 BF 00 01            952 	cjne	r7,#0x00,00113$
   01C6 08                  953 	inc	r0
   01C7                     954 00113$:
                            955 ;	genIpop
   01C7 D0 03               956 	pop	ar3
   01C9 D0 02               957 	pop	ar2
                            958 ;	Peephole 112.b	changed ljmp to sjmp
   01CB 80 99               959 	sjmp	00102$
   01CD                     960 00104$:
                            961 ;	serial.c:81: buf[offset] = '\0';
                            962 ;	genAssign
   01CD 90s00r12            963 	mov	dptr,#_getstring_buf_1_1
   01D0 E0                  964 	movx	a,@dptr
   01D1 FA                  965 	mov	r2,a
   01D2 A3                  966 	inc	dptr
   01D3 E0                  967 	movx	a,@dptr
   01D4 FB                  968 	mov	r3,a
   01D5 A3                  969 	inc	dptr
   01D6 E0                  970 	movx	a,@dptr
   01D7 FC                  971 	mov	r4,a
                            972 ;	genPlus
                            973 ;	Peephole 236.g	used r7 instead of ar7
   01D8 EF                  974 	mov	a,r7
                            975 ;	Peephole 236.a	used r2 instead of ar2
   01D9 2A                  976 	add	a,r2
   01DA FF                  977 	mov	r7,a
                            978 ;	Peephole 236.g	used r0 instead of ar0
   01DB E8                  979 	mov	a,r0
                            980 ;	Peephole 236.b	used r3 instead of ar3
   01DC 3B                  981 	addc	a,r3
   01DD F8                  982 	mov	r0,a
   01DE 8C 05               983 	mov	ar5,r4
                            984 ;	genPointerSet
                            985 ;	genGenPointerSet
   01E0 8F 82               986 	mov	dpl,r7
   01E2 88 83               987 	mov	dph,r0
   01E4 8D F0               988 	mov	b,r5
                            989 ;	Peephole 181	changed mov to clr
   01E6 E4                  990 	clr	a
                            991 ;	Peephole 253.b	replaced lcall/ret with ljmp
   01E7 02s00r00            992 	ljmp	__gptrput
                            993 ;
                            994 ;------------------------------------------------------------
                            995 ;Allocation info for local variables in function 'Serial_Init'
                            996 ;------------------------------------------------------------
                            997 ;------------------------------------------------------------
                            998 ;	serial.c:87: void Serial_Init(void){
                            999 ;	-----------------------------------------
                           1000 ;	 function Serial_Init
                           1001 ;	-----------------------------------------
   01EA                    1002 _Serial_Init:
                           1003 ;	serial.c:88: SCON = SCON_SERIAL_INIT;    //Init serial port
                           1004 ;	genAssign
   01EA 75 98 50           1005 	mov	_SCON,#0x50
                           1006 ;	serial.c:89: TMOD = TIMER1_TMOD_VAL;     // 8 bit auto-reload mode 2
                           1007 ;	genAssign
   01ED 75 89 20           1008 	mov	_TMOD,#0x20
                           1009 ;	serial.c:90: TH1 = TIMER1_RELOAD_VAL;
                           1010 ;	genAssign
   01F0 75 8D FD           1011 	mov	_TH1,#0xFD
                           1012 ;	serial.c:91: TL1 = TIMER1_RELOAD_VAL;  //Auto-Reload value for timer 1 baud-rate = 9600
                           1013 ;	genAssign
   01F3 75 8B FD           1014 	mov	_TL1,#0xFD
                           1015 ;	serial.c:93: TR1 = 1;
                           1016 ;	genAssign
   01F6 D2 8E              1017 	setb	_TR1
                           1018 ;	serial.c:94: TI = 1; //Clear to start
                           1019 ;	genAssign
   01F8 D2 99              1020 	setb	_TI
                           1021 ;	Peephole 300	removed redundant label 00101$
   01FA 22                 1022 	ret
                           1023 	.area CSEG    (CODE)
                           1024 	.area CONST   (CODE)
   0000                    1025 __str_0:
   0000 53 65 72 69 61 6C  1026 	.ascii "Serial_getInteger(): Error. Max_Length too large."
        5F 67 65 74 49 6E
        74 65 67 65 72 28
        29 3A 20 45 72 72
        6F 72 2E 20 4D 61
        78 5F 4C 65 6E 67
        74 68 20 74 6F 6F
        20 6C 61 72 67 65
        2E
   0031 00                 1027 	.db 0x00
   0032                    1028 __str_1:
   0032 0D                 1029 	.db 0x0D
   0033 0A                 1030 	.db 0x0A
   0034 49 6E 76 61 6C 69  1031 	.ascii "Invalid character. Enter only digits."
        64 20 63 68 61 72
        61 63 74 65 72 2E
        20 45 6E 74 65 72
        20 6F 6E 6C 79 20
        64 69 67 69 74 73
        2E
   0059 00                 1032 	.db 0x00
                           1033 	.area XINIT   (CODE)
